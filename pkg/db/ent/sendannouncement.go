// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendannouncement"
	"github.com/google/uuid"
)

// SendAnnouncement is the model entity for the SendAnnouncement schema.
type SendAnnouncement struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AnnouncementID holds the value of the "announcement_id" field.
	AnnouncementID uuid.UUID `json:"announcement_id,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SendAnnouncement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sendannouncement.FieldID, sendannouncement.FieldCreatedAt, sendannouncement.FieldUpdatedAt, sendannouncement.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case sendannouncement.FieldChannel:
			values[i] = new(sql.NullString)
		case sendannouncement.FieldEntID, sendannouncement.FieldAppID, sendannouncement.FieldUserID, sendannouncement.FieldAnnouncementID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SendAnnouncement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SendAnnouncement fields.
func (sa *SendAnnouncement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sendannouncement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = uint32(value.Int64)
		case sendannouncement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = uint32(value.Int64)
			}
		case sendannouncement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = uint32(value.Int64)
			}
		case sendannouncement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = uint32(value.Int64)
			}
		case sendannouncement.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				sa.EntID = *value
			}
		case sendannouncement.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				sa.AppID = *value
			}
		case sendannouncement.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sa.UserID = *value
			}
		case sendannouncement.FieldAnnouncementID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field announcement_id", values[i])
			} else if value != nil {
				sa.AnnouncementID = *value
			}
		case sendannouncement.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				sa.Channel = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SendAnnouncement.
// Note that you need to call SendAnnouncement.Unwrap() before calling this method if this SendAnnouncement
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SendAnnouncement) Update() *SendAnnouncementUpdateOne {
	return (&SendAnnouncementClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the SendAnnouncement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SendAnnouncement) Unwrap() *SendAnnouncement {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SendAnnouncement is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SendAnnouncement) String() string {
	var builder strings.Builder
	builder.WriteString("SendAnnouncement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.UserID))
	builder.WriteString(", ")
	builder.WriteString("announcement_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.AnnouncementID))
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(sa.Channel)
	builder.WriteByte(')')
	return builder.String()
}

// SendAnnouncements is a parsable slice of SendAnnouncement.
type SendAnnouncements []*SendAnnouncement

func (sa SendAnnouncements) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
