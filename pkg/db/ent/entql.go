// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/announcement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/contact"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/emailtemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/frontendtemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notif"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifchannel"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifuser"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/readannouncement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendannouncement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/smstemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/userannouncement"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 12)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   announcement.Table,
			Columns: announcement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announcement.FieldID,
			},
		},
		Type: "Announcement",
		Fields: map[string]*sqlgraph.FieldSpec{
			announcement.FieldCreatedAt: {Type: field.TypeUint32, Column: announcement.FieldCreatedAt},
			announcement.FieldUpdatedAt: {Type: field.TypeUint32, Column: announcement.FieldUpdatedAt},
			announcement.FieldDeletedAt: {Type: field.TypeUint32, Column: announcement.FieldDeletedAt},
			announcement.FieldAppID:     {Type: field.TypeUUID, Column: announcement.FieldAppID},
			announcement.FieldLangID:    {Type: field.TypeUUID, Column: announcement.FieldLangID},
			announcement.FieldTitle:     {Type: field.TypeString, Column: announcement.FieldTitle},
			announcement.FieldContent:   {Type: field.TypeString, Column: announcement.FieldContent},
			announcement.FieldChannel:   {Type: field.TypeString, Column: announcement.FieldChannel},
			announcement.FieldStartAt:   {Type: field.TypeUint32, Column: announcement.FieldStartAt},
			announcement.FieldEndAt:     {Type: field.TypeUint32, Column: announcement.FieldEndAt},
			announcement.FieldType:      {Type: field.TypeString, Column: announcement.FieldType},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contact.FieldID,
			},
		},
		Type: "Contact",
		Fields: map[string]*sqlgraph.FieldSpec{
			contact.FieldCreatedAt:   {Type: field.TypeUint32, Column: contact.FieldCreatedAt},
			contact.FieldUpdatedAt:   {Type: field.TypeUint32, Column: contact.FieldUpdatedAt},
			contact.FieldDeletedAt:   {Type: field.TypeUint32, Column: contact.FieldDeletedAt},
			contact.FieldAppID:       {Type: field.TypeUUID, Column: contact.FieldAppID},
			contact.FieldUsedFor:     {Type: field.TypeString, Column: contact.FieldUsedFor},
			contact.FieldSender:      {Type: field.TypeString, Column: contact.FieldSender},
			contact.FieldAccount:     {Type: field.TypeString, Column: contact.FieldAccount},
			contact.FieldAccountType: {Type: field.TypeString, Column: contact.FieldAccountType},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailtemplate.FieldID,
			},
		},
		Type: "EmailTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailtemplate.FieldCreatedAt:         {Type: field.TypeUint32, Column: emailtemplate.FieldCreatedAt},
			emailtemplate.FieldUpdatedAt:         {Type: field.TypeUint32, Column: emailtemplate.FieldUpdatedAt},
			emailtemplate.FieldDeletedAt:         {Type: field.TypeUint32, Column: emailtemplate.FieldDeletedAt},
			emailtemplate.FieldAppID:             {Type: field.TypeUUID, Column: emailtemplate.FieldAppID},
			emailtemplate.FieldLangID:            {Type: field.TypeUUID, Column: emailtemplate.FieldLangID},
			emailtemplate.FieldDefaultToUsername: {Type: field.TypeString, Column: emailtemplate.FieldDefaultToUsername},
			emailtemplate.FieldUsedFor:           {Type: field.TypeString, Column: emailtemplate.FieldUsedFor},
			emailtemplate.FieldSender:            {Type: field.TypeString, Column: emailtemplate.FieldSender},
			emailtemplate.FieldReplyTos:          {Type: field.TypeJSON, Column: emailtemplate.FieldReplyTos},
			emailtemplate.FieldCcTos:             {Type: field.TypeJSON, Column: emailtemplate.FieldCcTos},
			emailtemplate.FieldSubject:           {Type: field.TypeString, Column: emailtemplate.FieldSubject},
			emailtemplate.FieldBody:              {Type: field.TypeString, Column: emailtemplate.FieldBody},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   frontendtemplate.Table,
			Columns: frontendtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontendtemplate.FieldID,
			},
		},
		Type: "FrontendTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			frontendtemplate.FieldCreatedAt: {Type: field.TypeUint32, Column: frontendtemplate.FieldCreatedAt},
			frontendtemplate.FieldUpdatedAt: {Type: field.TypeUint32, Column: frontendtemplate.FieldUpdatedAt},
			frontendtemplate.FieldDeletedAt: {Type: field.TypeUint32, Column: frontendtemplate.FieldDeletedAt},
			frontendtemplate.FieldAppID:     {Type: field.TypeUUID, Column: frontendtemplate.FieldAppID},
			frontendtemplate.FieldLangID:    {Type: field.TypeUUID, Column: frontendtemplate.FieldLangID},
			frontendtemplate.FieldUsedFor:   {Type: field.TypeString, Column: frontendtemplate.FieldUsedFor},
			frontendtemplate.FieldTitle:     {Type: field.TypeString, Column: frontendtemplate.FieldTitle},
			frontendtemplate.FieldContent:   {Type: field.TypeString, Column: frontendtemplate.FieldContent},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodbenefit.FieldID,
			},
		},
		Type: "GoodBenefit",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodbenefit.FieldCreatedAt:   {Type: field.TypeUint32, Column: goodbenefit.FieldCreatedAt},
			goodbenefit.FieldUpdatedAt:   {Type: field.TypeUint32, Column: goodbenefit.FieldUpdatedAt},
			goodbenefit.FieldDeletedAt:   {Type: field.TypeUint32, Column: goodbenefit.FieldDeletedAt},
			goodbenefit.FieldGoodID:      {Type: field.TypeUUID, Column: goodbenefit.FieldGoodID},
			goodbenefit.FieldGoodName:    {Type: field.TypeString, Column: goodbenefit.FieldGoodName},
			goodbenefit.FieldAmount:      {Type: field.TypeString, Column: goodbenefit.FieldAmount},
			goodbenefit.FieldState:       {Type: field.TypeString, Column: goodbenefit.FieldState},
			goodbenefit.FieldMessage:     {Type: field.TypeString, Column: goodbenefit.FieldMessage},
			goodbenefit.FieldBenefitDate: {Type: field.TypeUint32, Column: goodbenefit.FieldBenefitDate},
			goodbenefit.FieldTxID:        {Type: field.TypeUUID, Column: goodbenefit.FieldTxID},
			goodbenefit.FieldGenerated:   {Type: field.TypeBool, Column: goodbenefit.FieldGenerated},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notif.Table,
			Columns: notif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: notif.FieldID,
			},
		},
		Type: "Notif",
		Fields: map[string]*sqlgraph.FieldSpec{
			notif.FieldCreatedAt:   {Type: field.TypeUint32, Column: notif.FieldCreatedAt},
			notif.FieldUpdatedAt:   {Type: field.TypeUint32, Column: notif.FieldUpdatedAt},
			notif.FieldDeletedAt:   {Type: field.TypeUint32, Column: notif.FieldDeletedAt},
			notif.FieldAppID:       {Type: field.TypeUUID, Column: notif.FieldAppID},
			notif.FieldUserID:      {Type: field.TypeUUID, Column: notif.FieldUserID},
			notif.FieldNotified:    {Type: field.TypeBool, Column: notif.FieldNotified},
			notif.FieldLangID:      {Type: field.TypeUUID, Column: notif.FieldLangID},
			notif.FieldEventID:     {Type: field.TypeUUID, Column: notif.FieldEventID},
			notif.FieldEventType:   {Type: field.TypeString, Column: notif.FieldEventType},
			notif.FieldUseTemplate: {Type: field.TypeBool, Column: notif.FieldUseTemplate},
			notif.FieldTitle:       {Type: field.TypeString, Column: notif.FieldTitle},
			notif.FieldContent:     {Type: field.TypeString, Column: notif.FieldContent},
			notif.FieldChannel:     {Type: field.TypeString, Column: notif.FieldChannel},
			notif.FieldExtra:       {Type: field.TypeString, Column: notif.FieldExtra},
			notif.FieldType:        {Type: field.TypeString, Column: notif.FieldType},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notifchannel.Table,
			Columns: notifchannel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: notifchannel.FieldID,
			},
		},
		Type: "NotifChannel",
		Fields: map[string]*sqlgraph.FieldSpec{
			notifchannel.FieldCreatedAt: {Type: field.TypeUint32, Column: notifchannel.FieldCreatedAt},
			notifchannel.FieldUpdatedAt: {Type: field.TypeUint32, Column: notifchannel.FieldUpdatedAt},
			notifchannel.FieldDeletedAt: {Type: field.TypeUint32, Column: notifchannel.FieldDeletedAt},
			notifchannel.FieldAppID:     {Type: field.TypeUUID, Column: notifchannel.FieldAppID},
			notifchannel.FieldEventType: {Type: field.TypeString, Column: notifchannel.FieldEventType},
			notifchannel.FieldChannel:   {Type: field.TypeString, Column: notifchannel.FieldChannel},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notifuser.Table,
			Columns: notifuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: notifuser.FieldID,
			},
		},
		Type: "NotifUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			notifuser.FieldCreatedAt: {Type: field.TypeUint32, Column: notifuser.FieldCreatedAt},
			notifuser.FieldUpdatedAt: {Type: field.TypeUint32, Column: notifuser.FieldUpdatedAt},
			notifuser.FieldDeletedAt: {Type: field.TypeUint32, Column: notifuser.FieldDeletedAt},
			notifuser.FieldAppID:     {Type: field.TypeUUID, Column: notifuser.FieldAppID},
			notifuser.FieldUserID:    {Type: field.TypeUUID, Column: notifuser.FieldUserID},
			notifuser.FieldEventType: {Type: field.TypeString, Column: notifuser.FieldEventType},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   readannouncement.Table,
			Columns: readannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readannouncement.FieldID,
			},
		},
		Type: "ReadAnnouncement",
		Fields: map[string]*sqlgraph.FieldSpec{
			readannouncement.FieldCreatedAt:      {Type: field.TypeUint32, Column: readannouncement.FieldCreatedAt},
			readannouncement.FieldUpdatedAt:      {Type: field.TypeUint32, Column: readannouncement.FieldUpdatedAt},
			readannouncement.FieldDeletedAt:      {Type: field.TypeUint32, Column: readannouncement.FieldDeletedAt},
			readannouncement.FieldAppID:          {Type: field.TypeUUID, Column: readannouncement.FieldAppID},
			readannouncement.FieldUserID:         {Type: field.TypeUUID, Column: readannouncement.FieldUserID},
			readannouncement.FieldAnnouncementID: {Type: field.TypeUUID, Column: readannouncement.FieldAnnouncementID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   smstemplate.Table,
			Columns: smstemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: smstemplate.FieldID,
			},
		},
		Type: "SMSTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			smstemplate.FieldCreatedAt: {Type: field.TypeUint32, Column: smstemplate.FieldCreatedAt},
			smstemplate.FieldUpdatedAt: {Type: field.TypeUint32, Column: smstemplate.FieldUpdatedAt},
			smstemplate.FieldDeletedAt: {Type: field.TypeUint32, Column: smstemplate.FieldDeletedAt},
			smstemplate.FieldAppID:     {Type: field.TypeUUID, Column: smstemplate.FieldAppID},
			smstemplate.FieldLangID:    {Type: field.TypeUUID, Column: smstemplate.FieldLangID},
			smstemplate.FieldUsedFor:   {Type: field.TypeString, Column: smstemplate.FieldUsedFor},
			smstemplate.FieldSubject:   {Type: field.TypeString, Column: smstemplate.FieldSubject},
			smstemplate.FieldMessage:   {Type: field.TypeString, Column: smstemplate.FieldMessage},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sendannouncement.Table,
			Columns: sendannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: sendannouncement.FieldID,
			},
		},
		Type: "SendAnnouncement",
		Fields: map[string]*sqlgraph.FieldSpec{
			sendannouncement.FieldCreatedAt:      {Type: field.TypeUint32, Column: sendannouncement.FieldCreatedAt},
			sendannouncement.FieldUpdatedAt:      {Type: field.TypeUint32, Column: sendannouncement.FieldUpdatedAt},
			sendannouncement.FieldDeletedAt:      {Type: field.TypeUint32, Column: sendannouncement.FieldDeletedAt},
			sendannouncement.FieldAppID:          {Type: field.TypeUUID, Column: sendannouncement.FieldAppID},
			sendannouncement.FieldUserID:         {Type: field.TypeUUID, Column: sendannouncement.FieldUserID},
			sendannouncement.FieldAnnouncementID: {Type: field.TypeUUID, Column: sendannouncement.FieldAnnouncementID},
			sendannouncement.FieldChannel:        {Type: field.TypeString, Column: sendannouncement.FieldChannel},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userannouncement.Table,
			Columns: userannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userannouncement.FieldID,
			},
		},
		Type: "UserAnnouncement",
		Fields: map[string]*sqlgraph.FieldSpec{
			userannouncement.FieldCreatedAt:      {Type: field.TypeUint32, Column: userannouncement.FieldCreatedAt},
			userannouncement.FieldUpdatedAt:      {Type: field.TypeUint32, Column: userannouncement.FieldUpdatedAt},
			userannouncement.FieldDeletedAt:      {Type: field.TypeUint32, Column: userannouncement.FieldDeletedAt},
			userannouncement.FieldAppID:          {Type: field.TypeUUID, Column: userannouncement.FieldAppID},
			userannouncement.FieldUserID:         {Type: field.TypeUUID, Column: userannouncement.FieldUserID},
			userannouncement.FieldAnnouncementID: {Type: field.TypeUUID, Column: userannouncement.FieldAnnouncementID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AnnouncementQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AnnouncementQuery builder.
func (aq *AnnouncementQuery) Filter() *AnnouncementFilter {
	return &AnnouncementFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AnnouncementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AnnouncementMutation builder.
func (m *AnnouncementMutation) Filter() *AnnouncementFilter {
	return &AnnouncementFilter{config: m.config, predicateAdder: m}
}

// AnnouncementFilter provides a generic filtering capability at runtime for AnnouncementQuery.
type AnnouncementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AnnouncementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AnnouncementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(announcement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AnnouncementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(announcement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AnnouncementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(announcement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AnnouncementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(announcement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AnnouncementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(announcement.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *AnnouncementFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(announcement.FieldLangID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AnnouncementFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(announcement.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *AnnouncementFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(announcement.FieldContent))
}

// WhereChannel applies the entql string predicate on the channel field.
func (f *AnnouncementFilter) WhereChannel(p entql.StringP) {
	f.Where(p.Field(announcement.FieldChannel))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *AnnouncementFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(announcement.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *AnnouncementFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(announcement.FieldEndAt))
}

// WhereType applies the entql string predicate on the type field.
func (f *AnnouncementFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(announcement.FieldType))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContactQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactQuery builder.
func (cq *ContactQuery) Filter() *ContactFilter {
	return &ContactFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactMutation builder.
func (m *ContactMutation) Filter() *ContactFilter {
	return &ContactFilter{config: m.config, predicateAdder: m}
}

// ContactFilter provides a generic filtering capability at runtime for ContactQuery.
type ContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ContactFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(contact.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ContactFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(contact.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ContactFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(contact.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ContactFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(contact.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ContactFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(contact.FieldAppID))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *ContactFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(contact.FieldUsedFor))
}

// WhereSender applies the entql string predicate on the sender field.
func (f *ContactFilter) WhereSender(p entql.StringP) {
	f.Where(p.Field(contact.FieldSender))
}

// WhereAccount applies the entql string predicate on the account field.
func (f *ContactFilter) WhereAccount(p entql.StringP) {
	f.Where(p.Field(contact.FieldAccount))
}

// WhereAccountType applies the entql string predicate on the account_type field.
func (f *ContactFilter) WhereAccountType(p entql.StringP) {
	f.Where(p.Field(contact.FieldAccountType))
}

// addPredicate implements the predicateAdder interface.
func (etq *EmailTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	etq.predicates = append(etq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailTemplateQuery builder.
func (etq *EmailTemplateQuery) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: etq.config, predicateAdder: etq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailTemplateMutation builder.
func (m *EmailTemplateMutation) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: m.config, predicateAdder: m}
}

// EmailTemplateFilter provides a generic filtering capability at runtime for EmailTemplateQuery.
type EmailTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmailTemplateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(emailtemplate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EmailTemplateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(emailtemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EmailTemplateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(emailtemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EmailTemplateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(emailtemplate.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EmailTemplateFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(emailtemplate.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *EmailTemplateFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(emailtemplate.FieldLangID))
}

// WhereDefaultToUsername applies the entql string predicate on the default_to_username field.
func (f *EmailTemplateFilter) WhereDefaultToUsername(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldDefaultToUsername))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *EmailTemplateFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldUsedFor))
}

// WhereSender applies the entql string predicate on the sender field.
func (f *EmailTemplateFilter) WhereSender(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldSender))
}

// WhereReplyTos applies the entql json.RawMessage predicate on the reply_tos field.
func (f *EmailTemplateFilter) WhereReplyTos(p entql.BytesP) {
	f.Where(p.Field(emailtemplate.FieldReplyTos))
}

// WhereCcTos applies the entql json.RawMessage predicate on the cc_tos field.
func (f *EmailTemplateFilter) WhereCcTos(p entql.BytesP) {
	f.Where(p.Field(emailtemplate.FieldCcTos))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *EmailTemplateFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldSubject))
}

// WhereBody applies the entql string predicate on the body field.
func (f *EmailTemplateFilter) WhereBody(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldBody))
}

// addPredicate implements the predicateAdder interface.
func (ftq *FrontendTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	ftq.predicates = append(ftq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FrontendTemplateQuery builder.
func (ftq *FrontendTemplateQuery) Filter() *FrontendTemplateFilter {
	return &FrontendTemplateFilter{config: ftq.config, predicateAdder: ftq}
}

// addPredicate implements the predicateAdder interface.
func (m *FrontendTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FrontendTemplateMutation builder.
func (m *FrontendTemplateMutation) Filter() *FrontendTemplateFilter {
	return &FrontendTemplateFilter{config: m.config, predicateAdder: m}
}

// FrontendTemplateFilter provides a generic filtering capability at runtime for FrontendTemplateQuery.
type FrontendTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FrontendTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FrontendTemplateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(frontendtemplate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *FrontendTemplateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(frontendtemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *FrontendTemplateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(frontendtemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *FrontendTemplateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(frontendtemplate.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *FrontendTemplateFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(frontendtemplate.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *FrontendTemplateFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(frontendtemplate.FieldLangID))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *FrontendTemplateFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(frontendtemplate.FieldUsedFor))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *FrontendTemplateFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(frontendtemplate.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *FrontendTemplateFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(frontendtemplate.FieldContent))
}

// addPredicate implements the predicateAdder interface.
func (gbq *GoodBenefitQuery) addPredicate(pred func(s *sql.Selector)) {
	gbq.predicates = append(gbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodBenefitQuery builder.
func (gbq *GoodBenefitQuery) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{config: gbq.config, predicateAdder: gbq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodBenefitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{config: m.config, predicateAdder: m}
}

// GoodBenefitFilter provides a generic filtering capability at runtime for GoodBenefitQuery.
type GoodBenefitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodBenefitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodBenefitFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodBenefitFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodBenefitFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodBenefitFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodBenefitFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldGoodID))
}

// WhereGoodName applies the entql string predicate on the good_name field.
func (f *GoodBenefitFilter) WhereGoodName(p entql.StringP) {
	f.Where(p.Field(goodbenefit.FieldGoodName))
}

// WhereAmount applies the entql string predicate on the amount field.
func (f *GoodBenefitFilter) WhereAmount(p entql.StringP) {
	f.Where(p.Field(goodbenefit.FieldAmount))
}

// WhereState applies the entql string predicate on the state field.
func (f *GoodBenefitFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(goodbenefit.FieldState))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *GoodBenefitFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(goodbenefit.FieldMessage))
}

// WhereBenefitDate applies the entql uint32 predicate on the benefit_date field.
func (f *GoodBenefitFilter) WhereBenefitDate(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldBenefitDate))
}

// WhereTxID applies the entql [16]byte predicate on the tx_id field.
func (f *GoodBenefitFilter) WhereTxID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldTxID))
}

// WhereGenerated applies the entql bool predicate on the generated field.
func (f *GoodBenefitFilter) WhereGenerated(p entql.BoolP) {
	f.Where(p.Field(goodbenefit.FieldGenerated))
}

// addPredicate implements the predicateAdder interface.
func (nq *NotifQuery) addPredicate(pred func(s *sql.Selector)) {
	nq.predicates = append(nq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotifQuery builder.
func (nq *NotifQuery) Filter() *NotifFilter {
	return &NotifFilter{config: nq.config, predicateAdder: nq}
}

// addPredicate implements the predicateAdder interface.
func (m *NotifMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotifMutation builder.
func (m *NotifMutation) Filter() *NotifFilter {
	return &NotifFilter{config: m.config, predicateAdder: m}
}

// NotifFilter provides a generic filtering capability at runtime for NotifQuery.
type NotifFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotifFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *NotifFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(notif.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *NotifFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(notif.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *NotifFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(notif.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *NotifFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(notif.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *NotifFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(notif.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *NotifFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(notif.FieldUserID))
}

// WhereNotified applies the entql bool predicate on the notified field.
func (f *NotifFilter) WhereNotified(p entql.BoolP) {
	f.Where(p.Field(notif.FieldNotified))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *NotifFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(notif.FieldLangID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *NotifFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(notif.FieldEventID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *NotifFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(notif.FieldEventType))
}

// WhereUseTemplate applies the entql bool predicate on the use_template field.
func (f *NotifFilter) WhereUseTemplate(p entql.BoolP) {
	f.Where(p.Field(notif.FieldUseTemplate))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *NotifFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(notif.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *NotifFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(notif.FieldContent))
}

// WhereChannel applies the entql string predicate on the channel field.
func (f *NotifFilter) WhereChannel(p entql.StringP) {
	f.Where(p.Field(notif.FieldChannel))
}

// WhereExtra applies the entql string predicate on the extra field.
func (f *NotifFilter) WhereExtra(p entql.StringP) {
	f.Where(p.Field(notif.FieldExtra))
}

// WhereType applies the entql string predicate on the type field.
func (f *NotifFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(notif.FieldType))
}

// addPredicate implements the predicateAdder interface.
func (ncq *NotifChannelQuery) addPredicate(pred func(s *sql.Selector)) {
	ncq.predicates = append(ncq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotifChannelQuery builder.
func (ncq *NotifChannelQuery) Filter() *NotifChannelFilter {
	return &NotifChannelFilter{config: ncq.config, predicateAdder: ncq}
}

// addPredicate implements the predicateAdder interface.
func (m *NotifChannelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotifChannelMutation builder.
func (m *NotifChannelMutation) Filter() *NotifChannelFilter {
	return &NotifChannelFilter{config: m.config, predicateAdder: m}
}

// NotifChannelFilter provides a generic filtering capability at runtime for NotifChannelQuery.
type NotifChannelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotifChannelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *NotifChannelFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(notifchannel.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *NotifChannelFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(notifchannel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *NotifChannelFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(notifchannel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *NotifChannelFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(notifchannel.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *NotifChannelFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(notifchannel.FieldAppID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *NotifChannelFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(notifchannel.FieldEventType))
}

// WhereChannel applies the entql string predicate on the channel field.
func (f *NotifChannelFilter) WhereChannel(p entql.StringP) {
	f.Where(p.Field(notifchannel.FieldChannel))
}

// addPredicate implements the predicateAdder interface.
func (nuq *NotifUserQuery) addPredicate(pred func(s *sql.Selector)) {
	nuq.predicates = append(nuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotifUserQuery builder.
func (nuq *NotifUserQuery) Filter() *NotifUserFilter {
	return &NotifUserFilter{config: nuq.config, predicateAdder: nuq}
}

// addPredicate implements the predicateAdder interface.
func (m *NotifUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotifUserMutation builder.
func (m *NotifUserMutation) Filter() *NotifUserFilter {
	return &NotifUserFilter{config: m.config, predicateAdder: m}
}

// NotifUserFilter provides a generic filtering capability at runtime for NotifUserQuery.
type NotifUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotifUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *NotifUserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(notifuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *NotifUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(notifuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *NotifUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(notifuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *NotifUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(notifuser.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *NotifUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(notifuser.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *NotifUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(notifuser.FieldUserID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *NotifUserFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(notifuser.FieldEventType))
}

// addPredicate implements the predicateAdder interface.
func (raq *ReadAnnouncementQuery) addPredicate(pred func(s *sql.Selector)) {
	raq.predicates = append(raq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReadAnnouncementQuery builder.
func (raq *ReadAnnouncementQuery) Filter() *ReadAnnouncementFilter {
	return &ReadAnnouncementFilter{config: raq.config, predicateAdder: raq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReadAnnouncementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReadAnnouncementMutation builder.
func (m *ReadAnnouncementMutation) Filter() *ReadAnnouncementFilter {
	return &ReadAnnouncementFilter{config: m.config, predicateAdder: m}
}

// ReadAnnouncementFilter provides a generic filtering capability at runtime for ReadAnnouncementQuery.
type ReadAnnouncementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReadAnnouncementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ReadAnnouncementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(readannouncement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ReadAnnouncementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(readannouncement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ReadAnnouncementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(readannouncement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ReadAnnouncementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(readannouncement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ReadAnnouncementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(readannouncement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ReadAnnouncementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(readannouncement.FieldUserID))
}

// WhereAnnouncementID applies the entql [16]byte predicate on the announcement_id field.
func (f *ReadAnnouncementFilter) WhereAnnouncementID(p entql.ValueP) {
	f.Where(p.Field(readannouncement.FieldAnnouncementID))
}

// addPredicate implements the predicateAdder interface.
func (stq *SMSTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	stq.predicates = append(stq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SMSTemplateQuery builder.
func (stq *SMSTemplateQuery) Filter() *SMSTemplateFilter {
	return &SMSTemplateFilter{config: stq.config, predicateAdder: stq}
}

// addPredicate implements the predicateAdder interface.
func (m *SMSTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SMSTemplateMutation builder.
func (m *SMSTemplateMutation) Filter() *SMSTemplateFilter {
	return &SMSTemplateFilter{config: m.config, predicateAdder: m}
}

// SMSTemplateFilter provides a generic filtering capability at runtime for SMSTemplateQuery.
type SMSTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SMSTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SMSTemplateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(smstemplate.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *SMSTemplateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(smstemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *SMSTemplateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(smstemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *SMSTemplateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(smstemplate.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *SMSTemplateFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(smstemplate.FieldAppID))
}

// WhereLangID applies the entql [16]byte predicate on the lang_id field.
func (f *SMSTemplateFilter) WhereLangID(p entql.ValueP) {
	f.Where(p.Field(smstemplate.FieldLangID))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *SMSTemplateFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldUsedFor))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *SMSTemplateFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldSubject))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *SMSTemplateFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (saq *SendAnnouncementQuery) addPredicate(pred func(s *sql.Selector)) {
	saq.predicates = append(saq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SendAnnouncementQuery builder.
func (saq *SendAnnouncementQuery) Filter() *SendAnnouncementFilter {
	return &SendAnnouncementFilter{config: saq.config, predicateAdder: saq}
}

// addPredicate implements the predicateAdder interface.
func (m *SendAnnouncementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SendAnnouncementMutation builder.
func (m *SendAnnouncementMutation) Filter() *SendAnnouncementFilter {
	return &SendAnnouncementFilter{config: m.config, predicateAdder: m}
}

// SendAnnouncementFilter provides a generic filtering capability at runtime for SendAnnouncementQuery.
type SendAnnouncementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SendAnnouncementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SendAnnouncementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(sendannouncement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *SendAnnouncementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(sendannouncement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *SendAnnouncementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(sendannouncement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *SendAnnouncementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(sendannouncement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *SendAnnouncementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(sendannouncement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *SendAnnouncementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(sendannouncement.FieldUserID))
}

// WhereAnnouncementID applies the entql [16]byte predicate on the announcement_id field.
func (f *SendAnnouncementFilter) WhereAnnouncementID(p entql.ValueP) {
	f.Where(p.Field(sendannouncement.FieldAnnouncementID))
}

// WhereChannel applies the entql string predicate on the channel field.
func (f *SendAnnouncementFilter) WhereChannel(p entql.StringP) {
	f.Where(p.Field(sendannouncement.FieldChannel))
}

// addPredicate implements the predicateAdder interface.
func (uaq *UserAnnouncementQuery) addPredicate(pred func(s *sql.Selector)) {
	uaq.predicates = append(uaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserAnnouncementQuery builder.
func (uaq *UserAnnouncementQuery) Filter() *UserAnnouncementFilter {
	return &UserAnnouncementFilter{config: uaq.config, predicateAdder: uaq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserAnnouncementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserAnnouncementMutation builder.
func (m *UserAnnouncementMutation) Filter() *UserAnnouncementFilter {
	return &UserAnnouncementFilter{config: m.config, predicateAdder: m}
}

// UserAnnouncementFilter provides a generic filtering capability at runtime for UserAnnouncementQuery.
type UserAnnouncementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserAnnouncementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserAnnouncementFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(userannouncement.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *UserAnnouncementFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(userannouncement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *UserAnnouncementFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(userannouncement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *UserAnnouncementFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(userannouncement.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserAnnouncementFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(userannouncement.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserAnnouncementFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userannouncement.FieldUserID))
}

// WhereAnnouncementID applies the entql [16]byte predicate on the announcement_id field.
func (f *UserAnnouncementFilter) WhereAnnouncementID(p entql.ValueP) {
	f.Where(p.Field(userannouncement.FieldAnnouncementID))
}
