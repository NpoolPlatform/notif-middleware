// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifuser"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// NotifUserUpdate is the builder for updating NotifUser entities.
type NotifUserUpdate struct {
	config
	hooks     []Hook
	mutation  *NotifUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotifUserUpdate builder.
func (nuu *NotifUserUpdate) Where(ps ...predicate.NotifUser) *NotifUserUpdate {
	nuu.mutation.Where(ps...)
	return nuu
}

// SetCreatedAt sets the "created_at" field.
func (nuu *NotifUserUpdate) SetCreatedAt(u uint32) *NotifUserUpdate {
	nuu.mutation.ResetCreatedAt()
	nuu.mutation.SetCreatedAt(u)
	return nuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableCreatedAt(u *uint32) *NotifUserUpdate {
	if u != nil {
		nuu.SetCreatedAt(*u)
	}
	return nuu
}

// AddCreatedAt adds u to the "created_at" field.
func (nuu *NotifUserUpdate) AddCreatedAt(u int32) *NotifUserUpdate {
	nuu.mutation.AddCreatedAt(u)
	return nuu
}

// SetUpdatedAt sets the "updated_at" field.
func (nuu *NotifUserUpdate) SetUpdatedAt(u uint32) *NotifUserUpdate {
	nuu.mutation.ResetUpdatedAt()
	nuu.mutation.SetUpdatedAt(u)
	return nuu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (nuu *NotifUserUpdate) AddUpdatedAt(u int32) *NotifUserUpdate {
	nuu.mutation.AddUpdatedAt(u)
	return nuu
}

// SetDeletedAt sets the "deleted_at" field.
func (nuu *NotifUserUpdate) SetDeletedAt(u uint32) *NotifUserUpdate {
	nuu.mutation.ResetDeletedAt()
	nuu.mutation.SetDeletedAt(u)
	return nuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableDeletedAt(u *uint32) *NotifUserUpdate {
	if u != nil {
		nuu.SetDeletedAt(*u)
	}
	return nuu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (nuu *NotifUserUpdate) AddDeletedAt(u int32) *NotifUserUpdate {
	nuu.mutation.AddDeletedAt(u)
	return nuu
}

// SetEntID sets the "ent_id" field.
func (nuu *NotifUserUpdate) SetEntID(u uuid.UUID) *NotifUserUpdate {
	nuu.mutation.SetEntID(u)
	return nuu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableEntID(u *uuid.UUID) *NotifUserUpdate {
	if u != nil {
		nuu.SetEntID(*u)
	}
	return nuu
}

// SetAppID sets the "app_id" field.
func (nuu *NotifUserUpdate) SetAppID(u uuid.UUID) *NotifUserUpdate {
	nuu.mutation.SetAppID(u)
	return nuu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableAppID(u *uuid.UUID) *NotifUserUpdate {
	if u != nil {
		nuu.SetAppID(*u)
	}
	return nuu
}

// ClearAppID clears the value of the "app_id" field.
func (nuu *NotifUserUpdate) ClearAppID() *NotifUserUpdate {
	nuu.mutation.ClearAppID()
	return nuu
}

// SetUserID sets the "user_id" field.
func (nuu *NotifUserUpdate) SetUserID(u uuid.UUID) *NotifUserUpdate {
	nuu.mutation.SetUserID(u)
	return nuu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableUserID(u *uuid.UUID) *NotifUserUpdate {
	if u != nil {
		nuu.SetUserID(*u)
	}
	return nuu
}

// ClearUserID clears the value of the "user_id" field.
func (nuu *NotifUserUpdate) ClearUserID() *NotifUserUpdate {
	nuu.mutation.ClearUserID()
	return nuu
}

// SetEventType sets the "event_type" field.
func (nuu *NotifUserUpdate) SetEventType(s string) *NotifUserUpdate {
	nuu.mutation.SetEventType(s)
	return nuu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (nuu *NotifUserUpdate) SetNillableEventType(s *string) *NotifUserUpdate {
	if s != nil {
		nuu.SetEventType(*s)
	}
	return nuu
}

// ClearEventType clears the value of the "event_type" field.
func (nuu *NotifUserUpdate) ClearEventType() *NotifUserUpdate {
	nuu.mutation.ClearEventType()
	return nuu
}

// Mutation returns the NotifUserMutation object of the builder.
func (nuu *NotifUserUpdate) Mutation() *NotifUserMutation {
	return nuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nuu *NotifUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := nuu.defaults(); err != nil {
		return 0, err
	}
	if len(nuu.hooks) == 0 {
		affected, err = nuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuu.mutation = mutation
			affected, err = nuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nuu.hooks) - 1; i >= 0; i-- {
			if nuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuu *NotifUserUpdate) SaveX(ctx context.Context) int {
	affected, err := nuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nuu *NotifUserUpdate) Exec(ctx context.Context) error {
	_, err := nuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuu *NotifUserUpdate) ExecX(ctx context.Context) {
	if err := nuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuu *NotifUserUpdate) defaults() error {
	if _, ok := nuu.mutation.UpdatedAt(); !ok {
		if notifuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifuser.UpdateDefaultUpdatedAt()
		nuu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuu *NotifUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifUserUpdate {
	nuu.modifiers = append(nuu.modifiers, modifiers...)
	return nuu
}

func (nuu *NotifUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notifuser.Table,
			Columns: notifuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notifuser.FieldID,
			},
		},
	}
	if ps := nuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldCreatedAt,
		})
	}
	if value, ok := nuu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldCreatedAt,
		})
	}
	if value, ok := nuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldUpdatedAt,
		})
	}
	if value, ok := nuu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldUpdatedAt,
		})
	}
	if value, ok := nuu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldDeletedAt,
		})
	}
	if value, ok := nuu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldDeletedAt,
		})
	}
	if value, ok := nuu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldEntID,
		})
	}
	if value, ok := nuu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldAppID,
		})
	}
	if nuu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: notifuser.FieldAppID,
		})
	}
	if value, ok := nuu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldUserID,
		})
	}
	if nuu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: notifuser.FieldUserID,
		})
	}
	if value, ok := nuu.mutation.EventType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notifuser.FieldEventType,
		})
	}
	if nuu.mutation.EventTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: notifuser.FieldEventType,
		})
	}
	_spec.Modifiers = nuu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, nuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NotifUserUpdateOne is the builder for updating a single NotifUser entity.
type NotifUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotifUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (nuuo *NotifUserUpdateOne) SetCreatedAt(u uint32) *NotifUserUpdateOne {
	nuuo.mutation.ResetCreatedAt()
	nuuo.mutation.SetCreatedAt(u)
	return nuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableCreatedAt(u *uint32) *NotifUserUpdateOne {
	if u != nil {
		nuuo.SetCreatedAt(*u)
	}
	return nuuo
}

// AddCreatedAt adds u to the "created_at" field.
func (nuuo *NotifUserUpdateOne) AddCreatedAt(u int32) *NotifUserUpdateOne {
	nuuo.mutation.AddCreatedAt(u)
	return nuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuuo *NotifUserUpdateOne) SetUpdatedAt(u uint32) *NotifUserUpdateOne {
	nuuo.mutation.ResetUpdatedAt()
	nuuo.mutation.SetUpdatedAt(u)
	return nuuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (nuuo *NotifUserUpdateOne) AddUpdatedAt(u int32) *NotifUserUpdateOne {
	nuuo.mutation.AddUpdatedAt(u)
	return nuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (nuuo *NotifUserUpdateOne) SetDeletedAt(u uint32) *NotifUserUpdateOne {
	nuuo.mutation.ResetDeletedAt()
	nuuo.mutation.SetDeletedAt(u)
	return nuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableDeletedAt(u *uint32) *NotifUserUpdateOne {
	if u != nil {
		nuuo.SetDeletedAt(*u)
	}
	return nuuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (nuuo *NotifUserUpdateOne) AddDeletedAt(u int32) *NotifUserUpdateOne {
	nuuo.mutation.AddDeletedAt(u)
	return nuuo
}

// SetEntID sets the "ent_id" field.
func (nuuo *NotifUserUpdateOne) SetEntID(u uuid.UUID) *NotifUserUpdateOne {
	nuuo.mutation.SetEntID(u)
	return nuuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableEntID(u *uuid.UUID) *NotifUserUpdateOne {
	if u != nil {
		nuuo.SetEntID(*u)
	}
	return nuuo
}

// SetAppID sets the "app_id" field.
func (nuuo *NotifUserUpdateOne) SetAppID(u uuid.UUID) *NotifUserUpdateOne {
	nuuo.mutation.SetAppID(u)
	return nuuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableAppID(u *uuid.UUID) *NotifUserUpdateOne {
	if u != nil {
		nuuo.SetAppID(*u)
	}
	return nuuo
}

// ClearAppID clears the value of the "app_id" field.
func (nuuo *NotifUserUpdateOne) ClearAppID() *NotifUserUpdateOne {
	nuuo.mutation.ClearAppID()
	return nuuo
}

// SetUserID sets the "user_id" field.
func (nuuo *NotifUserUpdateOne) SetUserID(u uuid.UUID) *NotifUserUpdateOne {
	nuuo.mutation.SetUserID(u)
	return nuuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableUserID(u *uuid.UUID) *NotifUserUpdateOne {
	if u != nil {
		nuuo.SetUserID(*u)
	}
	return nuuo
}

// ClearUserID clears the value of the "user_id" field.
func (nuuo *NotifUserUpdateOne) ClearUserID() *NotifUserUpdateOne {
	nuuo.mutation.ClearUserID()
	return nuuo
}

// SetEventType sets the "event_type" field.
func (nuuo *NotifUserUpdateOne) SetEventType(s string) *NotifUserUpdateOne {
	nuuo.mutation.SetEventType(s)
	return nuuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (nuuo *NotifUserUpdateOne) SetNillableEventType(s *string) *NotifUserUpdateOne {
	if s != nil {
		nuuo.SetEventType(*s)
	}
	return nuuo
}

// ClearEventType clears the value of the "event_type" field.
func (nuuo *NotifUserUpdateOne) ClearEventType() *NotifUserUpdateOne {
	nuuo.mutation.ClearEventType()
	return nuuo
}

// Mutation returns the NotifUserMutation object of the builder.
func (nuuo *NotifUserUpdateOne) Mutation() *NotifUserMutation {
	return nuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuuo *NotifUserUpdateOne) Select(field string, fields ...string) *NotifUserUpdateOne {
	nuuo.fields = append([]string{field}, fields...)
	return nuuo
}

// Save executes the query and returns the updated NotifUser entity.
func (nuuo *NotifUserUpdateOne) Save(ctx context.Context) (*NotifUser, error) {
	var (
		err  error
		node *NotifUser
	)
	if err := nuuo.defaults(); err != nil {
		return nil, err
	}
	if len(nuuo.hooks) == 0 {
		node, err = nuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuuo.mutation = mutation
			node, err = nuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuuo.hooks) - 1; i >= 0; i-- {
			if nuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NotifUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuuo *NotifUserUpdateOne) SaveX(ctx context.Context) *NotifUser {
	node, err := nuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuuo *NotifUserUpdateOne) Exec(ctx context.Context) error {
	_, err := nuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuuo *NotifUserUpdateOne) ExecX(ctx context.Context) {
	if err := nuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuuo *NotifUserUpdateOne) defaults() error {
	if _, ok := nuuo.mutation.UpdatedAt(); !ok {
		if notifuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifuser.UpdateDefaultUpdatedAt()
		nuuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuuo *NotifUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifUserUpdateOne {
	nuuo.modifiers = append(nuuo.modifiers, modifiers...)
	return nuuo
}

func (nuuo *NotifUserUpdateOne) sqlSave(ctx context.Context) (_node *NotifUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notifuser.Table,
			Columns: notifuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notifuser.FieldID,
			},
		},
	}
	id, ok := nuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifuser.FieldID)
		for _, f := range fields {
			if !notifuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldCreatedAt,
		})
	}
	if value, ok := nuuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldCreatedAt,
		})
	}
	if value, ok := nuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldUpdatedAt,
		})
	}
	if value, ok := nuuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldUpdatedAt,
		})
	}
	if value, ok := nuuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldDeletedAt,
		})
	}
	if value, ok := nuuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldDeletedAt,
		})
	}
	if value, ok := nuuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldEntID,
		})
	}
	if value, ok := nuuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldAppID,
		})
	}
	if nuuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: notifuser.FieldAppID,
		})
	}
	if value, ok := nuuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldUserID,
		})
	}
	if nuuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: notifuser.FieldUserID,
		})
	}
	if value, ok := nuuo.mutation.EventType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notifuser.FieldEventType,
		})
	}
	if nuuo.mutation.EventTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: notifuser.FieldEventType,
		})
	}
	_spec.Modifiers = nuuo.modifiers
	_node = &NotifUser{config: nuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
