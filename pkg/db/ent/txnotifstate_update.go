// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/txnotifstate"
	"github.com/google/uuid"
)

// TxNotifStateUpdate is the builder for updating TxNotifState entities.
type TxNotifStateUpdate struct {
	config
	hooks     []Hook
	mutation  *TxNotifStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TxNotifStateUpdate builder.
func (tnsu *TxNotifStateUpdate) Where(ps ...predicate.TxNotifState) *TxNotifStateUpdate {
	tnsu.mutation.Where(ps...)
	return tnsu
}

// SetCreatedAt sets the "created_at" field.
func (tnsu *TxNotifStateUpdate) SetCreatedAt(u uint32) *TxNotifStateUpdate {
	tnsu.mutation.ResetCreatedAt()
	tnsu.mutation.SetCreatedAt(u)
	return tnsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnsu *TxNotifStateUpdate) SetNillableCreatedAt(u *uint32) *TxNotifStateUpdate {
	if u != nil {
		tnsu.SetCreatedAt(*u)
	}
	return tnsu
}

// AddCreatedAt adds u to the "created_at" field.
func (tnsu *TxNotifStateUpdate) AddCreatedAt(u int32) *TxNotifStateUpdate {
	tnsu.mutation.AddCreatedAt(u)
	return tnsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tnsu *TxNotifStateUpdate) SetUpdatedAt(u uint32) *TxNotifStateUpdate {
	tnsu.mutation.ResetUpdatedAt()
	tnsu.mutation.SetUpdatedAt(u)
	return tnsu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tnsu *TxNotifStateUpdate) AddUpdatedAt(u int32) *TxNotifStateUpdate {
	tnsu.mutation.AddUpdatedAt(u)
	return tnsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tnsu *TxNotifStateUpdate) SetDeletedAt(u uint32) *TxNotifStateUpdate {
	tnsu.mutation.ResetDeletedAt()
	tnsu.mutation.SetDeletedAt(u)
	return tnsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnsu *TxNotifStateUpdate) SetNillableDeletedAt(u *uint32) *TxNotifStateUpdate {
	if u != nil {
		tnsu.SetDeletedAt(*u)
	}
	return tnsu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tnsu *TxNotifStateUpdate) AddDeletedAt(u int32) *TxNotifStateUpdate {
	tnsu.mutation.AddDeletedAt(u)
	return tnsu
}

// SetTxID sets the "tx_id" field.
func (tnsu *TxNotifStateUpdate) SetTxID(u uuid.UUID) *TxNotifStateUpdate {
	tnsu.mutation.SetTxID(u)
	return tnsu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (tnsu *TxNotifStateUpdate) SetNillableTxID(u *uuid.UUID) *TxNotifStateUpdate {
	if u != nil {
		tnsu.SetTxID(*u)
	}
	return tnsu
}

// ClearTxID clears the value of the "tx_id" field.
func (tnsu *TxNotifStateUpdate) ClearTxID() *TxNotifStateUpdate {
	tnsu.mutation.ClearTxID()
	return tnsu
}

// SetNotifState sets the "notif_state" field.
func (tnsu *TxNotifStateUpdate) SetNotifState(s string) *TxNotifStateUpdate {
	tnsu.mutation.SetNotifState(s)
	return tnsu
}

// SetNillableNotifState sets the "notif_state" field if the given value is not nil.
func (tnsu *TxNotifStateUpdate) SetNillableNotifState(s *string) *TxNotifStateUpdate {
	if s != nil {
		tnsu.SetNotifState(*s)
	}
	return tnsu
}

// ClearNotifState clears the value of the "notif_state" field.
func (tnsu *TxNotifStateUpdate) ClearNotifState() *TxNotifStateUpdate {
	tnsu.mutation.ClearNotifState()
	return tnsu
}

// SetTxType sets the "tx_type" field.
func (tnsu *TxNotifStateUpdate) SetTxType(s string) *TxNotifStateUpdate {
	tnsu.mutation.SetTxType(s)
	return tnsu
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (tnsu *TxNotifStateUpdate) SetNillableTxType(s *string) *TxNotifStateUpdate {
	if s != nil {
		tnsu.SetTxType(*s)
	}
	return tnsu
}

// ClearTxType clears the value of the "tx_type" field.
func (tnsu *TxNotifStateUpdate) ClearTxType() *TxNotifStateUpdate {
	tnsu.mutation.ClearTxType()
	return tnsu
}

// Mutation returns the TxNotifStateMutation object of the builder.
func (tnsu *TxNotifStateUpdate) Mutation() *TxNotifStateMutation {
	return tnsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tnsu *TxNotifStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tnsu.defaults(); err != nil {
		return 0, err
	}
	if len(tnsu.hooks) == 0 {
		affected, err = tnsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNotifStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tnsu.mutation = mutation
			affected, err = tnsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tnsu.hooks) - 1; i >= 0; i-- {
			if tnsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tnsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tnsu *TxNotifStateUpdate) SaveX(ctx context.Context) int {
	affected, err := tnsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tnsu *TxNotifStateUpdate) Exec(ctx context.Context) error {
	_, err := tnsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnsu *TxNotifStateUpdate) ExecX(ctx context.Context) {
	if err := tnsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnsu *TxNotifStateUpdate) defaults() error {
	if _, ok := tnsu.mutation.UpdatedAt(); !ok {
		if txnotifstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnotifstate.UpdateDefaultUpdatedAt()
		tnsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnsu *TxNotifStateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TxNotifStateUpdate {
	tnsu.modifiers = append(tnsu.modifiers, modifiers...)
	return tnsu
}

func (tnsu *TxNotifStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txnotifstate.Table,
			Columns: txnotifstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: txnotifstate.FieldID,
			},
		},
	}
	if ps := tnsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldCreatedAt,
		})
	}
	if value, ok := tnsu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldCreatedAt,
		})
	}
	if value, ok := tnsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldUpdatedAt,
		})
	}
	if value, ok := tnsu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldUpdatedAt,
		})
	}
	if value, ok := tnsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldDeletedAt,
		})
	}
	if value, ok := tnsu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldDeletedAt,
		})
	}
	if value, ok := tnsu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: txnotifstate.FieldTxID,
		})
	}
	if tnsu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: txnotifstate.FieldTxID,
		})
	}
	if value, ok := tnsu.mutation.NotifState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldNotifState,
		})
	}
	if tnsu.mutation.NotifStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txnotifstate.FieldNotifState,
		})
	}
	if value, ok := tnsu.mutation.TxType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldTxType,
		})
	}
	if tnsu.mutation.TxTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txnotifstate.FieldTxType,
		})
	}
	_spec.Modifiers = tnsu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tnsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txnotifstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TxNotifStateUpdateOne is the builder for updating a single TxNotifState entity.
type TxNotifStateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TxNotifStateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tnsuo *TxNotifStateUpdateOne) SetCreatedAt(u uint32) *TxNotifStateUpdateOne {
	tnsuo.mutation.ResetCreatedAt()
	tnsuo.mutation.SetCreatedAt(u)
	return tnsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnsuo *TxNotifStateUpdateOne) SetNillableCreatedAt(u *uint32) *TxNotifStateUpdateOne {
	if u != nil {
		tnsuo.SetCreatedAt(*u)
	}
	return tnsuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tnsuo *TxNotifStateUpdateOne) AddCreatedAt(u int32) *TxNotifStateUpdateOne {
	tnsuo.mutation.AddCreatedAt(u)
	return tnsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tnsuo *TxNotifStateUpdateOne) SetUpdatedAt(u uint32) *TxNotifStateUpdateOne {
	tnsuo.mutation.ResetUpdatedAt()
	tnsuo.mutation.SetUpdatedAt(u)
	return tnsuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tnsuo *TxNotifStateUpdateOne) AddUpdatedAt(u int32) *TxNotifStateUpdateOne {
	tnsuo.mutation.AddUpdatedAt(u)
	return tnsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tnsuo *TxNotifStateUpdateOne) SetDeletedAt(u uint32) *TxNotifStateUpdateOne {
	tnsuo.mutation.ResetDeletedAt()
	tnsuo.mutation.SetDeletedAt(u)
	return tnsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnsuo *TxNotifStateUpdateOne) SetNillableDeletedAt(u *uint32) *TxNotifStateUpdateOne {
	if u != nil {
		tnsuo.SetDeletedAt(*u)
	}
	return tnsuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tnsuo *TxNotifStateUpdateOne) AddDeletedAt(u int32) *TxNotifStateUpdateOne {
	tnsuo.mutation.AddDeletedAt(u)
	return tnsuo
}

// SetTxID sets the "tx_id" field.
func (tnsuo *TxNotifStateUpdateOne) SetTxID(u uuid.UUID) *TxNotifStateUpdateOne {
	tnsuo.mutation.SetTxID(u)
	return tnsuo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (tnsuo *TxNotifStateUpdateOne) SetNillableTxID(u *uuid.UUID) *TxNotifStateUpdateOne {
	if u != nil {
		tnsuo.SetTxID(*u)
	}
	return tnsuo
}

// ClearTxID clears the value of the "tx_id" field.
func (tnsuo *TxNotifStateUpdateOne) ClearTxID() *TxNotifStateUpdateOne {
	tnsuo.mutation.ClearTxID()
	return tnsuo
}

// SetNotifState sets the "notif_state" field.
func (tnsuo *TxNotifStateUpdateOne) SetNotifState(s string) *TxNotifStateUpdateOne {
	tnsuo.mutation.SetNotifState(s)
	return tnsuo
}

// SetNillableNotifState sets the "notif_state" field if the given value is not nil.
func (tnsuo *TxNotifStateUpdateOne) SetNillableNotifState(s *string) *TxNotifStateUpdateOne {
	if s != nil {
		tnsuo.SetNotifState(*s)
	}
	return tnsuo
}

// ClearNotifState clears the value of the "notif_state" field.
func (tnsuo *TxNotifStateUpdateOne) ClearNotifState() *TxNotifStateUpdateOne {
	tnsuo.mutation.ClearNotifState()
	return tnsuo
}

// SetTxType sets the "tx_type" field.
func (tnsuo *TxNotifStateUpdateOne) SetTxType(s string) *TxNotifStateUpdateOne {
	tnsuo.mutation.SetTxType(s)
	return tnsuo
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (tnsuo *TxNotifStateUpdateOne) SetNillableTxType(s *string) *TxNotifStateUpdateOne {
	if s != nil {
		tnsuo.SetTxType(*s)
	}
	return tnsuo
}

// ClearTxType clears the value of the "tx_type" field.
func (tnsuo *TxNotifStateUpdateOne) ClearTxType() *TxNotifStateUpdateOne {
	tnsuo.mutation.ClearTxType()
	return tnsuo
}

// Mutation returns the TxNotifStateMutation object of the builder.
func (tnsuo *TxNotifStateUpdateOne) Mutation() *TxNotifStateMutation {
	return tnsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tnsuo *TxNotifStateUpdateOne) Select(field string, fields ...string) *TxNotifStateUpdateOne {
	tnsuo.fields = append([]string{field}, fields...)
	return tnsuo
}

// Save executes the query and returns the updated TxNotifState entity.
func (tnsuo *TxNotifStateUpdateOne) Save(ctx context.Context) (*TxNotifState, error) {
	var (
		err  error
		node *TxNotifState
	)
	if err := tnsuo.defaults(); err != nil {
		return nil, err
	}
	if len(tnsuo.hooks) == 0 {
		node, err = tnsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNotifStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tnsuo.mutation = mutation
			node, err = tnsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tnsuo.hooks) - 1; i >= 0; i-- {
			if tnsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tnsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TxNotifState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TxNotifStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tnsuo *TxNotifStateUpdateOne) SaveX(ctx context.Context) *TxNotifState {
	node, err := tnsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tnsuo *TxNotifStateUpdateOne) Exec(ctx context.Context) error {
	_, err := tnsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnsuo *TxNotifStateUpdateOne) ExecX(ctx context.Context) {
	if err := tnsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnsuo *TxNotifStateUpdateOne) defaults() error {
	if _, ok := tnsuo.mutation.UpdatedAt(); !ok {
		if txnotifstate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnotifstate.UpdateDefaultUpdatedAt()
		tnsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnsuo *TxNotifStateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TxNotifStateUpdateOne {
	tnsuo.modifiers = append(tnsuo.modifiers, modifiers...)
	return tnsuo
}

func (tnsuo *TxNotifStateUpdateOne) sqlSave(ctx context.Context) (_node *TxNotifState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txnotifstate.Table,
			Columns: txnotifstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: txnotifstate.FieldID,
			},
		},
	}
	id, ok := tnsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TxNotifState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tnsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, txnotifstate.FieldID)
		for _, f := range fields {
			if !txnotifstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != txnotifstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tnsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldCreatedAt,
		})
	}
	if value, ok := tnsuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldCreatedAt,
		})
	}
	if value, ok := tnsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldUpdatedAt,
		})
	}
	if value, ok := tnsuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldUpdatedAt,
		})
	}
	if value, ok := tnsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldDeletedAt,
		})
	}
	if value, ok := tnsuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldDeletedAt,
		})
	}
	if value, ok := tnsuo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: txnotifstate.FieldTxID,
		})
	}
	if tnsuo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: txnotifstate.FieldTxID,
		})
	}
	if value, ok := tnsuo.mutation.NotifState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldNotifState,
		})
	}
	if tnsuo.mutation.NotifStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txnotifstate.FieldNotifState,
		})
	}
	if value, ok := tnsuo.mutation.TxType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldTxType,
		})
	}
	if tnsuo.mutation.TxTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txnotifstate.FieldTxType,
		})
	}
	_spec.Modifiers = tnsuo.modifiers
	_node = &TxNotifState{config: tnsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tnsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txnotifstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
