// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifuser"
	"github.com/google/uuid"
)

// NotifUserCreate is the builder for creating a NotifUser entity.
type NotifUserCreate struct {
	config
	mutation *NotifUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (nuc *NotifUserCreate) SetCreatedAt(u uint32) *NotifUserCreate {
	nuc.mutation.SetCreatedAt(u)
	return nuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableCreatedAt(u *uint32) *NotifUserCreate {
	if u != nil {
		nuc.SetCreatedAt(*u)
	}
	return nuc
}

// SetUpdatedAt sets the "updated_at" field.
func (nuc *NotifUserCreate) SetUpdatedAt(u uint32) *NotifUserCreate {
	nuc.mutation.SetUpdatedAt(u)
	return nuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableUpdatedAt(u *uint32) *NotifUserCreate {
	if u != nil {
		nuc.SetUpdatedAt(*u)
	}
	return nuc
}

// SetDeletedAt sets the "deleted_at" field.
func (nuc *NotifUserCreate) SetDeletedAt(u uint32) *NotifUserCreate {
	nuc.mutation.SetDeletedAt(u)
	return nuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableDeletedAt(u *uint32) *NotifUserCreate {
	if u != nil {
		nuc.SetDeletedAt(*u)
	}
	return nuc
}

// SetEntID sets the "ent_id" field.
func (nuc *NotifUserCreate) SetEntID(u uuid.UUID) *NotifUserCreate {
	nuc.mutation.SetEntID(u)
	return nuc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableEntID(u *uuid.UUID) *NotifUserCreate {
	if u != nil {
		nuc.SetEntID(*u)
	}
	return nuc
}

// SetAppID sets the "app_id" field.
func (nuc *NotifUserCreate) SetAppID(u uuid.UUID) *NotifUserCreate {
	nuc.mutation.SetAppID(u)
	return nuc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableAppID(u *uuid.UUID) *NotifUserCreate {
	if u != nil {
		nuc.SetAppID(*u)
	}
	return nuc
}

// SetUserID sets the "user_id" field.
func (nuc *NotifUserCreate) SetUserID(u uuid.UUID) *NotifUserCreate {
	nuc.mutation.SetUserID(u)
	return nuc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableUserID(u *uuid.UUID) *NotifUserCreate {
	if u != nil {
		nuc.SetUserID(*u)
	}
	return nuc
}

// SetEventType sets the "event_type" field.
func (nuc *NotifUserCreate) SetEventType(s string) *NotifUserCreate {
	nuc.mutation.SetEventType(s)
	return nuc
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (nuc *NotifUserCreate) SetNillableEventType(s *string) *NotifUserCreate {
	if s != nil {
		nuc.SetEventType(*s)
	}
	return nuc
}

// SetID sets the "id" field.
func (nuc *NotifUserCreate) SetID(u uint32) *NotifUserCreate {
	nuc.mutation.SetID(u)
	return nuc
}

// Mutation returns the NotifUserMutation object of the builder.
func (nuc *NotifUserCreate) Mutation() *NotifUserMutation {
	return nuc.mutation
}

// Save creates the NotifUser in the database.
func (nuc *NotifUserCreate) Save(ctx context.Context) (*NotifUser, error) {
	var (
		err  error
		node *NotifUser
	)
	if err := nuc.defaults(); err != nil {
		return nil, err
	}
	if len(nuc.hooks) == 0 {
		if err = nuc.check(); err != nil {
			return nil, err
		}
		node, err = nuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuc.check(); err != nil {
				return nil, err
			}
			nuc.mutation = mutation
			if node, err = nuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nuc.hooks) - 1; i >= 0; i-- {
			if nuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NotifUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nuc *NotifUserCreate) SaveX(ctx context.Context) *NotifUser {
	v, err := nuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nuc *NotifUserCreate) Exec(ctx context.Context) error {
	_, err := nuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuc *NotifUserCreate) ExecX(ctx context.Context) {
	if err := nuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuc *NotifUserCreate) defaults() error {
	if _, ok := nuc.mutation.CreatedAt(); !ok {
		if notifuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultCreatedAt()
		nuc.mutation.SetCreatedAt(v)
	}
	if _, ok := nuc.mutation.UpdatedAt(); !ok {
		if notifuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultUpdatedAt()
		nuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nuc.mutation.DeletedAt(); !ok {
		if notifuser.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultDeletedAt()
		nuc.mutation.SetDeletedAt(v)
	}
	if _, ok := nuc.mutation.EntID(); !ok {
		if notifuser.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultEntID()
		nuc.mutation.SetEntID(v)
	}
	if _, ok := nuc.mutation.AppID(); !ok {
		if notifuser.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultAppID()
		nuc.mutation.SetAppID(v)
	}
	if _, ok := nuc.mutation.UserID(); !ok {
		if notifuser.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized notifuser.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := notifuser.DefaultUserID()
		nuc.mutation.SetUserID(v)
	}
	if _, ok := nuc.mutation.EventType(); !ok {
		v := notifuser.DefaultEventType
		nuc.mutation.SetEventType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nuc *NotifUserCreate) check() error {
	if _, ok := nuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotifUser.created_at"`)}
	}
	if _, ok := nuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotifUser.updated_at"`)}
	}
	if _, ok := nuc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "NotifUser.deleted_at"`)}
	}
	if _, ok := nuc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "NotifUser.ent_id"`)}
	}
	return nil
}

func (nuc *NotifUserCreate) sqlSave(ctx context.Context) (*NotifUser, error) {
	_node, _spec := nuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (nuc *NotifUserCreate) createSpec() (*NotifUser, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifUser{config: nuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notifuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notifuser.FieldID,
			},
		}
	)
	_spec.OnConflict = nuc.conflict
	if id, ok := nuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nuc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := nuc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := nuc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifuser.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := nuc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := nuc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := nuc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifuser.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := nuc.mutation.EventType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notifuser.FieldEventType,
		})
		_node.EventType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (nuc *NotifUserCreate) OnConflict(opts ...sql.ConflictOption) *NotifUserUpsertOne {
	nuc.conflict = opts
	return &NotifUserUpsertOne{
		create: nuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (nuc *NotifUserCreate) OnConflictColumns(columns ...string) *NotifUserUpsertOne {
	nuc.conflict = append(nuc.conflict, sql.ConflictColumns(columns...))
	return &NotifUserUpsertOne{
		create: nuc,
	}
}

type (
	// NotifUserUpsertOne is the builder for "upsert"-ing
	//  one NotifUser node.
	NotifUserUpsertOne struct {
		create *NotifUserCreate
	}

	// NotifUserUpsert is the "OnConflict" setter.
	NotifUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *NotifUserUpsert) SetCreatedAt(v uint32) *NotifUserUpsert {
	u.Set(notifuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateCreatedAt() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUserUpsert) AddCreatedAt(v uint32) *NotifUserUpsert {
	u.Add(notifuser.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUserUpsert) SetUpdatedAt(v uint32) *NotifUserUpsert {
	u.Set(notifuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateUpdatedAt() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUserUpsert) AddUpdatedAt(v uint32) *NotifUserUpsert {
	u.Add(notifuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUserUpsert) SetDeletedAt(v uint32) *NotifUserUpsert {
	u.Set(notifuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateDeletedAt() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUserUpsert) AddDeletedAt(v uint32) *NotifUserUpsert {
	u.Add(notifuser.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *NotifUserUpsert) SetEntID(v uuid.UUID) *NotifUserUpsert {
	u.Set(notifuser.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateEntID() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *NotifUserUpsert) SetAppID(v uuid.UUID) *NotifUserUpsert {
	u.Set(notifuser.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateAppID() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUserUpsert) ClearAppID() *NotifUserUpsert {
	u.SetNull(notifuser.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *NotifUserUpsert) SetUserID(v uuid.UUID) *NotifUserUpsert {
	u.Set(notifuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateUserID() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUserUpsert) ClearUserID() *NotifUserUpsert {
	u.SetNull(notifuser.FieldUserID)
	return u
}

// SetEventType sets the "event_type" field.
func (u *NotifUserUpsert) SetEventType(v string) *NotifUserUpsert {
	u.Set(notifuser.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUserUpsert) UpdateEventType() *NotifUserUpsert {
	u.SetExcluded(notifuser.FieldEventType)
	return u
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUserUpsert) ClearEventType() *NotifUserUpsert {
	u.SetNull(notifuser.FieldEventType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotifUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifUserUpsertOne) UpdateNewValues() *NotifUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notifuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.NotifUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *NotifUserUpsertOne) Ignore() *NotifUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifUserUpsertOne) DoNothing() *NotifUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifUserCreate.OnConflict
// documentation for more info.
func (u *NotifUserUpsertOne) Update(set func(*NotifUserUpsert)) *NotifUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifUserUpsertOne) SetCreatedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUserUpsertOne) AddCreatedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateCreatedAt() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUserUpsertOne) SetUpdatedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUserUpsertOne) AddUpdatedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateUpdatedAt() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUserUpsertOne) SetDeletedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUserUpsertOne) AddDeletedAt(v uint32) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateDeletedAt() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifUserUpsertOne) SetEntID(v uuid.UUID) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateEntID() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifUserUpsertOne) SetAppID(v uuid.UUID) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateAppID() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUserUpsertOne) ClearAppID() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotifUserUpsertOne) SetUserID(v uuid.UUID) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateUserID() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUserUpsertOne) ClearUserID() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearUserID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifUserUpsertOne) SetEventType(v string) *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUserUpsertOne) UpdateEventType() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUserUpsertOne) ClearEventType() *NotifUserUpsertOne {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearEventType()
	})
}

// Exec executes the query.
func (u *NotifUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotifUserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotifUserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotifUserCreateBulk is the builder for creating many NotifUser entities in bulk.
type NotifUserCreateBulk struct {
	config
	builders []*NotifUserCreate
	conflict []sql.ConflictOption
}

// Save creates the NotifUser entities in the database.
func (nucb *NotifUserCreateBulk) Save(ctx context.Context) ([]*NotifUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nucb.builders))
	nodes := make([]*NotifUser, len(nucb.builders))
	mutators := make([]Mutator, len(nucb.builders))
	for i := range nucb.builders {
		func(i int, root context.Context) {
			builder := nucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nucb *NotifUserCreateBulk) SaveX(ctx context.Context) []*NotifUser {
	v, err := nucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nucb *NotifUserCreateBulk) Exec(ctx context.Context) error {
	_, err := nucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nucb *NotifUserCreateBulk) ExecX(ctx context.Context) {
	if err := nucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (nucb *NotifUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotifUserUpsertBulk {
	nucb.conflict = opts
	return &NotifUserUpsertBulk{
		create: nucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (nucb *NotifUserCreateBulk) OnConflictColumns(columns ...string) *NotifUserUpsertBulk {
	nucb.conflict = append(nucb.conflict, sql.ConflictColumns(columns...))
	return &NotifUserUpsertBulk{
		create: nucb,
	}
}

// NotifUserUpsertBulk is the builder for "upsert"-ing
// a bulk of NotifUser nodes.
type NotifUserUpsertBulk struct {
	create *NotifUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotifUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifUserUpsertBulk) UpdateNewValues() *NotifUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notifuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotifUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *NotifUserUpsertBulk) Ignore() *NotifUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifUserUpsertBulk) DoNothing() *NotifUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifUserCreateBulk.OnConflict
// documentation for more info.
func (u *NotifUserUpsertBulk) Update(set func(*NotifUserUpsert)) *NotifUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifUserUpsertBulk) SetCreatedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUserUpsertBulk) AddCreatedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateCreatedAt() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUserUpsertBulk) SetUpdatedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUserUpsertBulk) AddUpdatedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateUpdatedAt() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUserUpsertBulk) SetDeletedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUserUpsertBulk) AddDeletedAt(v uint32) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateDeletedAt() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifUserUpsertBulk) SetEntID(v uuid.UUID) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateEntID() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifUserUpsertBulk) SetAppID(v uuid.UUID) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateAppID() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUserUpsertBulk) ClearAppID() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotifUserUpsertBulk) SetUserID(v uuid.UUID) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateUserID() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUserUpsertBulk) ClearUserID() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearUserID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifUserUpsertBulk) SetEventType(v string) *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUserUpsertBulk) UpdateEventType() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUserUpsertBulk) ClearEventType() *NotifUserUpsertBulk {
	return u.Update(func(s *NotifUserUpsert) {
		s.ClearEventType()
	})
}

// Exec executes the query.
func (u *NotifUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotifUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
