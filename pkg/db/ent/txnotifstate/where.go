// Code generated by ent, DO NOT EDIT.

package txnotifstate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TxID applies equality check predicate on the "tx_id" field. It's identical to TxIDEQ.
func TxID(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// NotifState applies equality check predicate on the "notif_state" field. It's identical to NotifStateEQ.
func NotifState(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifState), v))
	})
}

// TxType applies equality check predicate on the "tx_type" field. It's identical to TxTypeEQ.
func TxType(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// TxIDEQ applies the EQ predicate on the "tx_id" field.
func TxIDEQ(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// TxIDNEQ applies the NEQ predicate on the "tx_id" field.
func TxIDNEQ(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxID), v))
	})
}

// TxIDIn applies the In predicate on the "tx_id" field.
func TxIDIn(vs ...uuid.UUID) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxID), v...))
	})
}

// TxIDNotIn applies the NotIn predicate on the "tx_id" field.
func TxIDNotIn(vs ...uuid.UUID) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxID), v...))
	})
}

// TxIDGT applies the GT predicate on the "tx_id" field.
func TxIDGT(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxID), v))
	})
}

// TxIDGTE applies the GTE predicate on the "tx_id" field.
func TxIDGTE(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxID), v))
	})
}

// TxIDLT applies the LT predicate on the "tx_id" field.
func TxIDLT(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxID), v))
	})
}

// TxIDLTE applies the LTE predicate on the "tx_id" field.
func TxIDLTE(v uuid.UUID) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxID), v))
	})
}

// TxIDIsNil applies the IsNil predicate on the "tx_id" field.
func TxIDIsNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxID)))
	})
}

// TxIDNotNil applies the NotNil predicate on the "tx_id" field.
func TxIDNotNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxID)))
	})
}

// NotifStateEQ applies the EQ predicate on the "notif_state" field.
func NotifStateEQ(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifState), v))
	})
}

// NotifStateNEQ applies the NEQ predicate on the "notif_state" field.
func NotifStateNEQ(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifState), v))
	})
}

// NotifStateIn applies the In predicate on the "notif_state" field.
func NotifStateIn(vs ...string) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifState), v...))
	})
}

// NotifStateNotIn applies the NotIn predicate on the "notif_state" field.
func NotifStateNotIn(vs ...string) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifState), v...))
	})
}

// NotifStateGT applies the GT predicate on the "notif_state" field.
func NotifStateGT(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifState), v))
	})
}

// NotifStateGTE applies the GTE predicate on the "notif_state" field.
func NotifStateGTE(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifState), v))
	})
}

// NotifStateLT applies the LT predicate on the "notif_state" field.
func NotifStateLT(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifState), v))
	})
}

// NotifStateLTE applies the LTE predicate on the "notif_state" field.
func NotifStateLTE(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifState), v))
	})
}

// NotifStateContains applies the Contains predicate on the "notif_state" field.
func NotifStateContains(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotifState), v))
	})
}

// NotifStateHasPrefix applies the HasPrefix predicate on the "notif_state" field.
func NotifStateHasPrefix(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotifState), v))
	})
}

// NotifStateHasSuffix applies the HasSuffix predicate on the "notif_state" field.
func NotifStateHasSuffix(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotifState), v))
	})
}

// NotifStateIsNil applies the IsNil predicate on the "notif_state" field.
func NotifStateIsNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotifState)))
	})
}

// NotifStateNotNil applies the NotNil predicate on the "notif_state" field.
func NotifStateNotNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotifState)))
	})
}

// NotifStateEqualFold applies the EqualFold predicate on the "notif_state" field.
func NotifStateEqualFold(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotifState), v))
	})
}

// NotifStateContainsFold applies the ContainsFold predicate on the "notif_state" field.
func NotifStateContainsFold(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotifState), v))
	})
}

// TxTypeEQ applies the EQ predicate on the "tx_type" field.
func TxTypeEQ(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxType), v))
	})
}

// TxTypeNEQ applies the NEQ predicate on the "tx_type" field.
func TxTypeNEQ(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxType), v))
	})
}

// TxTypeIn applies the In predicate on the "tx_type" field.
func TxTypeIn(vs ...string) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxType), v...))
	})
}

// TxTypeNotIn applies the NotIn predicate on the "tx_type" field.
func TxTypeNotIn(vs ...string) predicate.TxNotifState {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxType), v...))
	})
}

// TxTypeGT applies the GT predicate on the "tx_type" field.
func TxTypeGT(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxType), v))
	})
}

// TxTypeGTE applies the GTE predicate on the "tx_type" field.
func TxTypeGTE(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxType), v))
	})
}

// TxTypeLT applies the LT predicate on the "tx_type" field.
func TxTypeLT(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxType), v))
	})
}

// TxTypeLTE applies the LTE predicate on the "tx_type" field.
func TxTypeLTE(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxType), v))
	})
}

// TxTypeContains applies the Contains predicate on the "tx_type" field.
func TxTypeContains(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxType), v))
	})
}

// TxTypeHasPrefix applies the HasPrefix predicate on the "tx_type" field.
func TxTypeHasPrefix(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxType), v))
	})
}

// TxTypeHasSuffix applies the HasSuffix predicate on the "tx_type" field.
func TxTypeHasSuffix(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxType), v))
	})
}

// TxTypeIsNil applies the IsNil predicate on the "tx_type" field.
func TxTypeIsNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxType)))
	})
}

// TxTypeNotNil applies the NotNil predicate on the "tx_type" field.
func TxTypeNotNil() predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxType)))
	})
}

// TxTypeEqualFold applies the EqualFold predicate on the "tx_type" field.
func TxTypeEqualFold(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxType), v))
	})
}

// TxTypeContainsFold applies the ContainsFold predicate on the "tx_type" field.
func TxTypeContainsFold(v string) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TxNotifState) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TxNotifState) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TxNotifState) predicate.TxNotifState {
	return predicate.TxNotifState(func(s *sql.Selector) {
		p(s.Not())
	})
}
