// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/readannouncement"
	"github.com/google/uuid"
)

// ReadAnnouncementUpdate is the builder for updating ReadAnnouncement entities.
type ReadAnnouncementUpdate struct {
	config
	hooks     []Hook
	mutation  *ReadAnnouncementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReadAnnouncementUpdate builder.
func (rau *ReadAnnouncementUpdate) Where(ps ...predicate.ReadAnnouncement) *ReadAnnouncementUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetCreatedAt sets the "created_at" field.
func (rau *ReadAnnouncementUpdate) SetCreatedAt(u uint32) *ReadAnnouncementUpdate {
	rau.mutation.ResetCreatedAt()
	rau.mutation.SetCreatedAt(u)
	return rau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rau *ReadAnnouncementUpdate) SetNillableCreatedAt(u *uint32) *ReadAnnouncementUpdate {
	if u != nil {
		rau.SetCreatedAt(*u)
	}
	return rau
}

// AddCreatedAt adds u to the "created_at" field.
func (rau *ReadAnnouncementUpdate) AddCreatedAt(u int32) *ReadAnnouncementUpdate {
	rau.mutation.AddCreatedAt(u)
	return rau
}

// SetUpdatedAt sets the "updated_at" field.
func (rau *ReadAnnouncementUpdate) SetUpdatedAt(u uint32) *ReadAnnouncementUpdate {
	rau.mutation.ResetUpdatedAt()
	rau.mutation.SetUpdatedAt(u)
	return rau
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rau *ReadAnnouncementUpdate) AddUpdatedAt(u int32) *ReadAnnouncementUpdate {
	rau.mutation.AddUpdatedAt(u)
	return rau
}

// SetDeletedAt sets the "deleted_at" field.
func (rau *ReadAnnouncementUpdate) SetDeletedAt(u uint32) *ReadAnnouncementUpdate {
	rau.mutation.ResetDeletedAt()
	rau.mutation.SetDeletedAt(u)
	return rau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rau *ReadAnnouncementUpdate) SetNillableDeletedAt(u *uint32) *ReadAnnouncementUpdate {
	if u != nil {
		rau.SetDeletedAt(*u)
	}
	return rau
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rau *ReadAnnouncementUpdate) AddDeletedAt(u int32) *ReadAnnouncementUpdate {
	rau.mutation.AddDeletedAt(u)
	return rau
}

// SetAppID sets the "app_id" field.
func (rau *ReadAnnouncementUpdate) SetAppID(u uuid.UUID) *ReadAnnouncementUpdate {
	rau.mutation.SetAppID(u)
	return rau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rau *ReadAnnouncementUpdate) SetNillableAppID(u *uuid.UUID) *ReadAnnouncementUpdate {
	if u != nil {
		rau.SetAppID(*u)
	}
	return rau
}

// ClearAppID clears the value of the "app_id" field.
func (rau *ReadAnnouncementUpdate) ClearAppID() *ReadAnnouncementUpdate {
	rau.mutation.ClearAppID()
	return rau
}

// SetUserID sets the "user_id" field.
func (rau *ReadAnnouncementUpdate) SetUserID(u uuid.UUID) *ReadAnnouncementUpdate {
	rau.mutation.SetUserID(u)
	return rau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rau *ReadAnnouncementUpdate) SetNillableUserID(u *uuid.UUID) *ReadAnnouncementUpdate {
	if u != nil {
		rau.SetUserID(*u)
	}
	return rau
}

// ClearUserID clears the value of the "user_id" field.
func (rau *ReadAnnouncementUpdate) ClearUserID() *ReadAnnouncementUpdate {
	rau.mutation.ClearUserID()
	return rau
}

// SetAnnouncementID sets the "announcement_id" field.
func (rau *ReadAnnouncementUpdate) SetAnnouncementID(u uuid.UUID) *ReadAnnouncementUpdate {
	rau.mutation.SetAnnouncementID(u)
	return rau
}

// SetNillableAnnouncementID sets the "announcement_id" field if the given value is not nil.
func (rau *ReadAnnouncementUpdate) SetNillableAnnouncementID(u *uuid.UUID) *ReadAnnouncementUpdate {
	if u != nil {
		rau.SetAnnouncementID(*u)
	}
	return rau
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (rau *ReadAnnouncementUpdate) ClearAnnouncementID() *ReadAnnouncementUpdate {
	rau.mutation.ClearAnnouncementID()
	return rau
}

// Mutation returns the ReadAnnouncementMutation object of the builder.
func (rau *ReadAnnouncementUpdate) Mutation() *ReadAnnouncementMutation {
	return rau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *ReadAnnouncementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := rau.defaults(); err != nil {
		return 0, err
	}
	if len(rau.hooks) == 0 {
		affected, err = rau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadAnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rau.mutation = mutation
			affected, err = rau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rau.hooks) - 1; i >= 0; i-- {
			if rau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rau *ReadAnnouncementUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *ReadAnnouncementUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *ReadAnnouncementUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rau *ReadAnnouncementUpdate) defaults() error {
	if _, ok := rau.mutation.UpdatedAt(); !ok {
		if readannouncement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized readannouncement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := readannouncement.UpdateDefaultUpdatedAt()
		rau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rau *ReadAnnouncementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReadAnnouncementUpdate {
	rau.modifiers = append(rau.modifiers, modifiers...)
	return rau
}

func (rau *ReadAnnouncementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readannouncement.Table,
			Columns: readannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readannouncement.FieldID,
			},
		},
	}
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldCreatedAt,
		})
	}
	if value, ok := rau.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldCreatedAt,
		})
	}
	if value, ok := rau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := rau.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := rau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldDeletedAt,
		})
	}
	if value, ok := rau.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldDeletedAt,
		})
	}
	if value, ok := rau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldAppID,
		})
	}
	if rau.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldAppID,
		})
	}
	if value, ok := rau.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldUserID,
		})
	}
	if rau.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldUserID,
		})
	}
	if value, ok := rau.mutation.AnnouncementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldAnnouncementID,
		})
	}
	if rau.mutation.AnnouncementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldAnnouncementID,
		})
	}
	_spec.Modifiers = rau.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readannouncement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReadAnnouncementUpdateOne is the builder for updating a single ReadAnnouncement entity.
type ReadAnnouncementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReadAnnouncementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (rauo *ReadAnnouncementUpdateOne) SetCreatedAt(u uint32) *ReadAnnouncementUpdateOne {
	rauo.mutation.ResetCreatedAt()
	rauo.mutation.SetCreatedAt(u)
	return rauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rauo *ReadAnnouncementUpdateOne) SetNillableCreatedAt(u *uint32) *ReadAnnouncementUpdateOne {
	if u != nil {
		rauo.SetCreatedAt(*u)
	}
	return rauo
}

// AddCreatedAt adds u to the "created_at" field.
func (rauo *ReadAnnouncementUpdateOne) AddCreatedAt(u int32) *ReadAnnouncementUpdateOne {
	rauo.mutation.AddCreatedAt(u)
	return rauo
}

// SetUpdatedAt sets the "updated_at" field.
func (rauo *ReadAnnouncementUpdateOne) SetUpdatedAt(u uint32) *ReadAnnouncementUpdateOne {
	rauo.mutation.ResetUpdatedAt()
	rauo.mutation.SetUpdatedAt(u)
	return rauo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rauo *ReadAnnouncementUpdateOne) AddUpdatedAt(u int32) *ReadAnnouncementUpdateOne {
	rauo.mutation.AddUpdatedAt(u)
	return rauo
}

// SetDeletedAt sets the "deleted_at" field.
func (rauo *ReadAnnouncementUpdateOne) SetDeletedAt(u uint32) *ReadAnnouncementUpdateOne {
	rauo.mutation.ResetDeletedAt()
	rauo.mutation.SetDeletedAt(u)
	return rauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rauo *ReadAnnouncementUpdateOne) SetNillableDeletedAt(u *uint32) *ReadAnnouncementUpdateOne {
	if u != nil {
		rauo.SetDeletedAt(*u)
	}
	return rauo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rauo *ReadAnnouncementUpdateOne) AddDeletedAt(u int32) *ReadAnnouncementUpdateOne {
	rauo.mutation.AddDeletedAt(u)
	return rauo
}

// SetAppID sets the "app_id" field.
func (rauo *ReadAnnouncementUpdateOne) SetAppID(u uuid.UUID) *ReadAnnouncementUpdateOne {
	rauo.mutation.SetAppID(u)
	return rauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rauo *ReadAnnouncementUpdateOne) SetNillableAppID(u *uuid.UUID) *ReadAnnouncementUpdateOne {
	if u != nil {
		rauo.SetAppID(*u)
	}
	return rauo
}

// ClearAppID clears the value of the "app_id" field.
func (rauo *ReadAnnouncementUpdateOne) ClearAppID() *ReadAnnouncementUpdateOne {
	rauo.mutation.ClearAppID()
	return rauo
}

// SetUserID sets the "user_id" field.
func (rauo *ReadAnnouncementUpdateOne) SetUserID(u uuid.UUID) *ReadAnnouncementUpdateOne {
	rauo.mutation.SetUserID(u)
	return rauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rauo *ReadAnnouncementUpdateOne) SetNillableUserID(u *uuid.UUID) *ReadAnnouncementUpdateOne {
	if u != nil {
		rauo.SetUserID(*u)
	}
	return rauo
}

// ClearUserID clears the value of the "user_id" field.
func (rauo *ReadAnnouncementUpdateOne) ClearUserID() *ReadAnnouncementUpdateOne {
	rauo.mutation.ClearUserID()
	return rauo
}

// SetAnnouncementID sets the "announcement_id" field.
func (rauo *ReadAnnouncementUpdateOne) SetAnnouncementID(u uuid.UUID) *ReadAnnouncementUpdateOne {
	rauo.mutation.SetAnnouncementID(u)
	return rauo
}

// SetNillableAnnouncementID sets the "announcement_id" field if the given value is not nil.
func (rauo *ReadAnnouncementUpdateOne) SetNillableAnnouncementID(u *uuid.UUID) *ReadAnnouncementUpdateOne {
	if u != nil {
		rauo.SetAnnouncementID(*u)
	}
	return rauo
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (rauo *ReadAnnouncementUpdateOne) ClearAnnouncementID() *ReadAnnouncementUpdateOne {
	rauo.mutation.ClearAnnouncementID()
	return rauo
}

// Mutation returns the ReadAnnouncementMutation object of the builder.
func (rauo *ReadAnnouncementUpdateOne) Mutation() *ReadAnnouncementMutation {
	return rauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *ReadAnnouncementUpdateOne) Select(field string, fields ...string) *ReadAnnouncementUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated ReadAnnouncement entity.
func (rauo *ReadAnnouncementUpdateOne) Save(ctx context.Context) (*ReadAnnouncement, error) {
	var (
		err  error
		node *ReadAnnouncement
	)
	if err := rauo.defaults(); err != nil {
		return nil, err
	}
	if len(rauo.hooks) == 0 {
		node, err = rauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadAnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rauo.mutation = mutation
			node, err = rauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rauo.hooks) - 1; i >= 0; i-- {
			if rauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReadAnnouncement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReadAnnouncementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *ReadAnnouncementUpdateOne) SaveX(ctx context.Context) *ReadAnnouncement {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *ReadAnnouncementUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *ReadAnnouncementUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rauo *ReadAnnouncementUpdateOne) defaults() error {
	if _, ok := rauo.mutation.UpdatedAt(); !ok {
		if readannouncement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized readannouncement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := readannouncement.UpdateDefaultUpdatedAt()
		rauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rauo *ReadAnnouncementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReadAnnouncementUpdateOne {
	rauo.modifiers = append(rauo.modifiers, modifiers...)
	return rauo
}

func (rauo *ReadAnnouncementUpdateOne) sqlSave(ctx context.Context) (_node *ReadAnnouncement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readannouncement.Table,
			Columns: readannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readannouncement.FieldID,
			},
		},
	}
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReadAnnouncement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, readannouncement.FieldID)
		for _, f := range fields {
			if !readannouncement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != readannouncement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldCreatedAt,
		})
	}
	if value, ok := rauo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldCreatedAt,
		})
	}
	if value, ok := rauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := rauo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := rauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldDeletedAt,
		})
	}
	if value, ok := rauo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readannouncement.FieldDeletedAt,
		})
	}
	if value, ok := rauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldAppID,
		})
	}
	if rauo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldAppID,
		})
	}
	if value, ok := rauo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldUserID,
		})
	}
	if rauo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldUserID,
		})
	}
	if value, ok := rauo.mutation.AnnouncementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readannouncement.FieldAnnouncementID,
		})
	}
	if rauo.mutation.AnnouncementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readannouncement.FieldAnnouncementID,
		})
	}
	_spec.Modifiers = rauo.modifiers
	_node = &ReadAnnouncement{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readannouncement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
