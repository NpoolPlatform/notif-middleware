// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifchannel"
	"github.com/google/uuid"
)

// NotifChannelCreate is the builder for creating a NotifChannel entity.
type NotifChannelCreate struct {
	config
	mutation *NotifChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ncc *NotifChannelCreate) SetCreatedAt(u uint32) *NotifChannelCreate {
	ncc.mutation.SetCreatedAt(u)
	return ncc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableCreatedAt(u *uint32) *NotifChannelCreate {
	if u != nil {
		ncc.SetCreatedAt(*u)
	}
	return ncc
}

// SetUpdatedAt sets the "updated_at" field.
func (ncc *NotifChannelCreate) SetUpdatedAt(u uint32) *NotifChannelCreate {
	ncc.mutation.SetUpdatedAt(u)
	return ncc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableUpdatedAt(u *uint32) *NotifChannelCreate {
	if u != nil {
		ncc.SetUpdatedAt(*u)
	}
	return ncc
}

// SetDeletedAt sets the "deleted_at" field.
func (ncc *NotifChannelCreate) SetDeletedAt(u uint32) *NotifChannelCreate {
	ncc.mutation.SetDeletedAt(u)
	return ncc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableDeletedAt(u *uint32) *NotifChannelCreate {
	if u != nil {
		ncc.SetDeletedAt(*u)
	}
	return ncc
}

// SetEntID sets the "ent_id" field.
func (ncc *NotifChannelCreate) SetEntID(u uuid.UUID) *NotifChannelCreate {
	ncc.mutation.SetEntID(u)
	return ncc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableEntID(u *uuid.UUID) *NotifChannelCreate {
	if u != nil {
		ncc.SetEntID(*u)
	}
	return ncc
}

// SetAppID sets the "app_id" field.
func (ncc *NotifChannelCreate) SetAppID(u uuid.UUID) *NotifChannelCreate {
	ncc.mutation.SetAppID(u)
	return ncc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableAppID(u *uuid.UUID) *NotifChannelCreate {
	if u != nil {
		ncc.SetAppID(*u)
	}
	return ncc
}

// SetEventType sets the "event_type" field.
func (ncc *NotifChannelCreate) SetEventType(s string) *NotifChannelCreate {
	ncc.mutation.SetEventType(s)
	return ncc
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableEventType(s *string) *NotifChannelCreate {
	if s != nil {
		ncc.SetEventType(*s)
	}
	return ncc
}

// SetChannel sets the "channel" field.
func (ncc *NotifChannelCreate) SetChannel(s string) *NotifChannelCreate {
	ncc.mutation.SetChannel(s)
	return ncc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ncc *NotifChannelCreate) SetNillableChannel(s *string) *NotifChannelCreate {
	if s != nil {
		ncc.SetChannel(*s)
	}
	return ncc
}

// SetID sets the "id" field.
func (ncc *NotifChannelCreate) SetID(u uint32) *NotifChannelCreate {
	ncc.mutation.SetID(u)
	return ncc
}

// Mutation returns the NotifChannelMutation object of the builder.
func (ncc *NotifChannelCreate) Mutation() *NotifChannelMutation {
	return ncc.mutation
}

// Save creates the NotifChannel in the database.
func (ncc *NotifChannelCreate) Save(ctx context.Context) (*NotifChannel, error) {
	var (
		err  error
		node *NotifChannel
	)
	if err := ncc.defaults(); err != nil {
		return nil, err
	}
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ncc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NotifChannel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifChannelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NotifChannelCreate) SaveX(ctx context.Context) *NotifChannel {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NotifChannelCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NotifChannelCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NotifChannelCreate) defaults() error {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		if notifchannel.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifchannel.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notifchannel.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		if notifchannel.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notifchannel.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notifchannel.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ncc.mutation.DeletedAt(); !ok {
		if notifchannel.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized notifchannel.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := notifchannel.DefaultDeletedAt()
		ncc.mutation.SetDeletedAt(v)
	}
	if _, ok := ncc.mutation.EntID(); !ok {
		if notifchannel.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized notifchannel.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := notifchannel.DefaultEntID()
		ncc.mutation.SetEntID(v)
	}
	if _, ok := ncc.mutation.AppID(); !ok {
		if notifchannel.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized notifchannel.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := notifchannel.DefaultAppID()
		ncc.mutation.SetAppID(v)
	}
	if _, ok := ncc.mutation.EventType(); !ok {
		v := notifchannel.DefaultEventType
		ncc.mutation.SetEventType(v)
	}
	if _, ok := ncc.mutation.Channel(); !ok {
		v := notifchannel.DefaultChannel
		ncc.mutation.SetChannel(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NotifChannelCreate) check() error {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotifChannel.created_at"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotifChannel.updated_at"`)}
	}
	if _, ok := ncc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "NotifChannel.deleted_at"`)}
	}
	if _, ok := ncc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "NotifChannel.ent_id"`)}
	}
	return nil
}

func (ncc *NotifChannelCreate) sqlSave(ctx context.Context) (*NotifChannel, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ncc *NotifChannelCreate) createSpec() (*NotifChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifChannel{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notifchannel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notifchannel.FieldID,
			},
		}
	)
	_spec.OnConflict = ncc.conflict
	if id, ok := ncc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifchannel.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifchannel.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notifchannel.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ncc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifchannel.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ncc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notifchannel.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ncc.mutation.EventType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notifchannel.FieldEventType,
		})
		_node.EventType = value
	}
	if value, ok := ncc.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notifchannel.FieldChannel,
		})
		_node.Channel = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifChannel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ncc *NotifChannelCreate) OnConflict(opts ...sql.ConflictOption) *NotifChannelUpsertOne {
	ncc.conflict = opts
	return &NotifChannelUpsertOne{
		create: ncc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ncc *NotifChannelCreate) OnConflictColumns(columns ...string) *NotifChannelUpsertOne {
	ncc.conflict = append(ncc.conflict, sql.ConflictColumns(columns...))
	return &NotifChannelUpsertOne{
		create: ncc,
	}
}

type (
	// NotifChannelUpsertOne is the builder for "upsert"-ing
	//  one NotifChannel node.
	NotifChannelUpsertOne struct {
		create *NotifChannelCreate
	}

	// NotifChannelUpsert is the "OnConflict" setter.
	NotifChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *NotifChannelUpsert) SetCreatedAt(v uint32) *NotifChannelUpsert {
	u.Set(notifchannel.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateCreatedAt() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifChannelUpsert) AddCreatedAt(v uint32) *NotifChannelUpsert {
	u.Add(notifchannel.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifChannelUpsert) SetUpdatedAt(v uint32) *NotifChannelUpsert {
	u.Set(notifchannel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateUpdatedAt() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifChannelUpsert) AddUpdatedAt(v uint32) *NotifChannelUpsert {
	u.Add(notifchannel.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifChannelUpsert) SetDeletedAt(v uint32) *NotifChannelUpsert {
	u.Set(notifchannel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateDeletedAt() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifChannelUpsert) AddDeletedAt(v uint32) *NotifChannelUpsert {
	u.Add(notifchannel.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *NotifChannelUpsert) SetEntID(v uuid.UUID) *NotifChannelUpsert {
	u.Set(notifchannel.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateEntID() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *NotifChannelUpsert) SetAppID(v uuid.UUID) *NotifChannelUpsert {
	u.Set(notifchannel.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateAppID() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifChannelUpsert) ClearAppID() *NotifChannelUpsert {
	u.SetNull(notifchannel.FieldAppID)
	return u
}

// SetEventType sets the "event_type" field.
func (u *NotifChannelUpsert) SetEventType(v string) *NotifChannelUpsert {
	u.Set(notifchannel.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateEventType() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldEventType)
	return u
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifChannelUpsert) ClearEventType() *NotifChannelUpsert {
	u.SetNull(notifchannel.FieldEventType)
	return u
}

// SetChannel sets the "channel" field.
func (u *NotifChannelUpsert) SetChannel(v string) *NotifChannelUpsert {
	u.Set(notifchannel.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifChannelUpsert) UpdateChannel() *NotifChannelUpsert {
	u.SetExcluded(notifchannel.FieldChannel)
	return u
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifChannelUpsert) ClearChannel() *NotifChannelUpsert {
	u.SetNull(notifchannel.FieldChannel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotifChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifChannelUpsertOne) UpdateNewValues() *NotifChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notifchannel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.NotifChannel.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *NotifChannelUpsertOne) Ignore() *NotifChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifChannelUpsertOne) DoNothing() *NotifChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifChannelCreate.OnConflict
// documentation for more info.
func (u *NotifChannelUpsertOne) Update(set func(*NotifChannelUpsert)) *NotifChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifChannelUpsertOne) SetCreatedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifChannelUpsertOne) AddCreatedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateCreatedAt() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifChannelUpsertOne) SetUpdatedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifChannelUpsertOne) AddUpdatedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateUpdatedAt() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifChannelUpsertOne) SetDeletedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifChannelUpsertOne) AddDeletedAt(v uint32) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateDeletedAt() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifChannelUpsertOne) SetEntID(v uuid.UUID) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateEntID() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifChannelUpsertOne) SetAppID(v uuid.UUID) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateAppID() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifChannelUpsertOne) ClearAppID() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearAppID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifChannelUpsertOne) SetEventType(v string) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateEventType() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifChannelUpsertOne) ClearEventType() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearEventType()
	})
}

// SetChannel sets the "channel" field.
func (u *NotifChannelUpsertOne) SetChannel(v string) *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifChannelUpsertOne) UpdateChannel() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifChannelUpsertOne) ClearChannel() *NotifChannelUpsertOne {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearChannel()
	})
}

// Exec executes the query.
func (u *NotifChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotifChannelUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotifChannelUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotifChannelCreateBulk is the builder for creating many NotifChannel entities in bulk.
type NotifChannelCreateBulk struct {
	config
	builders []*NotifChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the NotifChannel entities in the database.
func (nccb *NotifChannelCreateBulk) Save(ctx context.Context) ([]*NotifChannel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NotifChannel, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NotifChannelCreateBulk) SaveX(ctx context.Context) []*NotifChannel {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NotifChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NotifChannelCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotifChannel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (nccb *NotifChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotifChannelUpsertBulk {
	nccb.conflict = opts
	return &NotifChannelUpsertBulk{
		create: nccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotifChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (nccb *NotifChannelCreateBulk) OnConflictColumns(columns ...string) *NotifChannelUpsertBulk {
	nccb.conflict = append(nccb.conflict, sql.ConflictColumns(columns...))
	return &NotifChannelUpsertBulk{
		create: nccb,
	}
}

// NotifChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of NotifChannel nodes.
type NotifChannelUpsertBulk struct {
	create *NotifChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotifChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notifchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifChannelUpsertBulk) UpdateNewValues() *NotifChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notifchannel.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotifChannel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *NotifChannelUpsertBulk) Ignore() *NotifChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifChannelUpsertBulk) DoNothing() *NotifChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifChannelCreateBulk.OnConflict
// documentation for more info.
func (u *NotifChannelUpsertBulk) Update(set func(*NotifChannelUpsert)) *NotifChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifChannelUpsertBulk) SetCreatedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifChannelUpsertBulk) AddCreatedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateCreatedAt() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifChannelUpsertBulk) SetUpdatedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifChannelUpsertBulk) AddUpdatedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateUpdatedAt() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifChannelUpsertBulk) SetDeletedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifChannelUpsertBulk) AddDeletedAt(v uint32) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateDeletedAt() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifChannelUpsertBulk) SetEntID(v uuid.UUID) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateEntID() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifChannelUpsertBulk) SetAppID(v uuid.UUID) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateAppID() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifChannelUpsertBulk) ClearAppID() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearAppID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifChannelUpsertBulk) SetEventType(v string) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateEventType() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifChannelUpsertBulk) ClearEventType() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearEventType()
	})
}

// SetChannel sets the "channel" field.
func (u *NotifChannelUpsertBulk) SetChannel(v string) *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifChannelUpsertBulk) UpdateChannel() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifChannelUpsertBulk) ClearChannel() *NotifChannelUpsertBulk {
	return u.Update(func(s *NotifChannelUpsert) {
		s.ClearChannel()
	})
}

// Exec executes the query.
func (u *NotifChannelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotifChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
