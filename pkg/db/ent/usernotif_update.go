// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/usernotif"
	"github.com/google/uuid"
)

// UserNotifUpdate is the builder for updating UserNotif entities.
type UserNotifUpdate struct {
	config
	hooks     []Hook
	mutation  *UserNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserNotifUpdate builder.
func (unu *UserNotifUpdate) Where(ps ...predicate.UserNotif) *UserNotifUpdate {
	unu.mutation.Where(ps...)
	return unu
}

// SetCreatedAt sets the "created_at" field.
func (unu *UserNotifUpdate) SetCreatedAt(u uint32) *UserNotifUpdate {
	unu.mutation.ResetCreatedAt()
	unu.mutation.SetCreatedAt(u)
	return unu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (unu *UserNotifUpdate) SetNillableCreatedAt(u *uint32) *UserNotifUpdate {
	if u != nil {
		unu.SetCreatedAt(*u)
	}
	return unu
}

// AddCreatedAt adds u to the "created_at" field.
func (unu *UserNotifUpdate) AddCreatedAt(u int32) *UserNotifUpdate {
	unu.mutation.AddCreatedAt(u)
	return unu
}

// SetUpdatedAt sets the "updated_at" field.
func (unu *UserNotifUpdate) SetUpdatedAt(u uint32) *UserNotifUpdate {
	unu.mutation.ResetUpdatedAt()
	unu.mutation.SetUpdatedAt(u)
	return unu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (unu *UserNotifUpdate) AddUpdatedAt(u int32) *UserNotifUpdate {
	unu.mutation.AddUpdatedAt(u)
	return unu
}

// SetDeletedAt sets the "deleted_at" field.
func (unu *UserNotifUpdate) SetDeletedAt(u uint32) *UserNotifUpdate {
	unu.mutation.ResetDeletedAt()
	unu.mutation.SetDeletedAt(u)
	return unu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (unu *UserNotifUpdate) SetNillableDeletedAt(u *uint32) *UserNotifUpdate {
	if u != nil {
		unu.SetDeletedAt(*u)
	}
	return unu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (unu *UserNotifUpdate) AddDeletedAt(u int32) *UserNotifUpdate {
	unu.mutation.AddDeletedAt(u)
	return unu
}

// SetAppID sets the "app_id" field.
func (unu *UserNotifUpdate) SetAppID(u uuid.UUID) *UserNotifUpdate {
	unu.mutation.SetAppID(u)
	return unu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (unu *UserNotifUpdate) SetNillableAppID(u *uuid.UUID) *UserNotifUpdate {
	if u != nil {
		unu.SetAppID(*u)
	}
	return unu
}

// ClearAppID clears the value of the "app_id" field.
func (unu *UserNotifUpdate) ClearAppID() *UserNotifUpdate {
	unu.mutation.ClearAppID()
	return unu
}

// SetUserID sets the "user_id" field.
func (unu *UserNotifUpdate) SetUserID(u uuid.UUID) *UserNotifUpdate {
	unu.mutation.SetUserID(u)
	return unu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (unu *UserNotifUpdate) SetNillableUserID(u *uuid.UUID) *UserNotifUpdate {
	if u != nil {
		unu.SetUserID(*u)
	}
	return unu
}

// ClearUserID clears the value of the "user_id" field.
func (unu *UserNotifUpdate) ClearUserID() *UserNotifUpdate {
	unu.mutation.ClearUserID()
	return unu
}

// SetNotifID sets the "notif_id" field.
func (unu *UserNotifUpdate) SetNotifID(u uuid.UUID) *UserNotifUpdate {
	unu.mutation.SetNotifID(u)
	return unu
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (unu *UserNotifUpdate) SetNillableNotifID(u *uuid.UUID) *UserNotifUpdate {
	if u != nil {
		unu.SetNotifID(*u)
	}
	return unu
}

// ClearNotifID clears the value of the "notif_id" field.
func (unu *UserNotifUpdate) ClearNotifID() *UserNotifUpdate {
	unu.mutation.ClearNotifID()
	return unu
}

// Mutation returns the UserNotifMutation object of the builder.
func (unu *UserNotifUpdate) Mutation() *UserNotifMutation {
	return unu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (unu *UserNotifUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := unu.defaults(); err != nil {
		return 0, err
	}
	if len(unu.hooks) == 0 {
		affected, err = unu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			unu.mutation = mutation
			affected, err = unu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(unu.hooks) - 1; i >= 0; i-- {
			if unu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = unu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, unu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (unu *UserNotifUpdate) SaveX(ctx context.Context) int {
	affected, err := unu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (unu *UserNotifUpdate) Exec(ctx context.Context) error {
	_, err := unu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unu *UserNotifUpdate) ExecX(ctx context.Context) {
	if err := unu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unu *UserNotifUpdate) defaults() error {
	if _, ok := unu.mutation.UpdatedAt(); !ok {
		if usernotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usernotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usernotif.UpdateDefaultUpdatedAt()
		unu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (unu *UserNotifUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserNotifUpdate {
	unu.modifiers = append(unu.modifiers, modifiers...)
	return unu
}

func (unu *UserNotifUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usernotif.Table,
			Columns: usernotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usernotif.FieldID,
			},
		},
	}
	if ps := unu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldCreatedAt,
		})
	}
	if value, ok := unu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldCreatedAt,
		})
	}
	if value, ok := unu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldUpdatedAt,
		})
	}
	if value, ok := unu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldUpdatedAt,
		})
	}
	if value, ok := unu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldDeletedAt,
		})
	}
	if value, ok := unu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldDeletedAt,
		})
	}
	if value, ok := unu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldAppID,
		})
	}
	if unu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldAppID,
		})
	}
	if value, ok := unu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldUserID,
		})
	}
	if unu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldUserID,
		})
	}
	if value, ok := unu.mutation.NotifID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldNotifID,
		})
	}
	if unu.mutation.NotifIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldNotifID,
		})
	}
	_spec.Modifiers = unu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, unu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserNotifUpdateOne is the builder for updating a single UserNotif entity.
type UserNotifUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (unuo *UserNotifUpdateOne) SetCreatedAt(u uint32) *UserNotifUpdateOne {
	unuo.mutation.ResetCreatedAt()
	unuo.mutation.SetCreatedAt(u)
	return unuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (unuo *UserNotifUpdateOne) SetNillableCreatedAt(u *uint32) *UserNotifUpdateOne {
	if u != nil {
		unuo.SetCreatedAt(*u)
	}
	return unuo
}

// AddCreatedAt adds u to the "created_at" field.
func (unuo *UserNotifUpdateOne) AddCreatedAt(u int32) *UserNotifUpdateOne {
	unuo.mutation.AddCreatedAt(u)
	return unuo
}

// SetUpdatedAt sets the "updated_at" field.
func (unuo *UserNotifUpdateOne) SetUpdatedAt(u uint32) *UserNotifUpdateOne {
	unuo.mutation.ResetUpdatedAt()
	unuo.mutation.SetUpdatedAt(u)
	return unuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (unuo *UserNotifUpdateOne) AddUpdatedAt(u int32) *UserNotifUpdateOne {
	unuo.mutation.AddUpdatedAt(u)
	return unuo
}

// SetDeletedAt sets the "deleted_at" field.
func (unuo *UserNotifUpdateOne) SetDeletedAt(u uint32) *UserNotifUpdateOne {
	unuo.mutation.ResetDeletedAt()
	unuo.mutation.SetDeletedAt(u)
	return unuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (unuo *UserNotifUpdateOne) SetNillableDeletedAt(u *uint32) *UserNotifUpdateOne {
	if u != nil {
		unuo.SetDeletedAt(*u)
	}
	return unuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (unuo *UserNotifUpdateOne) AddDeletedAt(u int32) *UserNotifUpdateOne {
	unuo.mutation.AddDeletedAt(u)
	return unuo
}

// SetAppID sets the "app_id" field.
func (unuo *UserNotifUpdateOne) SetAppID(u uuid.UUID) *UserNotifUpdateOne {
	unuo.mutation.SetAppID(u)
	return unuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (unuo *UserNotifUpdateOne) SetNillableAppID(u *uuid.UUID) *UserNotifUpdateOne {
	if u != nil {
		unuo.SetAppID(*u)
	}
	return unuo
}

// ClearAppID clears the value of the "app_id" field.
func (unuo *UserNotifUpdateOne) ClearAppID() *UserNotifUpdateOne {
	unuo.mutation.ClearAppID()
	return unuo
}

// SetUserID sets the "user_id" field.
func (unuo *UserNotifUpdateOne) SetUserID(u uuid.UUID) *UserNotifUpdateOne {
	unuo.mutation.SetUserID(u)
	return unuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (unuo *UserNotifUpdateOne) SetNillableUserID(u *uuid.UUID) *UserNotifUpdateOne {
	if u != nil {
		unuo.SetUserID(*u)
	}
	return unuo
}

// ClearUserID clears the value of the "user_id" field.
func (unuo *UserNotifUpdateOne) ClearUserID() *UserNotifUpdateOne {
	unuo.mutation.ClearUserID()
	return unuo
}

// SetNotifID sets the "notif_id" field.
func (unuo *UserNotifUpdateOne) SetNotifID(u uuid.UUID) *UserNotifUpdateOne {
	unuo.mutation.SetNotifID(u)
	return unuo
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (unuo *UserNotifUpdateOne) SetNillableNotifID(u *uuid.UUID) *UserNotifUpdateOne {
	if u != nil {
		unuo.SetNotifID(*u)
	}
	return unuo
}

// ClearNotifID clears the value of the "notif_id" field.
func (unuo *UserNotifUpdateOne) ClearNotifID() *UserNotifUpdateOne {
	unuo.mutation.ClearNotifID()
	return unuo
}

// Mutation returns the UserNotifMutation object of the builder.
func (unuo *UserNotifUpdateOne) Mutation() *UserNotifMutation {
	return unuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (unuo *UserNotifUpdateOne) Select(field string, fields ...string) *UserNotifUpdateOne {
	unuo.fields = append([]string{field}, fields...)
	return unuo
}

// Save executes the query and returns the updated UserNotif entity.
func (unuo *UserNotifUpdateOne) Save(ctx context.Context) (*UserNotif, error) {
	var (
		err  error
		node *UserNotif
	)
	if err := unuo.defaults(); err != nil {
		return nil, err
	}
	if len(unuo.hooks) == 0 {
		node, err = unuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			unuo.mutation = mutation
			node, err = unuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(unuo.hooks) - 1; i >= 0; i-- {
			if unuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = unuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, unuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserNotif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserNotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (unuo *UserNotifUpdateOne) SaveX(ctx context.Context) *UserNotif {
	node, err := unuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (unuo *UserNotifUpdateOne) Exec(ctx context.Context) error {
	_, err := unuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unuo *UserNotifUpdateOne) ExecX(ctx context.Context) {
	if err := unuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unuo *UserNotifUpdateOne) defaults() error {
	if _, ok := unuo.mutation.UpdatedAt(); !ok {
		if usernotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usernotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usernotif.UpdateDefaultUpdatedAt()
		unuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (unuo *UserNotifUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserNotifUpdateOne {
	unuo.modifiers = append(unuo.modifiers, modifiers...)
	return unuo
}

func (unuo *UserNotifUpdateOne) sqlSave(ctx context.Context) (_node *UserNotif, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usernotif.Table,
			Columns: usernotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usernotif.FieldID,
			},
		},
	}
	id, ok := unuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotif.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := unuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotif.FieldID)
		for _, f := range fields {
			if !usernotif.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotif.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := unuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldCreatedAt,
		})
	}
	if value, ok := unuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldCreatedAt,
		})
	}
	if value, ok := unuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldUpdatedAt,
		})
	}
	if value, ok := unuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldUpdatedAt,
		})
	}
	if value, ok := unuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldDeletedAt,
		})
	}
	if value, ok := unuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usernotif.FieldDeletedAt,
		})
	}
	if value, ok := unuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldAppID,
		})
	}
	if unuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldAppID,
		})
	}
	if value, ok := unuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldUserID,
		})
	}
	if unuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldUserID,
		})
	}
	if value, ok := unuo.mutation.NotifID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usernotif.FieldNotifID,
		})
	}
	if unuo.mutation.NotifIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usernotif.FieldNotifID,
		})
	}
	_spec.Modifiers = unuo.modifiers
	_node = &UserNotif{config: unuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, unuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
