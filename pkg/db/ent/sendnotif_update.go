// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendnotif"
	"github.com/google/uuid"
)

// SendNotifUpdate is the builder for updating SendNotif entities.
type SendNotifUpdate struct {
	config
	hooks     []Hook
	mutation  *SendNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SendNotifUpdate builder.
func (snu *SendNotifUpdate) Where(ps ...predicate.SendNotif) *SendNotifUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetCreatedAt sets the "created_at" field.
func (snu *SendNotifUpdate) SetCreatedAt(u uint32) *SendNotifUpdate {
	snu.mutation.ResetCreatedAt()
	snu.mutation.SetCreatedAt(u)
	return snu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableCreatedAt(u *uint32) *SendNotifUpdate {
	if u != nil {
		snu.SetCreatedAt(*u)
	}
	return snu
}

// AddCreatedAt adds u to the "created_at" field.
func (snu *SendNotifUpdate) AddCreatedAt(u int32) *SendNotifUpdate {
	snu.mutation.AddCreatedAt(u)
	return snu
}

// SetUpdatedAt sets the "updated_at" field.
func (snu *SendNotifUpdate) SetUpdatedAt(u uint32) *SendNotifUpdate {
	snu.mutation.ResetUpdatedAt()
	snu.mutation.SetUpdatedAt(u)
	return snu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (snu *SendNotifUpdate) AddUpdatedAt(u int32) *SendNotifUpdate {
	snu.mutation.AddUpdatedAt(u)
	return snu
}

// SetDeletedAt sets the "deleted_at" field.
func (snu *SendNotifUpdate) SetDeletedAt(u uint32) *SendNotifUpdate {
	snu.mutation.ResetDeletedAt()
	snu.mutation.SetDeletedAt(u)
	return snu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableDeletedAt(u *uint32) *SendNotifUpdate {
	if u != nil {
		snu.SetDeletedAt(*u)
	}
	return snu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (snu *SendNotifUpdate) AddDeletedAt(u int32) *SendNotifUpdate {
	snu.mutation.AddDeletedAt(u)
	return snu
}

// SetAppID sets the "app_id" field.
func (snu *SendNotifUpdate) SetAppID(u uuid.UUID) *SendNotifUpdate {
	snu.mutation.SetAppID(u)
	return snu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableAppID(u *uuid.UUID) *SendNotifUpdate {
	if u != nil {
		snu.SetAppID(*u)
	}
	return snu
}

// ClearAppID clears the value of the "app_id" field.
func (snu *SendNotifUpdate) ClearAppID() *SendNotifUpdate {
	snu.mutation.ClearAppID()
	return snu
}

// SetUserID sets the "user_id" field.
func (snu *SendNotifUpdate) SetUserID(u uuid.UUID) *SendNotifUpdate {
	snu.mutation.SetUserID(u)
	return snu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableUserID(u *uuid.UUID) *SendNotifUpdate {
	if u != nil {
		snu.SetUserID(*u)
	}
	return snu
}

// ClearUserID clears the value of the "user_id" field.
func (snu *SendNotifUpdate) ClearUserID() *SendNotifUpdate {
	snu.mutation.ClearUserID()
	return snu
}

// SetEventID sets the "event_id" field.
func (snu *SendNotifUpdate) SetEventID(u uuid.UUID) *SendNotifUpdate {
	snu.mutation.SetEventID(u)
	return snu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableEventID(u *uuid.UUID) *SendNotifUpdate {
	if u != nil {
		snu.SetEventID(*u)
	}
	return snu
}

// ClearEventID clears the value of the "event_id" field.
func (snu *SendNotifUpdate) ClearEventID() *SendNotifUpdate {
	snu.mutation.ClearEventID()
	return snu
}

// SetChannel sets the "channel" field.
func (snu *SendNotifUpdate) SetChannel(s string) *SendNotifUpdate {
	snu.mutation.SetChannel(s)
	return snu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (snu *SendNotifUpdate) SetNillableChannel(s *string) *SendNotifUpdate {
	if s != nil {
		snu.SetChannel(*s)
	}
	return snu
}

// ClearChannel clears the value of the "channel" field.
func (snu *SendNotifUpdate) ClearChannel() *SendNotifUpdate {
	snu.mutation.ClearChannel()
	return snu
}

// Mutation returns the SendNotifMutation object of the builder.
func (snu *SendNotifUpdate) Mutation() *SendNotifMutation {
	return snu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SendNotifUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := snu.defaults(); err != nil {
		return 0, err
	}
	if len(snu.hooks) == 0 {
		affected, err = snu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SendNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			snu.mutation = mutation
			affected, err = snu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(snu.hooks) - 1; i >= 0; i-- {
			if snu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = snu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, snu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SendNotifUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SendNotifUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SendNotifUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snu *SendNotifUpdate) defaults() error {
	if _, ok := snu.mutation.UpdatedAt(); !ok {
		if sendnotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sendnotif.UpdateDefaultUpdatedAt()
		snu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (snu *SendNotifUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SendNotifUpdate {
	snu.modifiers = append(snu.modifiers, modifiers...)
	return snu
}

func (snu *SendNotifUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sendnotif.Table,
			Columns: sendnotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: sendnotif.FieldID,
			},
		},
	}
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldCreatedAt,
		})
	}
	if value, ok := snu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldCreatedAt,
		})
	}
	if value, ok := snu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldUpdatedAt,
		})
	}
	if value, ok := snu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldUpdatedAt,
		})
	}
	if value, ok := snu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldDeletedAt,
		})
	}
	if value, ok := snu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldDeletedAt,
		})
	}
	if value, ok := snu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldAppID,
		})
	}
	if snu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldAppID,
		})
	}
	if value, ok := snu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldUserID,
		})
	}
	if snu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldUserID,
		})
	}
	if value, ok := snu.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldEventID,
		})
	}
	if snu.mutation.EventIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldEventID,
		})
	}
	if value, ok := snu.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sendnotif.FieldChannel,
		})
	}
	if snu.mutation.ChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sendnotif.FieldChannel,
		})
	}
	_spec.Modifiers = snu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sendnotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SendNotifUpdateOne is the builder for updating a single SendNotif entity.
type SendNotifUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SendNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (snuo *SendNotifUpdateOne) SetCreatedAt(u uint32) *SendNotifUpdateOne {
	snuo.mutation.ResetCreatedAt()
	snuo.mutation.SetCreatedAt(u)
	return snuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableCreatedAt(u *uint32) *SendNotifUpdateOne {
	if u != nil {
		snuo.SetCreatedAt(*u)
	}
	return snuo
}

// AddCreatedAt adds u to the "created_at" field.
func (snuo *SendNotifUpdateOne) AddCreatedAt(u int32) *SendNotifUpdateOne {
	snuo.mutation.AddCreatedAt(u)
	return snuo
}

// SetUpdatedAt sets the "updated_at" field.
func (snuo *SendNotifUpdateOne) SetUpdatedAt(u uint32) *SendNotifUpdateOne {
	snuo.mutation.ResetUpdatedAt()
	snuo.mutation.SetUpdatedAt(u)
	return snuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (snuo *SendNotifUpdateOne) AddUpdatedAt(u int32) *SendNotifUpdateOne {
	snuo.mutation.AddUpdatedAt(u)
	return snuo
}

// SetDeletedAt sets the "deleted_at" field.
func (snuo *SendNotifUpdateOne) SetDeletedAt(u uint32) *SendNotifUpdateOne {
	snuo.mutation.ResetDeletedAt()
	snuo.mutation.SetDeletedAt(u)
	return snuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableDeletedAt(u *uint32) *SendNotifUpdateOne {
	if u != nil {
		snuo.SetDeletedAt(*u)
	}
	return snuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (snuo *SendNotifUpdateOne) AddDeletedAt(u int32) *SendNotifUpdateOne {
	snuo.mutation.AddDeletedAt(u)
	return snuo
}

// SetAppID sets the "app_id" field.
func (snuo *SendNotifUpdateOne) SetAppID(u uuid.UUID) *SendNotifUpdateOne {
	snuo.mutation.SetAppID(u)
	return snuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableAppID(u *uuid.UUID) *SendNotifUpdateOne {
	if u != nil {
		snuo.SetAppID(*u)
	}
	return snuo
}

// ClearAppID clears the value of the "app_id" field.
func (snuo *SendNotifUpdateOne) ClearAppID() *SendNotifUpdateOne {
	snuo.mutation.ClearAppID()
	return snuo
}

// SetUserID sets the "user_id" field.
func (snuo *SendNotifUpdateOne) SetUserID(u uuid.UUID) *SendNotifUpdateOne {
	snuo.mutation.SetUserID(u)
	return snuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableUserID(u *uuid.UUID) *SendNotifUpdateOne {
	if u != nil {
		snuo.SetUserID(*u)
	}
	return snuo
}

// ClearUserID clears the value of the "user_id" field.
func (snuo *SendNotifUpdateOne) ClearUserID() *SendNotifUpdateOne {
	snuo.mutation.ClearUserID()
	return snuo
}

// SetEventID sets the "event_id" field.
func (snuo *SendNotifUpdateOne) SetEventID(u uuid.UUID) *SendNotifUpdateOne {
	snuo.mutation.SetEventID(u)
	return snuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableEventID(u *uuid.UUID) *SendNotifUpdateOne {
	if u != nil {
		snuo.SetEventID(*u)
	}
	return snuo
}

// ClearEventID clears the value of the "event_id" field.
func (snuo *SendNotifUpdateOne) ClearEventID() *SendNotifUpdateOne {
	snuo.mutation.ClearEventID()
	return snuo
}

// SetChannel sets the "channel" field.
func (snuo *SendNotifUpdateOne) SetChannel(s string) *SendNotifUpdateOne {
	snuo.mutation.SetChannel(s)
	return snuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (snuo *SendNotifUpdateOne) SetNillableChannel(s *string) *SendNotifUpdateOne {
	if s != nil {
		snuo.SetChannel(*s)
	}
	return snuo
}

// ClearChannel clears the value of the "channel" field.
func (snuo *SendNotifUpdateOne) ClearChannel() *SendNotifUpdateOne {
	snuo.mutation.ClearChannel()
	return snuo
}

// Mutation returns the SendNotifMutation object of the builder.
func (snuo *SendNotifUpdateOne) Mutation() *SendNotifMutation {
	return snuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SendNotifUpdateOne) Select(field string, fields ...string) *SendNotifUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SendNotif entity.
func (snuo *SendNotifUpdateOne) Save(ctx context.Context) (*SendNotif, error) {
	var (
		err  error
		node *SendNotif
	)
	if err := snuo.defaults(); err != nil {
		return nil, err
	}
	if len(snuo.hooks) == 0 {
		node, err = snuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SendNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			snuo.mutation = mutation
			node, err = snuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(snuo.hooks) - 1; i >= 0; i-- {
			if snuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = snuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, snuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SendNotif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SendNotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SendNotifUpdateOne) SaveX(ctx context.Context) *SendNotif {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SendNotifUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SendNotifUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snuo *SendNotifUpdateOne) defaults() error {
	if _, ok := snuo.mutation.UpdatedAt(); !ok {
		if sendnotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sendnotif.UpdateDefaultUpdatedAt()
		snuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (snuo *SendNotifUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SendNotifUpdateOne {
	snuo.modifiers = append(snuo.modifiers, modifiers...)
	return snuo
}

func (snuo *SendNotifUpdateOne) sqlSave(ctx context.Context) (_node *SendNotif, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sendnotif.Table,
			Columns: sendnotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: sendnotif.FieldID,
			},
		},
	}
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SendNotif.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sendnotif.FieldID)
		for _, f := range fields {
			if !sendnotif.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sendnotif.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldCreatedAt,
		})
	}
	if value, ok := snuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldCreatedAt,
		})
	}
	if value, ok := snuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldUpdatedAt,
		})
	}
	if value, ok := snuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldUpdatedAt,
		})
	}
	if value, ok := snuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldDeletedAt,
		})
	}
	if value, ok := snuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldDeletedAt,
		})
	}
	if value, ok := snuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldAppID,
		})
	}
	if snuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldAppID,
		})
	}
	if value, ok := snuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldUserID,
		})
	}
	if snuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldUserID,
		})
	}
	if value, ok := snuo.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldEventID,
		})
	}
	if snuo.mutation.EventIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: sendnotif.FieldEventID,
		})
	}
	if value, ok := snuo.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sendnotif.FieldChannel,
		})
	}
	if snuo.mutation.ChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sendnotif.FieldChannel,
		})
	}
	_spec.Modifiers = snuo.modifiers
	_node = &SendNotif{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sendnotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
