// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/goodbenefit"
	"github.com/google/uuid"
)

// GoodBenefit is the model entity for the GoodBenefit schema.
type GoodBenefit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// GoodName holds the value of the "good_name" field.
	GoodName string `json:"good_name,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// BenefitDate holds the value of the "benefit_date" field.
	BenefitDate uint32 `json:"benefit_date,omitempty"`
	// TxID holds the value of the "tx_id" field.
	TxID uuid.UUID `json:"tx_id,omitempty"`
	// Notified holds the value of the "notified" field.
	Notified bool `json:"notified,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodBenefit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodbenefit.FieldNotified:
			values[i] = new(sql.NullBool)
		case goodbenefit.FieldCreatedAt, goodbenefit.FieldUpdatedAt, goodbenefit.FieldDeletedAt, goodbenefit.FieldBenefitDate:
			values[i] = new(sql.NullInt64)
		case goodbenefit.FieldGoodName, goodbenefit.FieldAmount, goodbenefit.FieldState, goodbenefit.FieldMessage:
			values[i] = new(sql.NullString)
		case goodbenefit.FieldID, goodbenefit.FieldGoodID, goodbenefit.FieldTxID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodBenefit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodBenefit fields.
func (gb *GoodBenefit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodbenefit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gb.ID = *value
			}
		case goodbenefit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gb.CreatedAt = uint32(value.Int64)
			}
		case goodbenefit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gb.UpdatedAt = uint32(value.Int64)
			}
		case goodbenefit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gb.DeletedAt = uint32(value.Int64)
			}
		case goodbenefit.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gb.GoodID = *value
			}
		case goodbenefit.FieldGoodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field good_name", values[i])
			} else if value.Valid {
				gb.GoodName = value.String
			}
		case goodbenefit.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				gb.Amount = value.String
			}
		case goodbenefit.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gb.State = value.String
			}
		case goodbenefit.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				gb.Message = value.String
			}
		case goodbenefit.FieldBenefitDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_date", values[i])
			} else if value.Valid {
				gb.BenefitDate = uint32(value.Int64)
			}
		case goodbenefit.FieldTxID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value != nil {
				gb.TxID = *value
			}
		case goodbenefit.FieldNotified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notified", values[i])
			} else if value.Valid {
				gb.Notified = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodBenefit.
// Note that you need to call GoodBenefit.Unwrap() before calling this method if this GoodBenefit
// was returned from a transaction, and the transaction was committed or rolled back.
func (gb *GoodBenefit) Update() *GoodBenefitUpdateOne {
	return (&GoodBenefitClient{config: gb.config}).UpdateOne(gb)
}

// Unwrap unwraps the GoodBenefit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gb *GoodBenefit) Unwrap() *GoodBenefit {
	_tx, ok := gb.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodBenefit is not a transactional entity")
	}
	gb.config.driver = _tx.drv
	return gb
}

// String implements the fmt.Stringer.
func (gb *GoodBenefit) String() string {
	var builder strings.Builder
	builder.WriteString("GoodBenefit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gb.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gb.GoodID))
	builder.WriteString(", ")
	builder.WriteString("good_name=")
	builder.WriteString(gb.GoodName)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(gb.Amount)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(gb.State)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(gb.Message)
	builder.WriteString(", ")
	builder.WriteString("benefit_date=")
	builder.WriteString(fmt.Sprintf("%v", gb.BenefitDate))
	builder.WriteString(", ")
	builder.WriteString("tx_id=")
	builder.WriteString(fmt.Sprintf("%v", gb.TxID))
	builder.WriteString(", ")
	builder.WriteString("notified=")
	builder.WriteString(fmt.Sprintf("%v", gb.Notified))
	builder.WriteByte(')')
	return builder.String()
}

// GoodBenefits is a parsable slice of GoodBenefit.
type GoodBenefits []*GoodBenefit

func (gb GoodBenefits) config(cfg config) {
	for _i := range gb {
		gb[_i].config = cfg
	}
}
