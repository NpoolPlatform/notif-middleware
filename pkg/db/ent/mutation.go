// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/announcement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/contact"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/emailtemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/frontendtemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notif"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifchannel"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notifuser"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/readannouncement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendannouncement"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/smstemplate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/txnotifstate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/userannouncement"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnnouncement     = "Announcement"
	TypeContact          = "Contact"
	TypeEmailTemplate    = "EmailTemplate"
	TypeFrontendTemplate = "FrontendTemplate"
	TypeGoodBenefit      = "GoodBenefit"
	TypeNotif            = "Notif"
	TypeNotifChannel     = "NotifChannel"
	TypeNotifUser        = "NotifUser"
	TypeReadAnnouncement = "ReadAnnouncement"
	TypeSMSTemplate      = "SMSTemplate"
	TypeSendAnnouncement = "SendAnnouncement"
	TypeTxNotifState     = "TxNotifState"
	TypeUserAnnouncement = "UserAnnouncement"
)

// AnnouncementMutation represents an operation that mutates the Announcement nodes in the graph.
type AnnouncementMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	lang_id       *uuid.UUID
	title         *string
	content       *string
	channel       *string
	start_at      *uint32
	addstart_at   *int32
	end_at        *uint32
	addend_at     *int32
	_type         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Announcement, error)
	predicates    []predicate.Announcement
}

var _ ent.Mutation = (*AnnouncementMutation)(nil)

// announcementOption allows management of the mutation configuration using functional options.
type announcementOption func(*AnnouncementMutation)

// newAnnouncementMutation creates new mutation for the Announcement entity.
func newAnnouncementMutation(c config, op Op, opts ...announcementOption) *AnnouncementMutation {
	m := &AnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnnouncementID sets the ID field of the mutation.
func withAnnouncementID(id uuid.UUID) announcementOption {
	return func(m *AnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *Announcement
		)
		m.oldValue = func(ctx context.Context) (*Announcement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Announcement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnnouncement sets the old Announcement of the mutation.
func withAnnouncement(node *Announcement) announcementOption {
	return func(m *AnnouncementMutation) {
		m.oldValue = func(context.Context) (*Announcement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Announcement entities.
func (m *AnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Announcement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *AnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[announcement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[announcement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, announcement.FieldAppID)
}

// SetLangID sets the "lang_id" field.
func (m *AnnouncementMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *AnnouncementMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ClearLangID clears the value of the "lang_id" field.
func (m *AnnouncementMutation) ClearLangID() {
	m.lang_id = nil
	m.clearedFields[announcement.FieldLangID] = struct{}{}
}

// LangIDCleared returns if the "lang_id" field was cleared in this mutation.
func (m *AnnouncementMutation) LangIDCleared() bool {
	_, ok := m.clearedFields[announcement.FieldLangID]
	return ok
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *AnnouncementMutation) ResetLangID() {
	m.lang_id = nil
	delete(m.clearedFields, announcement.FieldLangID)
}

// SetTitle sets the "title" field.
func (m *AnnouncementMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AnnouncementMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *AnnouncementMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[announcement.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *AnnouncementMutation) TitleCleared() bool {
	_, ok := m.clearedFields[announcement.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *AnnouncementMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, announcement.FieldTitle)
}

// SetContent sets the "content" field.
func (m *AnnouncementMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *AnnouncementMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *AnnouncementMutation) ClearContent() {
	m.content = nil
	m.clearedFields[announcement.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *AnnouncementMutation) ContentCleared() bool {
	_, ok := m.clearedFields[announcement.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *AnnouncementMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, announcement.FieldContent)
}

// SetChannel sets the "channel" field.
func (m *AnnouncementMutation) SetChannel(s string) {
	m.channel = &s
}

// Channel returns the value of the "channel" field in the mutation.
func (m *AnnouncementMutation) Channel() (r string, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ClearChannel clears the value of the "channel" field.
func (m *AnnouncementMutation) ClearChannel() {
	m.channel = nil
	m.clearedFields[announcement.FieldChannel] = struct{}{}
}

// ChannelCleared returns if the "channel" field was cleared in this mutation.
func (m *AnnouncementMutation) ChannelCleared() bool {
	_, ok := m.clearedFields[announcement.FieldChannel]
	return ok
}

// ResetChannel resets all changes to the "channel" field.
func (m *AnnouncementMutation) ResetChannel() {
	m.channel = nil
	delete(m.clearedFields, announcement.FieldChannel)
}

// SetStartAt sets the "start_at" field.
func (m *AnnouncementMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *AnnouncementMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *AnnouncementMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *AnnouncementMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *AnnouncementMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[announcement.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *AnnouncementMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[announcement.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *AnnouncementMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, announcement.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *AnnouncementMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *AnnouncementMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *AnnouncementMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *AnnouncementMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *AnnouncementMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[announcement.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *AnnouncementMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[announcement.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *AnnouncementMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, announcement.FieldEndAt)
}

// SetType sets the "type" field.
func (m *AnnouncementMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AnnouncementMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *AnnouncementMutation) ClearType() {
	m._type = nil
	m.clearedFields[announcement.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *AnnouncementMutation) TypeCleared() bool {
	_, ok := m.clearedFields[announcement.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *AnnouncementMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, announcement.FieldType)
}

// Where appends a list predicates to the AnnouncementMutation builder.
func (m *AnnouncementMutation) Where(ps ...predicate.Announcement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Announcement).
func (m *AnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, announcement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, announcement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, announcement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, announcement.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, announcement.FieldLangID)
	}
	if m.title != nil {
		fields = append(fields, announcement.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, announcement.FieldContent)
	}
	if m.channel != nil {
		fields = append(fields, announcement.FieldChannel)
	}
	if m.start_at != nil {
		fields = append(fields, announcement.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, announcement.FieldEndAt)
	}
	if m._type != nil {
		fields = append(fields, announcement.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.CreatedAt()
	case announcement.FieldUpdatedAt:
		return m.UpdatedAt()
	case announcement.FieldDeletedAt:
		return m.DeletedAt()
	case announcement.FieldAppID:
		return m.AppID()
	case announcement.FieldLangID:
		return m.LangID()
	case announcement.FieldTitle:
		return m.Title()
	case announcement.FieldContent:
		return m.Content()
	case announcement.FieldChannel:
		return m.Channel()
	case announcement.FieldStartAt:
		return m.StartAt()
	case announcement.FieldEndAt:
		return m.EndAt()
	case announcement.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case announcement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case announcement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case announcement.FieldAppID:
		return m.OldAppID(ctx)
	case announcement.FieldLangID:
		return m.OldLangID(ctx)
	case announcement.FieldTitle:
		return m.OldTitle(ctx)
	case announcement.FieldContent:
		return m.OldContent(ctx)
	case announcement.FieldChannel:
		return m.OldChannel(ctx)
	case announcement.FieldStartAt:
		return m.OldStartAt(ctx)
	case announcement.FieldEndAt:
		return m.OldEndAt(ctx)
	case announcement.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Announcement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case announcement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case announcement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case announcement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case announcement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case announcement.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case announcement.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case announcement.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case announcement.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case announcement.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case announcement.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case announcement.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, announcement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, announcement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, announcement.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, announcement.FieldStartAt)
	}
	if m.addend_at != nil {
		fields = append(fields, announcement.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case announcement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case announcement.FieldDeletedAt:
		return m.AddedDeletedAt()
	case announcement.FieldStartAt:
		return m.AddedStartAt()
	case announcement.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case announcement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case announcement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case announcement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case announcement.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case announcement.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Announcement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(announcement.FieldAppID) {
		fields = append(fields, announcement.FieldAppID)
	}
	if m.FieldCleared(announcement.FieldLangID) {
		fields = append(fields, announcement.FieldLangID)
	}
	if m.FieldCleared(announcement.FieldTitle) {
		fields = append(fields, announcement.FieldTitle)
	}
	if m.FieldCleared(announcement.FieldContent) {
		fields = append(fields, announcement.FieldContent)
	}
	if m.FieldCleared(announcement.FieldChannel) {
		fields = append(fields, announcement.FieldChannel)
	}
	if m.FieldCleared(announcement.FieldStartAt) {
		fields = append(fields, announcement.FieldStartAt)
	}
	if m.FieldCleared(announcement.FieldEndAt) {
		fields = append(fields, announcement.FieldEndAt)
	}
	if m.FieldCleared(announcement.FieldType) {
		fields = append(fields, announcement.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnouncementMutation) ClearField(name string) error {
	switch name {
	case announcement.FieldAppID:
		m.ClearAppID()
		return nil
	case announcement.FieldLangID:
		m.ClearLangID()
		return nil
	case announcement.FieldTitle:
		m.ClearTitle()
		return nil
	case announcement.FieldContent:
		m.ClearContent()
		return nil
	case announcement.FieldChannel:
		m.ClearChannel()
		return nil
	case announcement.FieldStartAt:
		m.ClearStartAt()
		return nil
	case announcement.FieldEndAt:
		m.ClearEndAt()
		return nil
	case announcement.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown Announcement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnnouncementMutation) ResetField(name string) error {
	switch name {
	case announcement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case announcement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case announcement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case announcement.FieldAppID:
		m.ResetAppID()
		return nil
	case announcement.FieldLangID:
		m.ResetLangID()
		return nil
	case announcement.FieldTitle:
		m.ResetTitle()
		return nil
	case announcement.FieldContent:
		m.ResetContent()
		return nil
	case announcement.FieldChannel:
		m.ResetChannel()
		return nil
	case announcement.FieldStartAt:
		m.ResetStartAt()
		return nil
	case announcement.FieldEndAt:
		m.ResetEndAt()
		return nil
	case announcement.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Announcement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Announcement edge %s", name)
}

// ContactMutation represents an operation that mutates the Contact nodes in the graph.
type ContactMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	used_for      *string
	sender        *string
	account       *string
	account_type  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Contact, error)
	predicates    []predicate.Contact
}

var _ ent.Mutation = (*ContactMutation)(nil)

// contactOption allows management of the mutation configuration using functional options.
type contactOption func(*ContactMutation)

// newContactMutation creates new mutation for the Contact entity.
func newContactMutation(c config, op Op, opts ...contactOption) *ContactMutation {
	m := &ContactMutation{
		config:        c,
		op:            op,
		typ:           TypeContact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContactID sets the ID field of the mutation.
func withContactID(id uuid.UUID) contactOption {
	return func(m *ContactMutation) {
		var (
			err   error
			once  sync.Once
			value *Contact
		)
		m.oldValue = func(ctx context.Context) (*Contact, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContact sets the old Contact of the mutation.
func withContact(node *Contact) contactOption {
	return func(m *ContactMutation) {
		m.oldValue = func(context.Context) (*Contact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Contact entities.
func (m *ContactMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContactMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContactMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contact.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ContactMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContactMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ContactMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ContactMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContactMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContactMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContactMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ContactMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ContactMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContactMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ContactMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ContactMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ContactMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ContactMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ContactMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ContactMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ContactMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ContactMutation) ResetAppID() {
	m.app_id = nil
}

// SetUsedFor sets the "used_for" field.
func (m *ContactMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *ContactMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *ContactMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[contact.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *ContactMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[contact.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *ContactMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, contact.FieldUsedFor)
}

// SetSender sets the "sender" field.
func (m *ContactMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *ContactMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ClearSender clears the value of the "sender" field.
func (m *ContactMutation) ClearSender() {
	m.sender = nil
	m.clearedFields[contact.FieldSender] = struct{}{}
}

// SenderCleared returns if the "sender" field was cleared in this mutation.
func (m *ContactMutation) SenderCleared() bool {
	_, ok := m.clearedFields[contact.FieldSender]
	return ok
}

// ResetSender resets all changes to the "sender" field.
func (m *ContactMutation) ResetSender() {
	m.sender = nil
	delete(m.clearedFields, contact.FieldSender)
}

// SetAccount sets the "account" field.
func (m *ContactMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *ContactMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ClearAccount clears the value of the "account" field.
func (m *ContactMutation) ClearAccount() {
	m.account = nil
	m.clearedFields[contact.FieldAccount] = struct{}{}
}

// AccountCleared returns if the "account" field was cleared in this mutation.
func (m *ContactMutation) AccountCleared() bool {
	_, ok := m.clearedFields[contact.FieldAccount]
	return ok
}

// ResetAccount resets all changes to the "account" field.
func (m *ContactMutation) ResetAccount() {
	m.account = nil
	delete(m.clearedFields, contact.FieldAccount)
}

// SetAccountType sets the "account_type" field.
func (m *ContactMutation) SetAccountType(s string) {
	m.account_type = &s
}

// AccountType returns the value of the "account_type" field in the mutation.
func (m *ContactMutation) AccountType() (r string, exists bool) {
	v := m.account_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountType returns the old "account_type" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldAccountType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountType: %w", err)
	}
	return oldValue.AccountType, nil
}

// ClearAccountType clears the value of the "account_type" field.
func (m *ContactMutation) ClearAccountType() {
	m.account_type = nil
	m.clearedFields[contact.FieldAccountType] = struct{}{}
}

// AccountTypeCleared returns if the "account_type" field was cleared in this mutation.
func (m *ContactMutation) AccountTypeCleared() bool {
	_, ok := m.clearedFields[contact.FieldAccountType]
	return ok
}

// ResetAccountType resets all changes to the "account_type" field.
func (m *ContactMutation) ResetAccountType() {
	m.account_type = nil
	delete(m.clearedFields, contact.FieldAccountType)
}

// Where appends a list predicates to the ContactMutation builder.
func (m *ContactMutation) Where(ps ...predicate.Contact) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContactMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contact).
func (m *ContactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContactMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, contact.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, contact.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, contact.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, contact.FieldAppID)
	}
	if m.used_for != nil {
		fields = append(fields, contact.FieldUsedFor)
	}
	if m.sender != nil {
		fields = append(fields, contact.FieldSender)
	}
	if m.account != nil {
		fields = append(fields, contact.FieldAccount)
	}
	if m.account_type != nil {
		fields = append(fields, contact.FieldAccountType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contact.FieldCreatedAt:
		return m.CreatedAt()
	case contact.FieldUpdatedAt:
		return m.UpdatedAt()
	case contact.FieldDeletedAt:
		return m.DeletedAt()
	case contact.FieldAppID:
		return m.AppID()
	case contact.FieldUsedFor:
		return m.UsedFor()
	case contact.FieldSender:
		return m.Sender()
	case contact.FieldAccount:
		return m.Account()
	case contact.FieldAccountType:
		return m.AccountType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case contact.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case contact.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case contact.FieldAppID:
		return m.OldAppID(ctx)
	case contact.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case contact.FieldSender:
		return m.OldSender(ctx)
	case contact.FieldAccount:
		return m.OldAccount(ctx)
	case contact.FieldAccountType:
		return m.OldAccountType(ctx)
	}
	return nil, fmt.Errorf("unknown Contact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contact.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case contact.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case contact.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case contact.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case contact.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case contact.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case contact.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case contact.FieldAccountType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountType(v)
		return nil
	}
	return fmt.Errorf("unknown Contact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContactMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, contact.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, contact.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, contact.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContactMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contact.FieldCreatedAt:
		return m.AddedCreatedAt()
	case contact.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case contact.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contact.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case contact.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case contact.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Contact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContactMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contact.FieldUsedFor) {
		fields = append(fields, contact.FieldUsedFor)
	}
	if m.FieldCleared(contact.FieldSender) {
		fields = append(fields, contact.FieldSender)
	}
	if m.FieldCleared(contact.FieldAccount) {
		fields = append(fields, contact.FieldAccount)
	}
	if m.FieldCleared(contact.FieldAccountType) {
		fields = append(fields, contact.FieldAccountType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContactMutation) ClearField(name string) error {
	switch name {
	case contact.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case contact.FieldSender:
		m.ClearSender()
		return nil
	case contact.FieldAccount:
		m.ClearAccount()
		return nil
	case contact.FieldAccountType:
		m.ClearAccountType()
		return nil
	}
	return fmt.Errorf("unknown Contact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContactMutation) ResetField(name string) error {
	switch name {
	case contact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case contact.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case contact.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case contact.FieldAppID:
		m.ResetAppID()
		return nil
	case contact.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case contact.FieldSender:
		m.ResetSender()
		return nil
	case contact.FieldAccount:
		m.ResetAccount()
		return nil
	case contact.FieldAccountType:
		m.ResetAccountType()
		return nil
	}
	return fmt.Errorf("unknown Contact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContactMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContactMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContactMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContactMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContactMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Contact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContactMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Contact edge %s", name)
}

// EmailTemplateMutation represents an operation that mutates the EmailTemplate nodes in the graph.
type EmailTemplateMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *uint32
	addcreated_at       *int32
	updated_at          *uint32
	addupdated_at       *int32
	deleted_at          *uint32
	adddeleted_at       *int32
	app_id              *uuid.UUID
	lang_id             *uuid.UUID
	default_to_username *string
	used_for            *string
	sender              *string
	reply_tos           *[]string
	cc_tos              *[]string
	subject             *string
	body                *string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*EmailTemplate, error)
	predicates          []predicate.EmailTemplate
}

var _ ent.Mutation = (*EmailTemplateMutation)(nil)

// emailtemplateOption allows management of the mutation configuration using functional options.
type emailtemplateOption func(*EmailTemplateMutation)

// newEmailTemplateMutation creates new mutation for the EmailTemplate entity.
func newEmailTemplateMutation(c config, op Op, opts ...emailtemplateOption) *EmailTemplateMutation {
	m := &EmailTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailTemplateID sets the ID field of the mutation.
func withEmailTemplateID(id uuid.UUID) emailtemplateOption {
	return func(m *EmailTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailTemplate
		)
		m.oldValue = func(ctx context.Context) (*EmailTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailTemplate sets the old EmailTemplate of the mutation.
func withEmailTemplate(node *EmailTemplate) emailtemplateOption {
	return func(m *EmailTemplateMutation) {
		m.oldValue = func(context.Context) (*EmailTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmailTemplate entities.
func (m *EmailTemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailTemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailTemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EmailTemplateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmailTemplateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *EmailTemplateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *EmailTemplateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmailTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmailTemplateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmailTemplateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *EmailTemplateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *EmailTemplateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmailTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EmailTemplateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EmailTemplateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *EmailTemplateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *EmailTemplateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EmailTemplateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *EmailTemplateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *EmailTemplateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *EmailTemplateMutation) ResetAppID() {
	m.app_id = nil
}

// SetLangID sets the "lang_id" field.
func (m *EmailTemplateMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *EmailTemplateMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *EmailTemplateMutation) ResetLangID() {
	m.lang_id = nil
}

// SetDefaultToUsername sets the "default_to_username" field.
func (m *EmailTemplateMutation) SetDefaultToUsername(s string) {
	m.default_to_username = &s
}

// DefaultToUsername returns the value of the "default_to_username" field in the mutation.
func (m *EmailTemplateMutation) DefaultToUsername() (r string, exists bool) {
	v := m.default_to_username
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultToUsername returns the old "default_to_username" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldDefaultToUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultToUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultToUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultToUsername: %w", err)
	}
	return oldValue.DefaultToUsername, nil
}

// ResetDefaultToUsername resets all changes to the "default_to_username" field.
func (m *EmailTemplateMutation) ResetDefaultToUsername() {
	m.default_to_username = nil
}

// SetUsedFor sets the "used_for" field.
func (m *EmailTemplateMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *EmailTemplateMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *EmailTemplateMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[emailtemplate.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *EmailTemplateMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *EmailTemplateMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, emailtemplate.FieldUsedFor)
}

// SetSender sets the "sender" field.
func (m *EmailTemplateMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *EmailTemplateMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ClearSender clears the value of the "sender" field.
func (m *EmailTemplateMutation) ClearSender() {
	m.sender = nil
	m.clearedFields[emailtemplate.FieldSender] = struct{}{}
}

// SenderCleared returns if the "sender" field was cleared in this mutation.
func (m *EmailTemplateMutation) SenderCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldSender]
	return ok
}

// ResetSender resets all changes to the "sender" field.
func (m *EmailTemplateMutation) ResetSender() {
	m.sender = nil
	delete(m.clearedFields, emailtemplate.FieldSender)
}

// SetReplyTos sets the "reply_tos" field.
func (m *EmailTemplateMutation) SetReplyTos(s []string) {
	m.reply_tos = &s
}

// ReplyTos returns the value of the "reply_tos" field in the mutation.
func (m *EmailTemplateMutation) ReplyTos() (r []string, exists bool) {
	v := m.reply_tos
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyTos returns the old "reply_tos" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldReplyTos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplyTos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplyTos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyTos: %w", err)
	}
	return oldValue.ReplyTos, nil
}

// ClearReplyTos clears the value of the "reply_tos" field.
func (m *EmailTemplateMutation) ClearReplyTos() {
	m.reply_tos = nil
	m.clearedFields[emailtemplate.FieldReplyTos] = struct{}{}
}

// ReplyTosCleared returns if the "reply_tos" field was cleared in this mutation.
func (m *EmailTemplateMutation) ReplyTosCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldReplyTos]
	return ok
}

// ResetReplyTos resets all changes to the "reply_tos" field.
func (m *EmailTemplateMutation) ResetReplyTos() {
	m.reply_tos = nil
	delete(m.clearedFields, emailtemplate.FieldReplyTos)
}

// SetCcTos sets the "cc_tos" field.
func (m *EmailTemplateMutation) SetCcTos(s []string) {
	m.cc_tos = &s
}

// CcTos returns the value of the "cc_tos" field in the mutation.
func (m *EmailTemplateMutation) CcTos() (r []string, exists bool) {
	v := m.cc_tos
	if v == nil {
		return
	}
	return *v, true
}

// OldCcTos returns the old "cc_tos" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldCcTos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCcTos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCcTos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCcTos: %w", err)
	}
	return oldValue.CcTos, nil
}

// ClearCcTos clears the value of the "cc_tos" field.
func (m *EmailTemplateMutation) ClearCcTos() {
	m.cc_tos = nil
	m.clearedFields[emailtemplate.FieldCcTos] = struct{}{}
}

// CcTosCleared returns if the "cc_tos" field was cleared in this mutation.
func (m *EmailTemplateMutation) CcTosCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldCcTos]
	return ok
}

// ResetCcTos resets all changes to the "cc_tos" field.
func (m *EmailTemplateMutation) ResetCcTos() {
	m.cc_tos = nil
	delete(m.clearedFields, emailtemplate.FieldCcTos)
}

// SetSubject sets the "subject" field.
func (m *EmailTemplateMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *EmailTemplateMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *EmailTemplateMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[emailtemplate.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *EmailTemplateMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *EmailTemplateMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, emailtemplate.FieldSubject)
}

// SetBody sets the "body" field.
func (m *EmailTemplateMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *EmailTemplateMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the EmailTemplate entity.
// If the EmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailTemplateMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ClearBody clears the value of the "body" field.
func (m *EmailTemplateMutation) ClearBody() {
	m.body = nil
	m.clearedFields[emailtemplate.FieldBody] = struct{}{}
}

// BodyCleared returns if the "body" field was cleared in this mutation.
func (m *EmailTemplateMutation) BodyCleared() bool {
	_, ok := m.clearedFields[emailtemplate.FieldBody]
	return ok
}

// ResetBody resets all changes to the "body" field.
func (m *EmailTemplateMutation) ResetBody() {
	m.body = nil
	delete(m.clearedFields, emailtemplate.FieldBody)
}

// Where appends a list predicates to the EmailTemplateMutation builder.
func (m *EmailTemplateMutation) Where(ps ...predicate.EmailTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EmailTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmailTemplate).
func (m *EmailTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailTemplateMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, emailtemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, emailtemplate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, emailtemplate.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, emailtemplate.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, emailtemplate.FieldLangID)
	}
	if m.default_to_username != nil {
		fields = append(fields, emailtemplate.FieldDefaultToUsername)
	}
	if m.used_for != nil {
		fields = append(fields, emailtemplate.FieldUsedFor)
	}
	if m.sender != nil {
		fields = append(fields, emailtemplate.FieldSender)
	}
	if m.reply_tos != nil {
		fields = append(fields, emailtemplate.FieldReplyTos)
	}
	if m.cc_tos != nil {
		fields = append(fields, emailtemplate.FieldCcTos)
	}
	if m.subject != nil {
		fields = append(fields, emailtemplate.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, emailtemplate.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emailtemplate.FieldCreatedAt:
		return m.CreatedAt()
	case emailtemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case emailtemplate.FieldDeletedAt:
		return m.DeletedAt()
	case emailtemplate.FieldAppID:
		return m.AppID()
	case emailtemplate.FieldLangID:
		return m.LangID()
	case emailtemplate.FieldDefaultToUsername:
		return m.DefaultToUsername()
	case emailtemplate.FieldUsedFor:
		return m.UsedFor()
	case emailtemplate.FieldSender:
		return m.Sender()
	case emailtemplate.FieldReplyTos:
		return m.ReplyTos()
	case emailtemplate.FieldCcTos:
		return m.CcTos()
	case emailtemplate.FieldSubject:
		return m.Subject()
	case emailtemplate.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emailtemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case emailtemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case emailtemplate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case emailtemplate.FieldAppID:
		return m.OldAppID(ctx)
	case emailtemplate.FieldLangID:
		return m.OldLangID(ctx)
	case emailtemplate.FieldDefaultToUsername:
		return m.OldDefaultToUsername(ctx)
	case emailtemplate.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case emailtemplate.FieldSender:
		return m.OldSender(ctx)
	case emailtemplate.FieldReplyTos:
		return m.OldReplyTos(ctx)
	case emailtemplate.FieldCcTos:
		return m.OldCcTos(ctx)
	case emailtemplate.FieldSubject:
		return m.OldSubject(ctx)
	case emailtemplate.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown EmailTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emailtemplate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case emailtemplate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case emailtemplate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case emailtemplate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case emailtemplate.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case emailtemplate.FieldDefaultToUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultToUsername(v)
		return nil
	case emailtemplate.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case emailtemplate.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case emailtemplate.FieldReplyTos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyTos(v)
		return nil
	case emailtemplate.FieldCcTos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCcTos(v)
		return nil
	case emailtemplate.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case emailtemplate.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown EmailTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, emailtemplate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, emailtemplate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, emailtemplate.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case emailtemplate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case emailtemplate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case emailtemplate.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case emailtemplate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case emailtemplate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case emailtemplate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown EmailTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emailtemplate.FieldUsedFor) {
		fields = append(fields, emailtemplate.FieldUsedFor)
	}
	if m.FieldCleared(emailtemplate.FieldSender) {
		fields = append(fields, emailtemplate.FieldSender)
	}
	if m.FieldCleared(emailtemplate.FieldReplyTos) {
		fields = append(fields, emailtemplate.FieldReplyTos)
	}
	if m.FieldCleared(emailtemplate.FieldCcTos) {
		fields = append(fields, emailtemplate.FieldCcTos)
	}
	if m.FieldCleared(emailtemplate.FieldSubject) {
		fields = append(fields, emailtemplate.FieldSubject)
	}
	if m.FieldCleared(emailtemplate.FieldBody) {
		fields = append(fields, emailtemplate.FieldBody)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailTemplateMutation) ClearField(name string) error {
	switch name {
	case emailtemplate.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case emailtemplate.FieldSender:
		m.ClearSender()
		return nil
	case emailtemplate.FieldReplyTos:
		m.ClearReplyTos()
		return nil
	case emailtemplate.FieldCcTos:
		m.ClearCcTos()
		return nil
	case emailtemplate.FieldSubject:
		m.ClearSubject()
		return nil
	case emailtemplate.FieldBody:
		m.ClearBody()
		return nil
	}
	return fmt.Errorf("unknown EmailTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailTemplateMutation) ResetField(name string) error {
	switch name {
	case emailtemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case emailtemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case emailtemplate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case emailtemplate.FieldAppID:
		m.ResetAppID()
		return nil
	case emailtemplate.FieldLangID:
		m.ResetLangID()
		return nil
	case emailtemplate.FieldDefaultToUsername:
		m.ResetDefaultToUsername()
		return nil
	case emailtemplate.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case emailtemplate.FieldSender:
		m.ResetSender()
		return nil
	case emailtemplate.FieldReplyTos:
		m.ResetReplyTos()
		return nil
	case emailtemplate.FieldCcTos:
		m.ResetCcTos()
		return nil
	case emailtemplate.FieldSubject:
		m.ResetSubject()
		return nil
	case emailtemplate.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown EmailTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmailTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmailTemplate edge %s", name)
}

// FrontendTemplateMutation represents an operation that mutates the FrontendTemplate nodes in the graph.
type FrontendTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	lang_id       *uuid.UUID
	used_for      *string
	title         *string
	content       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FrontendTemplate, error)
	predicates    []predicate.FrontendTemplate
}

var _ ent.Mutation = (*FrontendTemplateMutation)(nil)

// frontendtemplateOption allows management of the mutation configuration using functional options.
type frontendtemplateOption func(*FrontendTemplateMutation)

// newFrontendTemplateMutation creates new mutation for the FrontendTemplate entity.
func newFrontendTemplateMutation(c config, op Op, opts ...frontendtemplateOption) *FrontendTemplateMutation {
	m := &FrontendTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeFrontendTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFrontendTemplateID sets the ID field of the mutation.
func withFrontendTemplateID(id uuid.UUID) frontendtemplateOption {
	return func(m *FrontendTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *FrontendTemplate
		)
		m.oldValue = func(ctx context.Context) (*FrontendTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FrontendTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFrontendTemplate sets the old FrontendTemplate of the mutation.
func withFrontendTemplate(node *FrontendTemplate) frontendtemplateOption {
	return func(m *FrontendTemplateMutation) {
		m.oldValue = func(context.Context) (*FrontendTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FrontendTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FrontendTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FrontendTemplate entities.
func (m *FrontendTemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FrontendTemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FrontendTemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FrontendTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FrontendTemplateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FrontendTemplateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *FrontendTemplateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *FrontendTemplateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FrontendTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FrontendTemplateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FrontendTemplateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *FrontendTemplateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *FrontendTemplateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FrontendTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FrontendTemplateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FrontendTemplateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *FrontendTemplateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *FrontendTemplateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FrontendTemplateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *FrontendTemplateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *FrontendTemplateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *FrontendTemplateMutation) ResetAppID() {
	m.app_id = nil
}

// SetLangID sets the "lang_id" field.
func (m *FrontendTemplateMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *FrontendTemplateMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *FrontendTemplateMutation) ResetLangID() {
	m.lang_id = nil
}

// SetUsedFor sets the "used_for" field.
func (m *FrontendTemplateMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *FrontendTemplateMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *FrontendTemplateMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[frontendtemplate.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *FrontendTemplateMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[frontendtemplate.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *FrontendTemplateMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, frontendtemplate.FieldUsedFor)
}

// SetTitle sets the "title" field.
func (m *FrontendTemplateMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FrontendTemplateMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *FrontendTemplateMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[frontendtemplate.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *FrontendTemplateMutation) TitleCleared() bool {
	_, ok := m.clearedFields[frontendtemplate.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *FrontendTemplateMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, frontendtemplate.FieldTitle)
}

// SetContent sets the "content" field.
func (m *FrontendTemplateMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *FrontendTemplateMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the FrontendTemplate entity.
// If the FrontendTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrontendTemplateMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *FrontendTemplateMutation) ClearContent() {
	m.content = nil
	m.clearedFields[frontendtemplate.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *FrontendTemplateMutation) ContentCleared() bool {
	_, ok := m.clearedFields[frontendtemplate.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *FrontendTemplateMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, frontendtemplate.FieldContent)
}

// Where appends a list predicates to the FrontendTemplateMutation builder.
func (m *FrontendTemplateMutation) Where(ps ...predicate.FrontendTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FrontendTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FrontendTemplate).
func (m *FrontendTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FrontendTemplateMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, frontendtemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, frontendtemplate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, frontendtemplate.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, frontendtemplate.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, frontendtemplate.FieldLangID)
	}
	if m.used_for != nil {
		fields = append(fields, frontendtemplate.FieldUsedFor)
	}
	if m.title != nil {
		fields = append(fields, frontendtemplate.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, frontendtemplate.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FrontendTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		return m.CreatedAt()
	case frontendtemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case frontendtemplate.FieldDeletedAt:
		return m.DeletedAt()
	case frontendtemplate.FieldAppID:
		return m.AppID()
	case frontendtemplate.FieldLangID:
		return m.LangID()
	case frontendtemplate.FieldUsedFor:
		return m.UsedFor()
	case frontendtemplate.FieldTitle:
		return m.Title()
	case frontendtemplate.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FrontendTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case frontendtemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case frontendtemplate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case frontendtemplate.FieldAppID:
		return m.OldAppID(ctx)
	case frontendtemplate.FieldLangID:
		return m.OldLangID(ctx)
	case frontendtemplate.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case frontendtemplate.FieldTitle:
		return m.OldTitle(ctx)
	case frontendtemplate.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown FrontendTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FrontendTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case frontendtemplate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case frontendtemplate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case frontendtemplate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case frontendtemplate.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case frontendtemplate.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case frontendtemplate.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case frontendtemplate.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown FrontendTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FrontendTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, frontendtemplate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, frontendtemplate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, frontendtemplate.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FrontendTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case frontendtemplate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case frontendtemplate.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FrontendTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case frontendtemplate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case frontendtemplate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FrontendTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FrontendTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(frontendtemplate.FieldUsedFor) {
		fields = append(fields, frontendtemplate.FieldUsedFor)
	}
	if m.FieldCleared(frontendtemplate.FieldTitle) {
		fields = append(fields, frontendtemplate.FieldTitle)
	}
	if m.FieldCleared(frontendtemplate.FieldContent) {
		fields = append(fields, frontendtemplate.FieldContent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FrontendTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FrontendTemplateMutation) ClearField(name string) error {
	switch name {
	case frontendtemplate.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case frontendtemplate.FieldTitle:
		m.ClearTitle()
		return nil
	case frontendtemplate.FieldContent:
		m.ClearContent()
		return nil
	}
	return fmt.Errorf("unknown FrontendTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FrontendTemplateMutation) ResetField(name string) error {
	switch name {
	case frontendtemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case frontendtemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case frontendtemplate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case frontendtemplate.FieldAppID:
		m.ResetAppID()
		return nil
	case frontendtemplate.FieldLangID:
		m.ResetLangID()
		return nil
	case frontendtemplate.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case frontendtemplate.FieldTitle:
		m.ResetTitle()
		return nil
	case frontendtemplate.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown FrontendTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FrontendTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FrontendTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FrontendTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FrontendTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FrontendTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FrontendTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FrontendTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FrontendTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FrontendTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FrontendTemplate edge %s", name)
}

// GoodBenefitMutation represents an operation that mutates the GoodBenefit nodes in the graph.
type GoodBenefitMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	good_id         *uuid.UUID
	good_name       *string
	amount          *string
	state           *string
	message         *string
	benefit_date    *uint32
	addbenefit_date *int32
	tx_id           *uuid.UUID
	generated       *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*GoodBenefit, error)
	predicates      []predicate.GoodBenefit
}

var _ ent.Mutation = (*GoodBenefitMutation)(nil)

// goodbenefitOption allows management of the mutation configuration using functional options.
type goodbenefitOption func(*GoodBenefitMutation)

// newGoodBenefitMutation creates new mutation for the GoodBenefit entity.
func newGoodBenefitMutation(c config, op Op, opts ...goodbenefitOption) *GoodBenefitMutation {
	m := &GoodBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodBenefitID sets the ID field of the mutation.
func withGoodBenefitID(id uuid.UUID) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodBenefit
		)
		m.oldValue = func(ctx context.Context) (*GoodBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodBenefit sets the old GoodBenefit of the mutation.
func withGoodBenefit(node *GoodBenefit) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		m.oldValue = func(context.Context) (*GoodBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodBenefit entities.
func (m *GoodBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoodBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoodBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GoodBenefitMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GoodBenefitMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *GoodBenefitMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *GoodBenefitMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GoodBenefitMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GoodBenefitMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GoodBenefitMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *GoodBenefitMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *GoodBenefitMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GoodBenefitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GoodBenefitMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GoodBenefitMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *GoodBenefitMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *GoodBenefitMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GoodBenefitMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *GoodBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *GoodBenefitMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[goodbenefit.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *GoodBenefitMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodBenefitMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, goodbenefit.FieldGoodID)
}

// SetGoodName sets the "good_name" field.
func (m *GoodBenefitMutation) SetGoodName(s string) {
	m.good_name = &s
}

// GoodName returns the value of the "good_name" field in the mutation.
func (m *GoodBenefitMutation) GoodName() (r string, exists bool) {
	v := m.good_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodName returns the old "good_name" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldGoodName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodName: %w", err)
	}
	return oldValue.GoodName, nil
}

// ClearGoodName clears the value of the "good_name" field.
func (m *GoodBenefitMutation) ClearGoodName() {
	m.good_name = nil
	m.clearedFields[goodbenefit.FieldGoodName] = struct{}{}
}

// GoodNameCleared returns if the "good_name" field was cleared in this mutation.
func (m *GoodBenefitMutation) GoodNameCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldGoodName]
	return ok
}

// ResetGoodName resets all changes to the "good_name" field.
func (m *GoodBenefitMutation) ResetGoodName() {
	m.good_name = nil
	delete(m.clearedFields, goodbenefit.FieldGoodName)
}

// SetAmount sets the "amount" field.
func (m *GoodBenefitMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *GoodBenefitMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *GoodBenefitMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[goodbenefit.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *GoodBenefitMutation) AmountCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *GoodBenefitMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, goodbenefit.FieldAmount)
}

// SetState sets the "state" field.
func (m *GoodBenefitMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *GoodBenefitMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *GoodBenefitMutation) ClearState() {
	m.state = nil
	m.clearedFields[goodbenefit.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *GoodBenefitMutation) StateCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *GoodBenefitMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, goodbenefit.FieldState)
}

// SetMessage sets the "message" field.
func (m *GoodBenefitMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *GoodBenefitMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *GoodBenefitMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[goodbenefit.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *GoodBenefitMutation) MessageCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *GoodBenefitMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, goodbenefit.FieldMessage)
}

// SetBenefitDate sets the "benefit_date" field.
func (m *GoodBenefitMutation) SetBenefitDate(u uint32) {
	m.benefit_date = &u
	m.addbenefit_date = nil
}

// BenefitDate returns the value of the "benefit_date" field in the mutation.
func (m *GoodBenefitMutation) BenefitDate() (r uint32, exists bool) {
	v := m.benefit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitDate returns the old "benefit_date" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldBenefitDate(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitDate: %w", err)
	}
	return oldValue.BenefitDate, nil
}

// AddBenefitDate adds u to the "benefit_date" field.
func (m *GoodBenefitMutation) AddBenefitDate(u int32) {
	if m.addbenefit_date != nil {
		*m.addbenefit_date += u
	} else {
		m.addbenefit_date = &u
	}
}

// AddedBenefitDate returns the value that was added to the "benefit_date" field in this mutation.
func (m *GoodBenefitMutation) AddedBenefitDate() (r int32, exists bool) {
	v := m.addbenefit_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (m *GoodBenefitMutation) ClearBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	m.clearedFields[goodbenefit.FieldBenefitDate] = struct{}{}
}

// BenefitDateCleared returns if the "benefit_date" field was cleared in this mutation.
func (m *GoodBenefitMutation) BenefitDateCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldBenefitDate]
	return ok
}

// ResetBenefitDate resets all changes to the "benefit_date" field.
func (m *GoodBenefitMutation) ResetBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	delete(m.clearedFields, goodbenefit.FieldBenefitDate)
}

// SetTxID sets the "tx_id" field.
func (m *GoodBenefitMutation) SetTxID(u uuid.UUID) {
	m.tx_id = &u
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *GoodBenefitMutation) TxID() (r uuid.UUID, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldTxID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// ClearTxID clears the value of the "tx_id" field.
func (m *GoodBenefitMutation) ClearTxID() {
	m.tx_id = nil
	m.clearedFields[goodbenefit.FieldTxID] = struct{}{}
}

// TxIDCleared returns if the "tx_id" field was cleared in this mutation.
func (m *GoodBenefitMutation) TxIDCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldTxID]
	return ok
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *GoodBenefitMutation) ResetTxID() {
	m.tx_id = nil
	delete(m.clearedFields, goodbenefit.FieldTxID)
}

// SetGenerated sets the "generated" field.
func (m *GoodBenefitMutation) SetGenerated(b bool) {
	m.generated = &b
}

// Generated returns the value of the "generated" field in the mutation.
func (m *GoodBenefitMutation) Generated() (r bool, exists bool) {
	v := m.generated
	if v == nil {
		return
	}
	return *v, true
}

// OldGenerated returns the old "generated" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldGenerated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenerated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenerated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenerated: %w", err)
	}
	return oldValue.Generated, nil
}

// ClearGenerated clears the value of the "generated" field.
func (m *GoodBenefitMutation) ClearGenerated() {
	m.generated = nil
	m.clearedFields[goodbenefit.FieldGenerated] = struct{}{}
}

// GeneratedCleared returns if the "generated" field was cleared in this mutation.
func (m *GoodBenefitMutation) GeneratedCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldGenerated]
	return ok
}

// ResetGenerated resets all changes to the "generated" field.
func (m *GoodBenefitMutation) ResetGenerated() {
	m.generated = nil
	delete(m.clearedFields, goodbenefit.FieldGenerated)
}

// Where appends a list predicates to the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Where(ps ...predicate.GoodBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodBenefit).
func (m *GoodBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodBenefitMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, goodbenefit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, goodbenefit.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, goodbenefit.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, goodbenefit.FieldGoodID)
	}
	if m.good_name != nil {
		fields = append(fields, goodbenefit.FieldGoodName)
	}
	if m.amount != nil {
		fields = append(fields, goodbenefit.FieldAmount)
	}
	if m.state != nil {
		fields = append(fields, goodbenefit.FieldState)
	}
	if m.message != nil {
		fields = append(fields, goodbenefit.FieldMessage)
	}
	if m.benefit_date != nil {
		fields = append(fields, goodbenefit.FieldBenefitDate)
	}
	if m.tx_id != nil {
		fields = append(fields, goodbenefit.FieldTxID)
	}
	if m.generated != nil {
		fields = append(fields, goodbenefit.FieldGenerated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.CreatedAt()
	case goodbenefit.FieldUpdatedAt:
		return m.UpdatedAt()
	case goodbenefit.FieldDeletedAt:
		return m.DeletedAt()
	case goodbenefit.FieldGoodID:
		return m.GoodID()
	case goodbenefit.FieldGoodName:
		return m.GoodName()
	case goodbenefit.FieldAmount:
		return m.Amount()
	case goodbenefit.FieldState:
		return m.State()
	case goodbenefit.FieldMessage:
		return m.Message()
	case goodbenefit.FieldBenefitDate:
		return m.BenefitDate()
	case goodbenefit.FieldTxID:
		return m.TxID()
	case goodbenefit.FieldGenerated:
		return m.Generated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case goodbenefit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case goodbenefit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case goodbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodbenefit.FieldGoodName:
		return m.OldGoodName(ctx)
	case goodbenefit.FieldAmount:
		return m.OldAmount(ctx)
	case goodbenefit.FieldState:
		return m.OldState(ctx)
	case goodbenefit.FieldMessage:
		return m.OldMessage(ctx)
	case goodbenefit.FieldBenefitDate:
		return m.OldBenefitDate(ctx)
	case goodbenefit.FieldTxID:
		return m.OldTxID(ctx)
	case goodbenefit.FieldGenerated:
		return m.OldGenerated(ctx)
	}
	return nil, fmt.Errorf("unknown GoodBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case goodbenefit.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case goodbenefit.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case goodbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodbenefit.FieldGoodName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodName(v)
		return nil
	case goodbenefit.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case goodbenefit.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case goodbenefit.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case goodbenefit.FieldBenefitDate:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitDate(v)
		return nil
	case goodbenefit.FieldTxID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case goodbenefit.FieldGenerated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenerated(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, goodbenefit.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, goodbenefit.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, goodbenefit.FieldDeletedAt)
	}
	if m.addbenefit_date != nil {
		fields = append(fields, goodbenefit.FieldBenefitDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.AddedCreatedAt()
	case goodbenefit.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case goodbenefit.FieldDeletedAt:
		return m.AddedDeletedAt()
	case goodbenefit.FieldBenefitDate:
		return m.AddedBenefitDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case goodbenefit.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case goodbenefit.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case goodbenefit.FieldBenefitDate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodBenefitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goodbenefit.FieldGoodID) {
		fields = append(fields, goodbenefit.FieldGoodID)
	}
	if m.FieldCleared(goodbenefit.FieldGoodName) {
		fields = append(fields, goodbenefit.FieldGoodName)
	}
	if m.FieldCleared(goodbenefit.FieldAmount) {
		fields = append(fields, goodbenefit.FieldAmount)
	}
	if m.FieldCleared(goodbenefit.FieldState) {
		fields = append(fields, goodbenefit.FieldState)
	}
	if m.FieldCleared(goodbenefit.FieldMessage) {
		fields = append(fields, goodbenefit.FieldMessage)
	}
	if m.FieldCleared(goodbenefit.FieldBenefitDate) {
		fields = append(fields, goodbenefit.FieldBenefitDate)
	}
	if m.FieldCleared(goodbenefit.FieldTxID) {
		fields = append(fields, goodbenefit.FieldTxID)
	}
	if m.FieldCleared(goodbenefit.FieldGenerated) {
		fields = append(fields, goodbenefit.FieldGenerated)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ClearField(name string) error {
	switch name {
	case goodbenefit.FieldGoodID:
		m.ClearGoodID()
		return nil
	case goodbenefit.FieldGoodName:
		m.ClearGoodName()
		return nil
	case goodbenefit.FieldAmount:
		m.ClearAmount()
		return nil
	case goodbenefit.FieldState:
		m.ClearState()
		return nil
	case goodbenefit.FieldMessage:
		m.ClearMessage()
		return nil
	case goodbenefit.FieldBenefitDate:
		m.ClearBenefitDate()
		return nil
	case goodbenefit.FieldTxID:
		m.ClearTxID()
		return nil
	case goodbenefit.FieldGenerated:
		m.ClearGenerated()
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ResetField(name string) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case goodbenefit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case goodbenefit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case goodbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodbenefit.FieldGoodName:
		m.ResetGoodName()
		return nil
	case goodbenefit.FieldAmount:
		m.ResetAmount()
		return nil
	case goodbenefit.FieldState:
		m.ResetState()
		return nil
	case goodbenefit.FieldMessage:
		m.ResetMessage()
		return nil
	case goodbenefit.FieldBenefitDate:
		m.ResetBenefitDate()
		return nil
	case goodbenefit.FieldTxID:
		m.ResetTxID()
		return nil
	case goodbenefit.FieldGenerated:
		m.ResetGenerated()
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit edge %s", name)
}

// NotifMutation represents an operation that mutates the Notif nodes in the graph.
type NotifMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	notified      *bool
	lang_id       *uuid.UUID
	event_id      *uuid.UUID
	event_type    *string
	use_template  *bool
	title         *string
	content       *string
	channel       *string
	extra         *string
	_type         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Notif, error)
	predicates    []predicate.Notif
}

var _ ent.Mutation = (*NotifMutation)(nil)

// notifOption allows management of the mutation configuration using functional options.
type notifOption func(*NotifMutation)

// newNotifMutation creates new mutation for the Notif entity.
func newNotifMutation(c config, op Op, opts ...notifOption) *NotifMutation {
	m := &NotifMutation{
		config:        c,
		op:            op,
		typ:           TypeNotif,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifID sets the ID field of the mutation.
func withNotifID(id uuid.UUID) notifOption {
	return func(m *NotifMutation) {
		var (
			err   error
			once  sync.Once
			value *Notif
		)
		m.oldValue = func(ctx context.Context) (*Notif, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notif.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotif sets the old Notif of the mutation.
func withNotif(node *Notif) notifOption {
	return func(m *NotifMutation) {
		m.oldValue = func(context.Context) (*Notif, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notif entities.
func (m *NotifMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notif.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotifMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotifMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *NotifMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *NotifMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotifMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotifMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotifMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *NotifMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *NotifMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotifMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotifMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotifMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *NotifMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *NotifMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotifMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *NotifMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *NotifMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *NotifMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[notif.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *NotifMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *NotifMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, notif.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *NotifMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *NotifMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *NotifMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[notif.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *NotifMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *NotifMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, notif.FieldUserID)
}

// SetNotified sets the "notified" field.
func (m *NotifMutation) SetNotified(b bool) {
	m.notified = &b
}

// Notified returns the value of the "notified" field in the mutation.
func (m *NotifMutation) Notified() (r bool, exists bool) {
	v := m.notified
	if v == nil {
		return
	}
	return *v, true
}

// OldNotified returns the old "notified" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldNotified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotified: %w", err)
	}
	return oldValue.Notified, nil
}

// ClearNotified clears the value of the "notified" field.
func (m *NotifMutation) ClearNotified() {
	m.notified = nil
	m.clearedFields[notif.FieldNotified] = struct{}{}
}

// NotifiedCleared returns if the "notified" field was cleared in this mutation.
func (m *NotifMutation) NotifiedCleared() bool {
	_, ok := m.clearedFields[notif.FieldNotified]
	return ok
}

// ResetNotified resets all changes to the "notified" field.
func (m *NotifMutation) ResetNotified() {
	m.notified = nil
	delete(m.clearedFields, notif.FieldNotified)
}

// SetLangID sets the "lang_id" field.
func (m *NotifMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *NotifMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ClearLangID clears the value of the "lang_id" field.
func (m *NotifMutation) ClearLangID() {
	m.lang_id = nil
	m.clearedFields[notif.FieldLangID] = struct{}{}
}

// LangIDCleared returns if the "lang_id" field was cleared in this mutation.
func (m *NotifMutation) LangIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldLangID]
	return ok
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *NotifMutation) ResetLangID() {
	m.lang_id = nil
	delete(m.clearedFields, notif.FieldLangID)
}

// SetEventID sets the "event_id" field.
func (m *NotifMutation) SetEventID(u uuid.UUID) {
	m.event_id = &u
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *NotifMutation) EventID() (r uuid.UUID, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldEventID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ClearEventID clears the value of the "event_id" field.
func (m *NotifMutation) ClearEventID() {
	m.event_id = nil
	m.clearedFields[notif.FieldEventID] = struct{}{}
}

// EventIDCleared returns if the "event_id" field was cleared in this mutation.
func (m *NotifMutation) EventIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldEventID]
	return ok
}

// ResetEventID resets all changes to the "event_id" field.
func (m *NotifMutation) ResetEventID() {
	m.event_id = nil
	delete(m.clearedFields, notif.FieldEventID)
}

// SetEventType sets the "event_type" field.
func (m *NotifMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *NotifMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ClearEventType clears the value of the "event_type" field.
func (m *NotifMutation) ClearEventType() {
	m.event_type = nil
	m.clearedFields[notif.FieldEventType] = struct{}{}
}

// EventTypeCleared returns if the "event_type" field was cleared in this mutation.
func (m *NotifMutation) EventTypeCleared() bool {
	_, ok := m.clearedFields[notif.FieldEventType]
	return ok
}

// ResetEventType resets all changes to the "event_type" field.
func (m *NotifMutation) ResetEventType() {
	m.event_type = nil
	delete(m.clearedFields, notif.FieldEventType)
}

// SetUseTemplate sets the "use_template" field.
func (m *NotifMutation) SetUseTemplate(b bool) {
	m.use_template = &b
}

// UseTemplate returns the value of the "use_template" field in the mutation.
func (m *NotifMutation) UseTemplate() (r bool, exists bool) {
	v := m.use_template
	if v == nil {
		return
	}
	return *v, true
}

// OldUseTemplate returns the old "use_template" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUseTemplate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseTemplate: %w", err)
	}
	return oldValue.UseTemplate, nil
}

// ClearUseTemplate clears the value of the "use_template" field.
func (m *NotifMutation) ClearUseTemplate() {
	m.use_template = nil
	m.clearedFields[notif.FieldUseTemplate] = struct{}{}
}

// UseTemplateCleared returns if the "use_template" field was cleared in this mutation.
func (m *NotifMutation) UseTemplateCleared() bool {
	_, ok := m.clearedFields[notif.FieldUseTemplate]
	return ok
}

// ResetUseTemplate resets all changes to the "use_template" field.
func (m *NotifMutation) ResetUseTemplate() {
	m.use_template = nil
	delete(m.clearedFields, notif.FieldUseTemplate)
}

// SetTitle sets the "title" field.
func (m *NotifMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *NotifMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *NotifMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[notif.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *NotifMutation) TitleCleared() bool {
	_, ok := m.clearedFields[notif.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *NotifMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, notif.FieldTitle)
}

// SetContent sets the "content" field.
func (m *NotifMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *NotifMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *NotifMutation) ClearContent() {
	m.content = nil
	m.clearedFields[notif.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *NotifMutation) ContentCleared() bool {
	_, ok := m.clearedFields[notif.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *NotifMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, notif.FieldContent)
}

// SetChannel sets the "channel" field.
func (m *NotifMutation) SetChannel(s string) {
	m.channel = &s
}

// Channel returns the value of the "channel" field in the mutation.
func (m *NotifMutation) Channel() (r string, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ClearChannel clears the value of the "channel" field.
func (m *NotifMutation) ClearChannel() {
	m.channel = nil
	m.clearedFields[notif.FieldChannel] = struct{}{}
}

// ChannelCleared returns if the "channel" field was cleared in this mutation.
func (m *NotifMutation) ChannelCleared() bool {
	_, ok := m.clearedFields[notif.FieldChannel]
	return ok
}

// ResetChannel resets all changes to the "channel" field.
func (m *NotifMutation) ResetChannel() {
	m.channel = nil
	delete(m.clearedFields, notif.FieldChannel)
}

// SetExtra sets the "extra" field.
func (m *NotifMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *NotifMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *NotifMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[notif.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *NotifMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[notif.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *NotifMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, notif.FieldExtra)
}

// SetType sets the "type" field.
func (m *NotifMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *NotifMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *NotifMutation) ClearType() {
	m._type = nil
	m.clearedFields[notif.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *NotifMutation) TypeCleared() bool {
	_, ok := m.clearedFields[notif.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *NotifMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, notif.FieldType)
}

// Where appends a list predicates to the NotifMutation builder.
func (m *NotifMutation) Where(ps ...predicate.Notif) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notif).
func (m *NotifMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, notif.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notif.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notif.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, notif.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, notif.FieldUserID)
	}
	if m.notified != nil {
		fields = append(fields, notif.FieldNotified)
	}
	if m.lang_id != nil {
		fields = append(fields, notif.FieldLangID)
	}
	if m.event_id != nil {
		fields = append(fields, notif.FieldEventID)
	}
	if m.event_type != nil {
		fields = append(fields, notif.FieldEventType)
	}
	if m.use_template != nil {
		fields = append(fields, notif.FieldUseTemplate)
	}
	if m.title != nil {
		fields = append(fields, notif.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, notif.FieldContent)
	}
	if m.channel != nil {
		fields = append(fields, notif.FieldChannel)
	}
	if m.extra != nil {
		fields = append(fields, notif.FieldExtra)
	}
	if m._type != nil {
		fields = append(fields, notif.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldCreatedAt:
		return m.CreatedAt()
	case notif.FieldUpdatedAt:
		return m.UpdatedAt()
	case notif.FieldDeletedAt:
		return m.DeletedAt()
	case notif.FieldAppID:
		return m.AppID()
	case notif.FieldUserID:
		return m.UserID()
	case notif.FieldNotified:
		return m.Notified()
	case notif.FieldLangID:
		return m.LangID()
	case notif.FieldEventID:
		return m.EventID()
	case notif.FieldEventType:
		return m.EventType()
	case notif.FieldUseTemplate:
		return m.UseTemplate()
	case notif.FieldTitle:
		return m.Title()
	case notif.FieldContent:
		return m.Content()
	case notif.FieldChannel:
		return m.Channel()
	case notif.FieldExtra:
		return m.Extra()
	case notif.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notif.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notif.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notif.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notif.FieldAppID:
		return m.OldAppID(ctx)
	case notif.FieldUserID:
		return m.OldUserID(ctx)
	case notif.FieldNotified:
		return m.OldNotified(ctx)
	case notif.FieldLangID:
		return m.OldLangID(ctx)
	case notif.FieldEventID:
		return m.OldEventID(ctx)
	case notif.FieldEventType:
		return m.OldEventType(ctx)
	case notif.FieldUseTemplate:
		return m.OldUseTemplate(ctx)
	case notif.FieldTitle:
		return m.OldTitle(ctx)
	case notif.FieldContent:
		return m.OldContent(ctx)
	case notif.FieldChannel:
		return m.OldChannel(ctx)
	case notif.FieldExtra:
		return m.OldExtra(ctx)
	case notif.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Notif field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notif.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notif.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notif.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notif.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case notif.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case notif.FieldNotified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotified(v)
		return nil
	case notif.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case notif.FieldEventID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case notif.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case notif.FieldUseTemplate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseTemplate(v)
		return nil
	case notif.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case notif.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case notif.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case notif.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	case notif.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, notif.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, notif.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, notif.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldCreatedAt:
		return m.AddedCreatedAt()
	case notif.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case notif.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notif.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case notif.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case notif.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notif numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notif.FieldAppID) {
		fields = append(fields, notif.FieldAppID)
	}
	if m.FieldCleared(notif.FieldUserID) {
		fields = append(fields, notif.FieldUserID)
	}
	if m.FieldCleared(notif.FieldNotified) {
		fields = append(fields, notif.FieldNotified)
	}
	if m.FieldCleared(notif.FieldLangID) {
		fields = append(fields, notif.FieldLangID)
	}
	if m.FieldCleared(notif.FieldEventID) {
		fields = append(fields, notif.FieldEventID)
	}
	if m.FieldCleared(notif.FieldEventType) {
		fields = append(fields, notif.FieldEventType)
	}
	if m.FieldCleared(notif.FieldUseTemplate) {
		fields = append(fields, notif.FieldUseTemplate)
	}
	if m.FieldCleared(notif.FieldTitle) {
		fields = append(fields, notif.FieldTitle)
	}
	if m.FieldCleared(notif.FieldContent) {
		fields = append(fields, notif.FieldContent)
	}
	if m.FieldCleared(notif.FieldChannel) {
		fields = append(fields, notif.FieldChannel)
	}
	if m.FieldCleared(notif.FieldExtra) {
		fields = append(fields, notif.FieldExtra)
	}
	if m.FieldCleared(notif.FieldType) {
		fields = append(fields, notif.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifMutation) ClearField(name string) error {
	switch name {
	case notif.FieldAppID:
		m.ClearAppID()
		return nil
	case notif.FieldUserID:
		m.ClearUserID()
		return nil
	case notif.FieldNotified:
		m.ClearNotified()
		return nil
	case notif.FieldLangID:
		m.ClearLangID()
		return nil
	case notif.FieldEventID:
		m.ClearEventID()
		return nil
	case notif.FieldEventType:
		m.ClearEventType()
		return nil
	case notif.FieldUseTemplate:
		m.ClearUseTemplate()
		return nil
	case notif.FieldTitle:
		m.ClearTitle()
		return nil
	case notif.FieldContent:
		m.ClearContent()
		return nil
	case notif.FieldChannel:
		m.ClearChannel()
		return nil
	case notif.FieldExtra:
		m.ClearExtra()
		return nil
	case notif.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown Notif nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifMutation) ResetField(name string) error {
	switch name {
	case notif.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notif.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notif.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notif.FieldAppID:
		m.ResetAppID()
		return nil
	case notif.FieldUserID:
		m.ResetUserID()
		return nil
	case notif.FieldNotified:
		m.ResetNotified()
		return nil
	case notif.FieldLangID:
		m.ResetLangID()
		return nil
	case notif.FieldEventID:
		m.ResetEventID()
		return nil
	case notif.FieldEventType:
		m.ResetEventType()
		return nil
	case notif.FieldUseTemplate:
		m.ResetUseTemplate()
		return nil
	case notif.FieldTitle:
		m.ResetTitle()
		return nil
	case notif.FieldContent:
		m.ResetContent()
		return nil
	case notif.FieldChannel:
		m.ResetChannel()
		return nil
	case notif.FieldExtra:
		m.ResetExtra()
		return nil
	case notif.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Notif unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Notif edge %s", name)
}

// NotifChannelMutation represents an operation that mutates the NotifChannel nodes in the graph.
type NotifChannelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	event_type    *string
	channel       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NotifChannel, error)
	predicates    []predicate.NotifChannel
}

var _ ent.Mutation = (*NotifChannelMutation)(nil)

// notifchannelOption allows management of the mutation configuration using functional options.
type notifchannelOption func(*NotifChannelMutation)

// newNotifChannelMutation creates new mutation for the NotifChannel entity.
func newNotifChannelMutation(c config, op Op, opts ...notifchannelOption) *NotifChannelMutation {
	m := &NotifChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeNotifChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifChannelID sets the ID field of the mutation.
func withNotifChannelID(id uuid.UUID) notifchannelOption {
	return func(m *NotifChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *NotifChannel
		)
		m.oldValue = func(ctx context.Context) (*NotifChannel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotifChannel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotifChannel sets the old NotifChannel of the mutation.
func withNotifChannel(node *NotifChannel) notifchannelOption {
	return func(m *NotifChannelMutation) {
		m.oldValue = func(context.Context) (*NotifChannel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotifChannel entities.
func (m *NotifChannelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifChannelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifChannelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotifChannel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotifChannelMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotifChannelMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *NotifChannelMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *NotifChannelMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotifChannelMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotifChannelMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotifChannelMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *NotifChannelMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *NotifChannelMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotifChannelMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotifChannelMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotifChannelMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *NotifChannelMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *NotifChannelMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotifChannelMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *NotifChannelMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *NotifChannelMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *NotifChannelMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[notifchannel.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *NotifChannelMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[notifchannel.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *NotifChannelMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, notifchannel.FieldAppID)
}

// SetEventType sets the "event_type" field.
func (m *NotifChannelMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *NotifChannelMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ClearEventType clears the value of the "event_type" field.
func (m *NotifChannelMutation) ClearEventType() {
	m.event_type = nil
	m.clearedFields[notifchannel.FieldEventType] = struct{}{}
}

// EventTypeCleared returns if the "event_type" field was cleared in this mutation.
func (m *NotifChannelMutation) EventTypeCleared() bool {
	_, ok := m.clearedFields[notifchannel.FieldEventType]
	return ok
}

// ResetEventType resets all changes to the "event_type" field.
func (m *NotifChannelMutation) ResetEventType() {
	m.event_type = nil
	delete(m.clearedFields, notifchannel.FieldEventType)
}

// SetChannel sets the "channel" field.
func (m *NotifChannelMutation) SetChannel(s string) {
	m.channel = &s
}

// Channel returns the value of the "channel" field in the mutation.
func (m *NotifChannelMutation) Channel() (r string, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the NotifChannel entity.
// If the NotifChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifChannelMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ClearChannel clears the value of the "channel" field.
func (m *NotifChannelMutation) ClearChannel() {
	m.channel = nil
	m.clearedFields[notifchannel.FieldChannel] = struct{}{}
}

// ChannelCleared returns if the "channel" field was cleared in this mutation.
func (m *NotifChannelMutation) ChannelCleared() bool {
	_, ok := m.clearedFields[notifchannel.FieldChannel]
	return ok
}

// ResetChannel resets all changes to the "channel" field.
func (m *NotifChannelMutation) ResetChannel() {
	m.channel = nil
	delete(m.clearedFields, notifchannel.FieldChannel)
}

// Where appends a list predicates to the NotifChannelMutation builder.
func (m *NotifChannelMutation) Where(ps ...predicate.NotifChannel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NotifChannel).
func (m *NotifChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifChannelMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, notifchannel.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notifchannel.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notifchannel.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, notifchannel.FieldAppID)
	}
	if m.event_type != nil {
		fields = append(fields, notifchannel.FieldEventType)
	}
	if m.channel != nil {
		fields = append(fields, notifchannel.FieldChannel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notifchannel.FieldCreatedAt:
		return m.CreatedAt()
	case notifchannel.FieldUpdatedAt:
		return m.UpdatedAt()
	case notifchannel.FieldDeletedAt:
		return m.DeletedAt()
	case notifchannel.FieldAppID:
		return m.AppID()
	case notifchannel.FieldEventType:
		return m.EventType()
	case notifchannel.FieldChannel:
		return m.Channel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notifchannel.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notifchannel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notifchannel.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notifchannel.FieldAppID:
		return m.OldAppID(ctx)
	case notifchannel.FieldEventType:
		return m.OldEventType(ctx)
	case notifchannel.FieldChannel:
		return m.OldChannel(ctx)
	}
	return nil, fmt.Errorf("unknown NotifChannel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notifchannel.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notifchannel.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notifchannel.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notifchannel.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case notifchannel.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case notifchannel.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	}
	return fmt.Errorf("unknown NotifChannel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifChannelMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, notifchannel.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, notifchannel.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, notifchannel.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notifchannel.FieldCreatedAt:
		return m.AddedCreatedAt()
	case notifchannel.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case notifchannel.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notifchannel.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case notifchannel.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case notifchannel.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NotifChannel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifChannelMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notifchannel.FieldAppID) {
		fields = append(fields, notifchannel.FieldAppID)
	}
	if m.FieldCleared(notifchannel.FieldEventType) {
		fields = append(fields, notifchannel.FieldEventType)
	}
	if m.FieldCleared(notifchannel.FieldChannel) {
		fields = append(fields, notifchannel.FieldChannel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifChannelMutation) ClearField(name string) error {
	switch name {
	case notifchannel.FieldAppID:
		m.ClearAppID()
		return nil
	case notifchannel.FieldEventType:
		m.ClearEventType()
		return nil
	case notifchannel.FieldChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown NotifChannel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifChannelMutation) ResetField(name string) error {
	switch name {
	case notifchannel.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notifchannel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notifchannel.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notifchannel.FieldAppID:
		m.ResetAppID()
		return nil
	case notifchannel.FieldEventType:
		m.ResetEventType()
		return nil
	case notifchannel.FieldChannel:
		m.ResetChannel()
		return nil
	}
	return fmt.Errorf("unknown NotifChannel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifChannelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifChannelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifChannelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifChannelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NotifChannel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifChannelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NotifChannel edge %s", name)
}

// NotifUserMutation represents an operation that mutates the NotifUser nodes in the graph.
type NotifUserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	event_type    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NotifUser, error)
	predicates    []predicate.NotifUser
}

var _ ent.Mutation = (*NotifUserMutation)(nil)

// notifuserOption allows management of the mutation configuration using functional options.
type notifuserOption func(*NotifUserMutation)

// newNotifUserMutation creates new mutation for the NotifUser entity.
func newNotifUserMutation(c config, op Op, opts ...notifuserOption) *NotifUserMutation {
	m := &NotifUserMutation{
		config:        c,
		op:            op,
		typ:           TypeNotifUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifUserID sets the ID field of the mutation.
func withNotifUserID(id uuid.UUID) notifuserOption {
	return func(m *NotifUserMutation) {
		var (
			err   error
			once  sync.Once
			value *NotifUser
		)
		m.oldValue = func(ctx context.Context) (*NotifUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotifUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotifUser sets the old NotifUser of the mutation.
func withNotifUser(node *NotifUser) notifuserOption {
	return func(m *NotifUserMutation) {
		m.oldValue = func(context.Context) (*NotifUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NotifUser entities.
func (m *NotifUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotifUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotifUserMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotifUserMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *NotifUserMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *NotifUserMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotifUserMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotifUserMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotifUserMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *NotifUserMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *NotifUserMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotifUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotifUserMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotifUserMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *NotifUserMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *NotifUserMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotifUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *NotifUserMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *NotifUserMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *NotifUserMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[notifuser.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *NotifUserMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[notifuser.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *NotifUserMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, notifuser.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *NotifUserMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *NotifUserMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *NotifUserMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[notifuser.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *NotifUserMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[notifuser.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *NotifUserMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, notifuser.FieldUserID)
}

// SetEventType sets the "event_type" field.
func (m *NotifUserMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *NotifUserMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the NotifUser entity.
// If the NotifUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifUserMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ClearEventType clears the value of the "event_type" field.
func (m *NotifUserMutation) ClearEventType() {
	m.event_type = nil
	m.clearedFields[notifuser.FieldEventType] = struct{}{}
}

// EventTypeCleared returns if the "event_type" field was cleared in this mutation.
func (m *NotifUserMutation) EventTypeCleared() bool {
	_, ok := m.clearedFields[notifuser.FieldEventType]
	return ok
}

// ResetEventType resets all changes to the "event_type" field.
func (m *NotifUserMutation) ResetEventType() {
	m.event_type = nil
	delete(m.clearedFields, notifuser.FieldEventType)
}

// Where appends a list predicates to the NotifUserMutation builder.
func (m *NotifUserMutation) Where(ps ...predicate.NotifUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NotifUser).
func (m *NotifUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifUserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, notifuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notifuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notifuser.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, notifuser.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, notifuser.FieldUserID)
	}
	if m.event_type != nil {
		fields = append(fields, notifuser.FieldEventType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notifuser.FieldCreatedAt:
		return m.CreatedAt()
	case notifuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case notifuser.FieldDeletedAt:
		return m.DeletedAt()
	case notifuser.FieldAppID:
		return m.AppID()
	case notifuser.FieldUserID:
		return m.UserID()
	case notifuser.FieldEventType:
		return m.EventType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notifuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notifuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notifuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notifuser.FieldAppID:
		return m.OldAppID(ctx)
	case notifuser.FieldUserID:
		return m.OldUserID(ctx)
	case notifuser.FieldEventType:
		return m.OldEventType(ctx)
	}
	return nil, fmt.Errorf("unknown NotifUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notifuser.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notifuser.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notifuser.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notifuser.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case notifuser.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case notifuser.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	}
	return fmt.Errorf("unknown NotifUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifUserMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, notifuser.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, notifuser.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, notifuser.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notifuser.FieldCreatedAt:
		return m.AddedCreatedAt()
	case notifuser.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case notifuser.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notifuser.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case notifuser.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case notifuser.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NotifUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notifuser.FieldAppID) {
		fields = append(fields, notifuser.FieldAppID)
	}
	if m.FieldCleared(notifuser.FieldUserID) {
		fields = append(fields, notifuser.FieldUserID)
	}
	if m.FieldCleared(notifuser.FieldEventType) {
		fields = append(fields, notifuser.FieldEventType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifUserMutation) ClearField(name string) error {
	switch name {
	case notifuser.FieldAppID:
		m.ClearAppID()
		return nil
	case notifuser.FieldUserID:
		m.ClearUserID()
		return nil
	case notifuser.FieldEventType:
		m.ClearEventType()
		return nil
	}
	return fmt.Errorf("unknown NotifUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifUserMutation) ResetField(name string) error {
	switch name {
	case notifuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notifuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notifuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notifuser.FieldAppID:
		m.ResetAppID()
		return nil
	case notifuser.FieldUserID:
		m.ResetUserID()
		return nil
	case notifuser.FieldEventType:
		m.ResetEventType()
		return nil
	}
	return fmt.Errorf("unknown NotifUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NotifUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NotifUser edge %s", name)
}

// ReadAnnouncementMutation represents an operation that mutates the ReadAnnouncement nodes in the graph.
type ReadAnnouncementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	app_id          *uuid.UUID
	user_id         *uuid.UUID
	announcement_id *uuid.UUID
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ReadAnnouncement, error)
	predicates      []predicate.ReadAnnouncement
}

var _ ent.Mutation = (*ReadAnnouncementMutation)(nil)

// readannouncementOption allows management of the mutation configuration using functional options.
type readannouncementOption func(*ReadAnnouncementMutation)

// newReadAnnouncementMutation creates new mutation for the ReadAnnouncement entity.
func newReadAnnouncementMutation(c config, op Op, opts ...readannouncementOption) *ReadAnnouncementMutation {
	m := &ReadAnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeReadAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReadAnnouncementID sets the ID field of the mutation.
func withReadAnnouncementID(id uuid.UUID) readannouncementOption {
	return func(m *ReadAnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *ReadAnnouncement
		)
		m.oldValue = func(ctx context.Context) (*ReadAnnouncement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReadAnnouncement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReadAnnouncement sets the old ReadAnnouncement of the mutation.
func withReadAnnouncement(node *ReadAnnouncement) readannouncementOption {
	return func(m *ReadAnnouncementMutation) {
		m.oldValue = func(context.Context) (*ReadAnnouncement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReadAnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReadAnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ReadAnnouncement entities.
func (m *ReadAnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReadAnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReadAnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReadAnnouncement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReadAnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReadAnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ReadAnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReadAnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReadAnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReadAnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ReadAnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReadAnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ReadAnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ReadAnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ReadAnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ReadAnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ReadAnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ReadAnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *ReadAnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[readannouncement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ReadAnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, readannouncement.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *ReadAnnouncementMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ReadAnnouncementMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ReadAnnouncementMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[readannouncement.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ReadAnnouncementMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, readannouncement.FieldUserID)
}

// SetAnnouncementID sets the "announcement_id" field.
func (m *ReadAnnouncementMutation) SetAnnouncementID(u uuid.UUID) {
	m.announcement_id = &u
}

// AnnouncementID returns the value of the "announcement_id" field in the mutation.
func (m *ReadAnnouncementMutation) AnnouncementID() (r uuid.UUID, exists bool) {
	v := m.announcement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncementID returns the old "announcement_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldAnnouncementID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnouncementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnouncementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncementID: %w", err)
	}
	return oldValue.AnnouncementID, nil
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (m *ReadAnnouncementMutation) ClearAnnouncementID() {
	m.announcement_id = nil
	m.clearedFields[readannouncement.FieldAnnouncementID] = struct{}{}
}

// AnnouncementIDCleared returns if the "announcement_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) AnnouncementIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldAnnouncementID]
	return ok
}

// ResetAnnouncementID resets all changes to the "announcement_id" field.
func (m *ReadAnnouncementMutation) ResetAnnouncementID() {
	m.announcement_id = nil
	delete(m.clearedFields, readannouncement.FieldAnnouncementID)
}

// Where appends a list predicates to the ReadAnnouncementMutation builder.
func (m *ReadAnnouncementMutation) Where(ps ...predicate.ReadAnnouncement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReadAnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ReadAnnouncement).
func (m *ReadAnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReadAnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, readannouncement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, readannouncement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, readannouncement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, readannouncement.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, readannouncement.FieldUserID)
	}
	if m.announcement_id != nil {
		fields = append(fields, readannouncement.FieldAnnouncementID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReadAnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.CreatedAt()
	case readannouncement.FieldUpdatedAt:
		return m.UpdatedAt()
	case readannouncement.FieldDeletedAt:
		return m.DeletedAt()
	case readannouncement.FieldAppID:
		return m.AppID()
	case readannouncement.FieldUserID:
		return m.UserID()
	case readannouncement.FieldAnnouncementID:
		return m.AnnouncementID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReadAnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case readannouncement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case readannouncement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case readannouncement.FieldAppID:
		return m.OldAppID(ctx)
	case readannouncement.FieldUserID:
		return m.OldUserID(ctx)
	case readannouncement.FieldAnnouncementID:
		return m.OldAnnouncementID(ctx)
	}
	return nil, fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadAnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case readannouncement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case readannouncement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case readannouncement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case readannouncement.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case readannouncement.FieldAnnouncementID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncementID(v)
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReadAnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, readannouncement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, readannouncement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, readannouncement.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReadAnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case readannouncement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case readannouncement.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadAnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case readannouncement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case readannouncement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReadAnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(readannouncement.FieldAppID) {
		fields = append(fields, readannouncement.FieldAppID)
	}
	if m.FieldCleared(readannouncement.FieldUserID) {
		fields = append(fields, readannouncement.FieldUserID)
	}
	if m.FieldCleared(readannouncement.FieldAnnouncementID) {
		fields = append(fields, readannouncement.FieldAnnouncementID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReadAnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReadAnnouncementMutation) ClearField(name string) error {
	switch name {
	case readannouncement.FieldAppID:
		m.ClearAppID()
		return nil
	case readannouncement.FieldUserID:
		m.ClearUserID()
		return nil
	case readannouncement.FieldAnnouncementID:
		m.ClearAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReadAnnouncementMutation) ResetField(name string) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case readannouncement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case readannouncement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case readannouncement.FieldAppID:
		m.ResetAppID()
		return nil
	case readannouncement.FieldUserID:
		m.ResetUserID()
		return nil
	case readannouncement.FieldAnnouncementID:
		m.ResetAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReadAnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReadAnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReadAnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReadAnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReadAnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReadAnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReadAnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ReadAnnouncement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReadAnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ReadAnnouncement edge %s", name)
}

// SMSTemplateMutation represents an operation that mutates the SMSTemplate nodes in the graph.
type SMSTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	lang_id       *uuid.UUID
	used_for      *string
	subject       *string
	message       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SMSTemplate, error)
	predicates    []predicate.SMSTemplate
}

var _ ent.Mutation = (*SMSTemplateMutation)(nil)

// smstemplateOption allows management of the mutation configuration using functional options.
type smstemplateOption func(*SMSTemplateMutation)

// newSMSTemplateMutation creates new mutation for the SMSTemplate entity.
func newSMSTemplateMutation(c config, op Op, opts ...smstemplateOption) *SMSTemplateMutation {
	m := &SMSTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeSMSTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSMSTemplateID sets the ID field of the mutation.
func withSMSTemplateID(id uuid.UUID) smstemplateOption {
	return func(m *SMSTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *SMSTemplate
		)
		m.oldValue = func(ctx context.Context) (*SMSTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SMSTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSMSTemplate sets the old SMSTemplate of the mutation.
func withSMSTemplate(node *SMSTemplate) smstemplateOption {
	return func(m *SMSTemplateMutation) {
		m.oldValue = func(context.Context) (*SMSTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SMSTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SMSTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SMSTemplate entities.
func (m *SMSTemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SMSTemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SMSTemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SMSTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SMSTemplateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SMSTemplateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *SMSTemplateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SMSTemplateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SMSTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SMSTemplateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SMSTemplateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *SMSTemplateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SMSTemplateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SMSTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SMSTemplateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SMSTemplateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *SMSTemplateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *SMSTemplateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SMSTemplateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *SMSTemplateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *SMSTemplateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *SMSTemplateMutation) ResetAppID() {
	m.app_id = nil
}

// SetLangID sets the "lang_id" field.
func (m *SMSTemplateMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *SMSTemplateMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *SMSTemplateMutation) ResetLangID() {
	m.lang_id = nil
}

// SetUsedFor sets the "used_for" field.
func (m *SMSTemplateMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *SMSTemplateMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *SMSTemplateMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[smstemplate.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *SMSTemplateMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[smstemplate.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *SMSTemplateMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, smstemplate.FieldUsedFor)
}

// SetSubject sets the "subject" field.
func (m *SMSTemplateMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *SMSTemplateMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *SMSTemplateMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[smstemplate.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *SMSTemplateMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[smstemplate.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *SMSTemplateMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, smstemplate.FieldSubject)
}

// SetMessage sets the "message" field.
func (m *SMSTemplateMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *SMSTemplateMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the SMSTemplate entity.
// If the SMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SMSTemplateMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *SMSTemplateMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[smstemplate.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *SMSTemplateMutation) MessageCleared() bool {
	_, ok := m.clearedFields[smstemplate.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *SMSTemplateMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, smstemplate.FieldMessage)
}

// Where appends a list predicates to the SMSTemplateMutation builder.
func (m *SMSTemplateMutation) Where(ps ...predicate.SMSTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SMSTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SMSTemplate).
func (m *SMSTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SMSTemplateMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, smstemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, smstemplate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, smstemplate.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, smstemplate.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, smstemplate.FieldLangID)
	}
	if m.used_for != nil {
		fields = append(fields, smstemplate.FieldUsedFor)
	}
	if m.subject != nil {
		fields = append(fields, smstemplate.FieldSubject)
	}
	if m.message != nil {
		fields = append(fields, smstemplate.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SMSTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case smstemplate.FieldCreatedAt:
		return m.CreatedAt()
	case smstemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case smstemplate.FieldDeletedAt:
		return m.DeletedAt()
	case smstemplate.FieldAppID:
		return m.AppID()
	case smstemplate.FieldLangID:
		return m.LangID()
	case smstemplate.FieldUsedFor:
		return m.UsedFor()
	case smstemplate.FieldSubject:
		return m.Subject()
	case smstemplate.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SMSTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case smstemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case smstemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case smstemplate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case smstemplate.FieldAppID:
		return m.OldAppID(ctx)
	case smstemplate.FieldLangID:
		return m.OldLangID(ctx)
	case smstemplate.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case smstemplate.FieldSubject:
		return m.OldSubject(ctx)
	case smstemplate.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown SMSTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SMSTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case smstemplate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case smstemplate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case smstemplate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case smstemplate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case smstemplate.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case smstemplate.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case smstemplate.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case smstemplate.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown SMSTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SMSTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, smstemplate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, smstemplate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, smstemplate.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SMSTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case smstemplate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case smstemplate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case smstemplate.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SMSTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case smstemplate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case smstemplate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case smstemplate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SMSTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SMSTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(smstemplate.FieldUsedFor) {
		fields = append(fields, smstemplate.FieldUsedFor)
	}
	if m.FieldCleared(smstemplate.FieldSubject) {
		fields = append(fields, smstemplate.FieldSubject)
	}
	if m.FieldCleared(smstemplate.FieldMessage) {
		fields = append(fields, smstemplate.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SMSTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SMSTemplateMutation) ClearField(name string) error {
	switch name {
	case smstemplate.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case smstemplate.FieldSubject:
		m.ClearSubject()
		return nil
	case smstemplate.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown SMSTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SMSTemplateMutation) ResetField(name string) error {
	switch name {
	case smstemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case smstemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case smstemplate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case smstemplate.FieldAppID:
		m.ResetAppID()
		return nil
	case smstemplate.FieldLangID:
		m.ResetLangID()
		return nil
	case smstemplate.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case smstemplate.FieldSubject:
		m.ResetSubject()
		return nil
	case smstemplate.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown SMSTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SMSTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SMSTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SMSTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SMSTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SMSTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SMSTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SMSTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SMSTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SMSTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SMSTemplate edge %s", name)
}

// SendAnnouncementMutation represents an operation that mutates the SendAnnouncement nodes in the graph.
type SendAnnouncementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	app_id          *uuid.UUID
	user_id         *uuid.UUID
	announcement_id *uuid.UUID
	channel         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*SendAnnouncement, error)
	predicates      []predicate.SendAnnouncement
}

var _ ent.Mutation = (*SendAnnouncementMutation)(nil)

// sendannouncementOption allows management of the mutation configuration using functional options.
type sendannouncementOption func(*SendAnnouncementMutation)

// newSendAnnouncementMutation creates new mutation for the SendAnnouncement entity.
func newSendAnnouncementMutation(c config, op Op, opts ...sendannouncementOption) *SendAnnouncementMutation {
	m := &SendAnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeSendAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSendAnnouncementID sets the ID field of the mutation.
func withSendAnnouncementID(id uuid.UUID) sendannouncementOption {
	return func(m *SendAnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *SendAnnouncement
		)
		m.oldValue = func(ctx context.Context) (*SendAnnouncement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SendAnnouncement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSendAnnouncement sets the old SendAnnouncement of the mutation.
func withSendAnnouncement(node *SendAnnouncement) sendannouncementOption {
	return func(m *SendAnnouncementMutation) {
		m.oldValue = func(context.Context) (*SendAnnouncement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SendAnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SendAnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SendAnnouncement entities.
func (m *SendAnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SendAnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SendAnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SendAnnouncement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SendAnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SendAnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *SendAnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SendAnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SendAnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SendAnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *SendAnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SendAnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SendAnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SendAnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *SendAnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SendAnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *SendAnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *SendAnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *SendAnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[sendannouncement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *SendAnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, sendannouncement.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *SendAnnouncementMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SendAnnouncementMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SendAnnouncementMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[sendannouncement.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SendAnnouncementMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, sendannouncement.FieldUserID)
}

// SetAnnouncementID sets the "announcement_id" field.
func (m *SendAnnouncementMutation) SetAnnouncementID(u uuid.UUID) {
	m.announcement_id = &u
}

// AnnouncementID returns the value of the "announcement_id" field in the mutation.
func (m *SendAnnouncementMutation) AnnouncementID() (r uuid.UUID, exists bool) {
	v := m.announcement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncementID returns the old "announcement_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldAnnouncementID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnouncementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnouncementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncementID: %w", err)
	}
	return oldValue.AnnouncementID, nil
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (m *SendAnnouncementMutation) ClearAnnouncementID() {
	m.announcement_id = nil
	m.clearedFields[sendannouncement.FieldAnnouncementID] = struct{}{}
}

// AnnouncementIDCleared returns if the "announcement_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) AnnouncementIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldAnnouncementID]
	return ok
}

// ResetAnnouncementID resets all changes to the "announcement_id" field.
func (m *SendAnnouncementMutation) ResetAnnouncementID() {
	m.announcement_id = nil
	delete(m.clearedFields, sendannouncement.FieldAnnouncementID)
}

// SetChannel sets the "channel" field.
func (m *SendAnnouncementMutation) SetChannel(s string) {
	m.channel = &s
}

// Channel returns the value of the "channel" field in the mutation.
func (m *SendAnnouncementMutation) Channel() (r string, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ClearChannel clears the value of the "channel" field.
func (m *SendAnnouncementMutation) ClearChannel() {
	m.channel = nil
	m.clearedFields[sendannouncement.FieldChannel] = struct{}{}
}

// ChannelCleared returns if the "channel" field was cleared in this mutation.
func (m *SendAnnouncementMutation) ChannelCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldChannel]
	return ok
}

// ResetChannel resets all changes to the "channel" field.
func (m *SendAnnouncementMutation) ResetChannel() {
	m.channel = nil
	delete(m.clearedFields, sendannouncement.FieldChannel)
}

// Where appends a list predicates to the SendAnnouncementMutation builder.
func (m *SendAnnouncementMutation) Where(ps ...predicate.SendAnnouncement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SendAnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SendAnnouncement).
func (m *SendAnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SendAnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, sendannouncement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sendannouncement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sendannouncement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, sendannouncement.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, sendannouncement.FieldUserID)
	}
	if m.announcement_id != nil {
		fields = append(fields, sendannouncement.FieldAnnouncementID)
	}
	if m.channel != nil {
		fields = append(fields, sendannouncement.FieldChannel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SendAnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.CreatedAt()
	case sendannouncement.FieldUpdatedAt:
		return m.UpdatedAt()
	case sendannouncement.FieldDeletedAt:
		return m.DeletedAt()
	case sendannouncement.FieldAppID:
		return m.AppID()
	case sendannouncement.FieldUserID:
		return m.UserID()
	case sendannouncement.FieldAnnouncementID:
		return m.AnnouncementID()
	case sendannouncement.FieldChannel:
		return m.Channel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SendAnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sendannouncement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sendannouncement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sendannouncement.FieldAppID:
		return m.OldAppID(ctx)
	case sendannouncement.FieldUserID:
		return m.OldUserID(ctx)
	case sendannouncement.FieldAnnouncementID:
		return m.OldAnnouncementID(ctx)
	case sendannouncement.FieldChannel:
		return m.OldChannel(ctx)
	}
	return nil, fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SendAnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sendannouncement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sendannouncement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sendannouncement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case sendannouncement.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sendannouncement.FieldAnnouncementID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncementID(v)
		return nil
	case sendannouncement.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SendAnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, sendannouncement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, sendannouncement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, sendannouncement.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SendAnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case sendannouncement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case sendannouncement.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SendAnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case sendannouncement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case sendannouncement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SendAnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sendannouncement.FieldAppID) {
		fields = append(fields, sendannouncement.FieldAppID)
	}
	if m.FieldCleared(sendannouncement.FieldUserID) {
		fields = append(fields, sendannouncement.FieldUserID)
	}
	if m.FieldCleared(sendannouncement.FieldAnnouncementID) {
		fields = append(fields, sendannouncement.FieldAnnouncementID)
	}
	if m.FieldCleared(sendannouncement.FieldChannel) {
		fields = append(fields, sendannouncement.FieldChannel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SendAnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SendAnnouncementMutation) ClearField(name string) error {
	switch name {
	case sendannouncement.FieldAppID:
		m.ClearAppID()
		return nil
	case sendannouncement.FieldUserID:
		m.ClearUserID()
		return nil
	case sendannouncement.FieldAnnouncementID:
		m.ClearAnnouncementID()
		return nil
	case sendannouncement.FieldChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SendAnnouncementMutation) ResetField(name string) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sendannouncement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sendannouncement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sendannouncement.FieldAppID:
		m.ResetAppID()
		return nil
	case sendannouncement.FieldUserID:
		m.ResetUserID()
		return nil
	case sendannouncement.FieldAnnouncementID:
		m.ResetAnnouncementID()
		return nil
	case sendannouncement.FieldChannel:
		m.ResetChannel()
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SendAnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SendAnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SendAnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SendAnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SendAnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SendAnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SendAnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SendAnnouncement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SendAnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SendAnnouncement edge %s", name)
}

// TxNotifStateMutation represents an operation that mutates the TxNotifState nodes in the graph.
type TxNotifStateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	tx_id         *uuid.UUID
	notif_state   *string
	tx_type       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TxNotifState, error)
	predicates    []predicate.TxNotifState
}

var _ ent.Mutation = (*TxNotifStateMutation)(nil)

// txnotifstateOption allows management of the mutation configuration using functional options.
type txnotifstateOption func(*TxNotifStateMutation)

// newTxNotifStateMutation creates new mutation for the TxNotifState entity.
func newTxNotifStateMutation(c config, op Op, opts ...txnotifstateOption) *TxNotifStateMutation {
	m := &TxNotifStateMutation{
		config:        c,
		op:            op,
		typ:           TypeTxNotifState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTxNotifStateID sets the ID field of the mutation.
func withTxNotifStateID(id uuid.UUID) txnotifstateOption {
	return func(m *TxNotifStateMutation) {
		var (
			err   error
			once  sync.Once
			value *TxNotifState
		)
		m.oldValue = func(ctx context.Context) (*TxNotifState, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TxNotifState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTxNotifState sets the old TxNotifState of the mutation.
func withTxNotifState(node *TxNotifState) txnotifstateOption {
	return func(m *TxNotifStateMutation) {
		m.oldValue = func(context.Context) (*TxNotifState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TxNotifStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TxNotifStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TxNotifState entities.
func (m *TxNotifStateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TxNotifStateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TxNotifStateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TxNotifState.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TxNotifStateMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TxNotifStateMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TxNotifStateMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TxNotifStateMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TxNotifStateMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TxNotifStateMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TxNotifStateMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TxNotifStateMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TxNotifStateMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TxNotifStateMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TxNotifStateMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TxNotifStateMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TxNotifStateMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TxNotifStateMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TxNotifStateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetTxID sets the "tx_id" field.
func (m *TxNotifStateMutation) SetTxID(u uuid.UUID) {
	m.tx_id = &u
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *TxNotifStateMutation) TxID() (r uuid.UUID, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldTxID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// ClearTxID clears the value of the "tx_id" field.
func (m *TxNotifStateMutation) ClearTxID() {
	m.tx_id = nil
	m.clearedFields[txnotifstate.FieldTxID] = struct{}{}
}

// TxIDCleared returns if the "tx_id" field was cleared in this mutation.
func (m *TxNotifStateMutation) TxIDCleared() bool {
	_, ok := m.clearedFields[txnotifstate.FieldTxID]
	return ok
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *TxNotifStateMutation) ResetTxID() {
	m.tx_id = nil
	delete(m.clearedFields, txnotifstate.FieldTxID)
}

// SetNotifState sets the "notif_state" field.
func (m *TxNotifStateMutation) SetNotifState(s string) {
	m.notif_state = &s
}

// NotifState returns the value of the "notif_state" field in the mutation.
func (m *TxNotifStateMutation) NotifState() (r string, exists bool) {
	v := m.notif_state
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifState returns the old "notif_state" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldNotifState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifState: %w", err)
	}
	return oldValue.NotifState, nil
}

// ClearNotifState clears the value of the "notif_state" field.
func (m *TxNotifStateMutation) ClearNotifState() {
	m.notif_state = nil
	m.clearedFields[txnotifstate.FieldNotifState] = struct{}{}
}

// NotifStateCleared returns if the "notif_state" field was cleared in this mutation.
func (m *TxNotifStateMutation) NotifStateCleared() bool {
	_, ok := m.clearedFields[txnotifstate.FieldNotifState]
	return ok
}

// ResetNotifState resets all changes to the "notif_state" field.
func (m *TxNotifStateMutation) ResetNotifState() {
	m.notif_state = nil
	delete(m.clearedFields, txnotifstate.FieldNotifState)
}

// SetTxType sets the "tx_type" field.
func (m *TxNotifStateMutation) SetTxType(s string) {
	m.tx_type = &s
}

// TxType returns the value of the "tx_type" field in the mutation.
func (m *TxNotifStateMutation) TxType() (r string, exists bool) {
	v := m.tx_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTxType returns the old "tx_type" field's value of the TxNotifState entity.
// If the TxNotifState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxNotifStateMutation) OldTxType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxType: %w", err)
	}
	return oldValue.TxType, nil
}

// ClearTxType clears the value of the "tx_type" field.
func (m *TxNotifStateMutation) ClearTxType() {
	m.tx_type = nil
	m.clearedFields[txnotifstate.FieldTxType] = struct{}{}
}

// TxTypeCleared returns if the "tx_type" field was cleared in this mutation.
func (m *TxNotifStateMutation) TxTypeCleared() bool {
	_, ok := m.clearedFields[txnotifstate.FieldTxType]
	return ok
}

// ResetTxType resets all changes to the "tx_type" field.
func (m *TxNotifStateMutation) ResetTxType() {
	m.tx_type = nil
	delete(m.clearedFields, txnotifstate.FieldTxType)
}

// Where appends a list predicates to the TxNotifStateMutation builder.
func (m *TxNotifStateMutation) Where(ps ...predicate.TxNotifState) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TxNotifStateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TxNotifState).
func (m *TxNotifStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TxNotifStateMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, txnotifstate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, txnotifstate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, txnotifstate.FieldDeletedAt)
	}
	if m.tx_id != nil {
		fields = append(fields, txnotifstate.FieldTxID)
	}
	if m.notif_state != nil {
		fields = append(fields, txnotifstate.FieldNotifState)
	}
	if m.tx_type != nil {
		fields = append(fields, txnotifstate.FieldTxType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TxNotifStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case txnotifstate.FieldCreatedAt:
		return m.CreatedAt()
	case txnotifstate.FieldUpdatedAt:
		return m.UpdatedAt()
	case txnotifstate.FieldDeletedAt:
		return m.DeletedAt()
	case txnotifstate.FieldTxID:
		return m.TxID()
	case txnotifstate.FieldNotifState:
		return m.NotifState()
	case txnotifstate.FieldTxType:
		return m.TxType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TxNotifStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case txnotifstate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case txnotifstate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case txnotifstate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case txnotifstate.FieldTxID:
		return m.OldTxID(ctx)
	case txnotifstate.FieldNotifState:
		return m.OldNotifState(ctx)
	case txnotifstate.FieldTxType:
		return m.OldTxType(ctx)
	}
	return nil, fmt.Errorf("unknown TxNotifState field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TxNotifStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case txnotifstate.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case txnotifstate.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case txnotifstate.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case txnotifstate.FieldTxID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case txnotifstate.FieldNotifState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifState(v)
		return nil
	case txnotifstate.FieldTxType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxType(v)
		return nil
	}
	return fmt.Errorf("unknown TxNotifState field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TxNotifStateMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, txnotifstate.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, txnotifstate.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, txnotifstate.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TxNotifStateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case txnotifstate.FieldCreatedAt:
		return m.AddedCreatedAt()
	case txnotifstate.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case txnotifstate.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TxNotifStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case txnotifstate.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case txnotifstate.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case txnotifstate.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TxNotifState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TxNotifStateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(txnotifstate.FieldTxID) {
		fields = append(fields, txnotifstate.FieldTxID)
	}
	if m.FieldCleared(txnotifstate.FieldNotifState) {
		fields = append(fields, txnotifstate.FieldNotifState)
	}
	if m.FieldCleared(txnotifstate.FieldTxType) {
		fields = append(fields, txnotifstate.FieldTxType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TxNotifStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TxNotifStateMutation) ClearField(name string) error {
	switch name {
	case txnotifstate.FieldTxID:
		m.ClearTxID()
		return nil
	case txnotifstate.FieldNotifState:
		m.ClearNotifState()
		return nil
	case txnotifstate.FieldTxType:
		m.ClearTxType()
		return nil
	}
	return fmt.Errorf("unknown TxNotifState nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TxNotifStateMutation) ResetField(name string) error {
	switch name {
	case txnotifstate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case txnotifstate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case txnotifstate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case txnotifstate.FieldTxID:
		m.ResetTxID()
		return nil
	case txnotifstate.FieldNotifState:
		m.ResetNotifState()
		return nil
	case txnotifstate.FieldTxType:
		m.ResetTxType()
		return nil
	}
	return fmt.Errorf("unknown TxNotifState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TxNotifStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TxNotifStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TxNotifStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TxNotifStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TxNotifStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TxNotifStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TxNotifStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TxNotifState unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TxNotifStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TxNotifState edge %s", name)
}

// UserAnnouncementMutation represents an operation that mutates the UserAnnouncement nodes in the graph.
type UserAnnouncementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	app_id          *uuid.UUID
	user_id         *uuid.UUID
	announcement_id *uuid.UUID
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserAnnouncement, error)
	predicates      []predicate.UserAnnouncement
}

var _ ent.Mutation = (*UserAnnouncementMutation)(nil)

// userannouncementOption allows management of the mutation configuration using functional options.
type userannouncementOption func(*UserAnnouncementMutation)

// newUserAnnouncementMutation creates new mutation for the UserAnnouncement entity.
func newUserAnnouncementMutation(c config, op Op, opts ...userannouncementOption) *UserAnnouncementMutation {
	m := &UserAnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeUserAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserAnnouncementID sets the ID field of the mutation.
func withUserAnnouncementID(id uuid.UUID) userannouncementOption {
	return func(m *UserAnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *UserAnnouncement
		)
		m.oldValue = func(ctx context.Context) (*UserAnnouncement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserAnnouncement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserAnnouncement sets the old UserAnnouncement of the mutation.
func withUserAnnouncement(node *UserAnnouncement) userannouncementOption {
	return func(m *UserAnnouncementMutation) {
		m.oldValue = func(context.Context) (*UserAnnouncement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserAnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserAnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserAnnouncement entities.
func (m *UserAnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserAnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserAnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserAnnouncement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserAnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserAnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *UserAnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *UserAnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserAnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserAnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserAnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *UserAnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *UserAnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserAnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserAnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserAnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *UserAnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *UserAnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserAnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *UserAnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserAnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *UserAnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[userannouncement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *UserAnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[userannouncement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserAnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, userannouncement.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *UserAnnouncementMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserAnnouncementMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserAnnouncementMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[userannouncement.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserAnnouncementMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[userannouncement.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserAnnouncementMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, userannouncement.FieldUserID)
}

// SetAnnouncementID sets the "announcement_id" field.
func (m *UserAnnouncementMutation) SetAnnouncementID(u uuid.UUID) {
	m.announcement_id = &u
}

// AnnouncementID returns the value of the "announcement_id" field in the mutation.
func (m *UserAnnouncementMutation) AnnouncementID() (r uuid.UUID, exists bool) {
	v := m.announcement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncementID returns the old "announcement_id" field's value of the UserAnnouncement entity.
// If the UserAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAnnouncementMutation) OldAnnouncementID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnouncementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnouncementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncementID: %w", err)
	}
	return oldValue.AnnouncementID, nil
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (m *UserAnnouncementMutation) ClearAnnouncementID() {
	m.announcement_id = nil
	m.clearedFields[userannouncement.FieldAnnouncementID] = struct{}{}
}

// AnnouncementIDCleared returns if the "announcement_id" field was cleared in this mutation.
func (m *UserAnnouncementMutation) AnnouncementIDCleared() bool {
	_, ok := m.clearedFields[userannouncement.FieldAnnouncementID]
	return ok
}

// ResetAnnouncementID resets all changes to the "announcement_id" field.
func (m *UserAnnouncementMutation) ResetAnnouncementID() {
	m.announcement_id = nil
	delete(m.clearedFields, userannouncement.FieldAnnouncementID)
}

// Where appends a list predicates to the UserAnnouncementMutation builder.
func (m *UserAnnouncementMutation) Where(ps ...predicate.UserAnnouncement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserAnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserAnnouncement).
func (m *UserAnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserAnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, userannouncement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userannouncement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userannouncement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, userannouncement.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userannouncement.FieldUserID)
	}
	if m.announcement_id != nil {
		fields = append(fields, userannouncement.FieldAnnouncementID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserAnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userannouncement.FieldCreatedAt:
		return m.CreatedAt()
	case userannouncement.FieldUpdatedAt:
		return m.UpdatedAt()
	case userannouncement.FieldDeletedAt:
		return m.DeletedAt()
	case userannouncement.FieldAppID:
		return m.AppID()
	case userannouncement.FieldUserID:
		return m.UserID()
	case userannouncement.FieldAnnouncementID:
		return m.AnnouncementID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserAnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userannouncement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userannouncement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userannouncement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case userannouncement.FieldAppID:
		return m.OldAppID(ctx)
	case userannouncement.FieldUserID:
		return m.OldUserID(ctx)
	case userannouncement.FieldAnnouncementID:
		return m.OldAnnouncementID(ctx)
	}
	return nil, fmt.Errorf("unknown UserAnnouncement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userannouncement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userannouncement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userannouncement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case userannouncement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userannouncement.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userannouncement.FieldAnnouncementID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncementID(v)
		return nil
	}
	return fmt.Errorf("unknown UserAnnouncement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserAnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, userannouncement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, userannouncement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, userannouncement.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserAnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userannouncement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case userannouncement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case userannouncement.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userannouncement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case userannouncement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case userannouncement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserAnnouncement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserAnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userannouncement.FieldAppID) {
		fields = append(fields, userannouncement.FieldAppID)
	}
	if m.FieldCleared(userannouncement.FieldUserID) {
		fields = append(fields, userannouncement.FieldUserID)
	}
	if m.FieldCleared(userannouncement.FieldAnnouncementID) {
		fields = append(fields, userannouncement.FieldAnnouncementID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserAnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserAnnouncementMutation) ClearField(name string) error {
	switch name {
	case userannouncement.FieldAppID:
		m.ClearAppID()
		return nil
	case userannouncement.FieldUserID:
		m.ClearUserID()
		return nil
	case userannouncement.FieldAnnouncementID:
		m.ClearAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown UserAnnouncement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserAnnouncementMutation) ResetField(name string) error {
	switch name {
	case userannouncement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userannouncement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userannouncement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case userannouncement.FieldAppID:
		m.ResetAppID()
		return nil
	case userannouncement.FieldUserID:
		m.ResetUserID()
		return nil
	case userannouncement.FieldAnnouncementID:
		m.ResetAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown UserAnnouncement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserAnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserAnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserAnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserAnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserAnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserAnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserAnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserAnnouncement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserAnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserAnnouncement edge %s", name)
}
