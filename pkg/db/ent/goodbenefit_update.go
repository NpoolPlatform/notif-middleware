// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodBenefitUpdate is the builder for updating GoodBenefit entities.
type GoodBenefitUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodBenefitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodBenefitUpdate builder.
func (gbu *GoodBenefitUpdate) Where(ps ...predicate.GoodBenefit) *GoodBenefitUpdate {
	gbu.mutation.Where(ps...)
	return gbu
}

// SetCreatedAt sets the "created_at" field.
func (gbu *GoodBenefitUpdate) SetCreatedAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetCreatedAt()
	gbu.mutation.SetCreatedAt(u)
	return gbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableCreatedAt(u *uint32) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetCreatedAt(*u)
	}
	return gbu
}

// AddCreatedAt adds u to the "created_at" field.
func (gbu *GoodBenefitUpdate) AddCreatedAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddCreatedAt(u)
	return gbu
}

// SetUpdatedAt sets the "updated_at" field.
func (gbu *GoodBenefitUpdate) SetUpdatedAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetUpdatedAt()
	gbu.mutation.SetUpdatedAt(u)
	return gbu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gbu *GoodBenefitUpdate) AddUpdatedAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddUpdatedAt(u)
	return gbu
}

// SetDeletedAt sets the "deleted_at" field.
func (gbu *GoodBenefitUpdate) SetDeletedAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetDeletedAt()
	gbu.mutation.SetDeletedAt(u)
	return gbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableDeletedAt(u *uint32) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetDeletedAt(*u)
	}
	return gbu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gbu *GoodBenefitUpdate) AddDeletedAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddDeletedAt(u)
	return gbu
}

// SetEntID sets the "ent_id" field.
func (gbu *GoodBenefitUpdate) SetEntID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetEntID(u)
	return gbu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableEntID(u *uuid.UUID) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetEntID(*u)
	}
	return gbu
}

// SetGoodID sets the "good_id" field.
func (gbu *GoodBenefitUpdate) SetGoodID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetGoodID(u)
	return gbu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableGoodID(u *uuid.UUID) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetGoodID(*u)
	}
	return gbu
}

// ClearGoodID clears the value of the "good_id" field.
func (gbu *GoodBenefitUpdate) ClearGoodID() *GoodBenefitUpdate {
	gbu.mutation.ClearGoodID()
	return gbu
}

// SetGoodType sets the "good_type" field.
func (gbu *GoodBenefitUpdate) SetGoodType(s string) *GoodBenefitUpdate {
	gbu.mutation.SetGoodType(s)
	return gbu
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableGoodType(s *string) *GoodBenefitUpdate {
	if s != nil {
		gbu.SetGoodType(*s)
	}
	return gbu
}

// ClearGoodType clears the value of the "good_type" field.
func (gbu *GoodBenefitUpdate) ClearGoodType() *GoodBenefitUpdate {
	gbu.mutation.ClearGoodType()
	return gbu
}

// SetGoodName sets the "good_name" field.
func (gbu *GoodBenefitUpdate) SetGoodName(s string) *GoodBenefitUpdate {
	gbu.mutation.SetGoodName(s)
	return gbu
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableGoodName(s *string) *GoodBenefitUpdate {
	if s != nil {
		gbu.SetGoodName(*s)
	}
	return gbu
}

// ClearGoodName clears the value of the "good_name" field.
func (gbu *GoodBenefitUpdate) ClearGoodName() *GoodBenefitUpdate {
	gbu.mutation.ClearGoodName()
	return gbu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gbu *GoodBenefitUpdate) SetCoinTypeID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetCoinTypeID(u)
	return gbu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableCoinTypeID(u *uuid.UUID) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetCoinTypeID(*u)
	}
	return gbu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (gbu *GoodBenefitUpdate) ClearCoinTypeID() *GoodBenefitUpdate {
	gbu.mutation.ClearCoinTypeID()
	return gbu
}

// SetAmount sets the "amount" field.
func (gbu *GoodBenefitUpdate) SetAmount(s string) *GoodBenefitUpdate {
	gbu.mutation.SetAmount(s)
	return gbu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableAmount(s *string) *GoodBenefitUpdate {
	if s != nil {
		gbu.SetAmount(*s)
	}
	return gbu
}

// ClearAmount clears the value of the "amount" field.
func (gbu *GoodBenefitUpdate) ClearAmount() *GoodBenefitUpdate {
	gbu.mutation.ClearAmount()
	return gbu
}

// SetState sets the "state" field.
func (gbu *GoodBenefitUpdate) SetState(s string) *GoodBenefitUpdate {
	gbu.mutation.SetState(s)
	return gbu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableState(s *string) *GoodBenefitUpdate {
	if s != nil {
		gbu.SetState(*s)
	}
	return gbu
}

// ClearState clears the value of the "state" field.
func (gbu *GoodBenefitUpdate) ClearState() *GoodBenefitUpdate {
	gbu.mutation.ClearState()
	return gbu
}

// SetMessage sets the "message" field.
func (gbu *GoodBenefitUpdate) SetMessage(s string) *GoodBenefitUpdate {
	gbu.mutation.SetMessage(s)
	return gbu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableMessage(s *string) *GoodBenefitUpdate {
	if s != nil {
		gbu.SetMessage(*s)
	}
	return gbu
}

// ClearMessage clears the value of the "message" field.
func (gbu *GoodBenefitUpdate) ClearMessage() *GoodBenefitUpdate {
	gbu.mutation.ClearMessage()
	return gbu
}

// SetBenefitDate sets the "benefit_date" field.
func (gbu *GoodBenefitUpdate) SetBenefitDate(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetBenefitDate()
	gbu.mutation.SetBenefitDate(u)
	return gbu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableBenefitDate(u *uint32) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetBenefitDate(*u)
	}
	return gbu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (gbu *GoodBenefitUpdate) AddBenefitDate(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddBenefitDate(u)
	return gbu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (gbu *GoodBenefitUpdate) ClearBenefitDate() *GoodBenefitUpdate {
	gbu.mutation.ClearBenefitDate()
	return gbu
}

// SetTxID sets the "tx_id" field.
func (gbu *GoodBenefitUpdate) SetTxID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetTxID(u)
	return gbu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableTxID(u *uuid.UUID) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetTxID(*u)
	}
	return gbu
}

// ClearTxID clears the value of the "tx_id" field.
func (gbu *GoodBenefitUpdate) ClearTxID() *GoodBenefitUpdate {
	gbu.mutation.ClearTxID()
	return gbu
}

// SetGenerated sets the "generated" field.
func (gbu *GoodBenefitUpdate) SetGenerated(b bool) *GoodBenefitUpdate {
	gbu.mutation.SetGenerated(b)
	return gbu
}

// SetNillableGenerated sets the "generated" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableGenerated(b *bool) *GoodBenefitUpdate {
	if b != nil {
		gbu.SetGenerated(*b)
	}
	return gbu
}

// ClearGenerated clears the value of the "generated" field.
func (gbu *GoodBenefitUpdate) ClearGenerated() *GoodBenefitUpdate {
	gbu.mutation.ClearGenerated()
	return gbu
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbu *GoodBenefitUpdate) Mutation() *GoodBenefitMutation {
	return gbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gbu *GoodBenefitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gbu.defaults(); err != nil {
		return 0, err
	}
	if len(gbu.hooks) == 0 {
		affected, err = gbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gbu.mutation = mutation
			affected, err = gbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gbu.hooks) - 1; i >= 0; i-- {
			if gbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gbu *GoodBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := gbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gbu *GoodBenefitUpdate) Exec(ctx context.Context) error {
	_, err := gbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbu *GoodBenefitUpdate) ExecX(ctx context.Context) {
	if err := gbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbu *GoodBenefitUpdate) defaults() error {
	if _, ok := gbu.mutation.UpdatedAt(); !ok {
		if goodbenefit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodbenefit.UpdateDefaultUpdatedAt()
		gbu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gbu *GoodBenefitUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodBenefitUpdate {
	gbu.modifiers = append(gbu.modifiers, modifiers...)
	return gbu
}

func (gbu *GoodBenefitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodbenefit.FieldID,
			},
		},
	}
	if ps := gbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreatedAt,
		})
	}
	if value, ok := gbu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreatedAt,
		})
	}
	if value, ok := gbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdatedAt,
		})
	}
	if value, ok := gbu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdatedAt,
		})
	}
	if value, ok := gbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeletedAt,
		})
	}
	if value, ok := gbu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeletedAt,
		})
	}
	if value, ok := gbu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldEntID,
		})
	}
	if value, ok := gbu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if gbu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if value, ok := gbu.mutation.GoodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodType,
		})
	}
	if gbu.mutation.GoodTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldGoodType,
		})
	}
	if value, ok := gbu.mutation.GoodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodName,
		})
	}
	if gbu.mutation.GoodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldGoodName,
		})
	}
	if value, ok := gbu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldCoinTypeID,
		})
	}
	if gbu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldCoinTypeID,
		})
	}
	if value, ok := gbu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldAmount,
		})
	}
	if gbu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldAmount,
		})
	}
	if value, ok := gbu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldState,
		})
	}
	if gbu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldState,
		})
	}
	if value, ok := gbu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldMessage,
		})
	}
	if gbu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldMessage,
		})
	}
	if value, ok := gbu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if value, ok := gbu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if gbu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if value, ok := gbu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldTxID,
		})
	}
	if gbu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldTxID,
		})
	}
	if value, ok := gbu.mutation.Generated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodbenefit.FieldGenerated,
		})
	}
	if gbu.mutation.GeneratedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: goodbenefit.FieldGenerated,
		})
	}
	_spec.Modifiers = gbu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, gbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodBenefitUpdateOne is the builder for updating a single GoodBenefit entity.
type GoodBenefitUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodBenefitMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (gbuo *GoodBenefitUpdateOne) SetCreatedAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetCreatedAt()
	gbuo.mutation.SetCreatedAt(u)
	return gbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableCreatedAt(u *uint32) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetCreatedAt(*u)
	}
	return gbuo
}

// AddCreatedAt adds u to the "created_at" field.
func (gbuo *GoodBenefitUpdateOne) AddCreatedAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddCreatedAt(u)
	return gbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gbuo *GoodBenefitUpdateOne) SetUpdatedAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetUpdatedAt()
	gbuo.mutation.SetUpdatedAt(u)
	return gbuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gbuo *GoodBenefitUpdateOne) AddUpdatedAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddUpdatedAt(u)
	return gbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gbuo *GoodBenefitUpdateOne) SetDeletedAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetDeletedAt()
	gbuo.mutation.SetDeletedAt(u)
	return gbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableDeletedAt(u *uint32) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetDeletedAt(*u)
	}
	return gbuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gbuo *GoodBenefitUpdateOne) AddDeletedAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddDeletedAt(u)
	return gbuo
}

// SetEntID sets the "ent_id" field.
func (gbuo *GoodBenefitUpdateOne) SetEntID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetEntID(u)
	return gbuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetEntID(*u)
	}
	return gbuo
}

// SetGoodID sets the "good_id" field.
func (gbuo *GoodBenefitUpdateOne) SetGoodID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetGoodID(u)
	return gbuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetGoodID(*u)
	}
	return gbuo
}

// ClearGoodID clears the value of the "good_id" field.
func (gbuo *GoodBenefitUpdateOne) ClearGoodID() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearGoodID()
	return gbuo
}

// SetGoodType sets the "good_type" field.
func (gbuo *GoodBenefitUpdateOne) SetGoodType(s string) *GoodBenefitUpdateOne {
	gbuo.mutation.SetGoodType(s)
	return gbuo
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableGoodType(s *string) *GoodBenefitUpdateOne {
	if s != nil {
		gbuo.SetGoodType(*s)
	}
	return gbuo
}

// ClearGoodType clears the value of the "good_type" field.
func (gbuo *GoodBenefitUpdateOne) ClearGoodType() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearGoodType()
	return gbuo
}

// SetGoodName sets the "good_name" field.
func (gbuo *GoodBenefitUpdateOne) SetGoodName(s string) *GoodBenefitUpdateOne {
	gbuo.mutation.SetGoodName(s)
	return gbuo
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableGoodName(s *string) *GoodBenefitUpdateOne {
	if s != nil {
		gbuo.SetGoodName(*s)
	}
	return gbuo
}

// ClearGoodName clears the value of the "good_name" field.
func (gbuo *GoodBenefitUpdateOne) ClearGoodName() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearGoodName()
	return gbuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gbuo *GoodBenefitUpdateOne) SetCoinTypeID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetCoinTypeID(u)
	return gbuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetCoinTypeID(*u)
	}
	return gbuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (gbuo *GoodBenefitUpdateOne) ClearCoinTypeID() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearCoinTypeID()
	return gbuo
}

// SetAmount sets the "amount" field.
func (gbuo *GoodBenefitUpdateOne) SetAmount(s string) *GoodBenefitUpdateOne {
	gbuo.mutation.SetAmount(s)
	return gbuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableAmount(s *string) *GoodBenefitUpdateOne {
	if s != nil {
		gbuo.SetAmount(*s)
	}
	return gbuo
}

// ClearAmount clears the value of the "amount" field.
func (gbuo *GoodBenefitUpdateOne) ClearAmount() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearAmount()
	return gbuo
}

// SetState sets the "state" field.
func (gbuo *GoodBenefitUpdateOne) SetState(s string) *GoodBenefitUpdateOne {
	gbuo.mutation.SetState(s)
	return gbuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableState(s *string) *GoodBenefitUpdateOne {
	if s != nil {
		gbuo.SetState(*s)
	}
	return gbuo
}

// ClearState clears the value of the "state" field.
func (gbuo *GoodBenefitUpdateOne) ClearState() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearState()
	return gbuo
}

// SetMessage sets the "message" field.
func (gbuo *GoodBenefitUpdateOne) SetMessage(s string) *GoodBenefitUpdateOne {
	gbuo.mutation.SetMessage(s)
	return gbuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableMessage(s *string) *GoodBenefitUpdateOne {
	if s != nil {
		gbuo.SetMessage(*s)
	}
	return gbuo
}

// ClearMessage clears the value of the "message" field.
func (gbuo *GoodBenefitUpdateOne) ClearMessage() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearMessage()
	return gbuo
}

// SetBenefitDate sets the "benefit_date" field.
func (gbuo *GoodBenefitUpdateOne) SetBenefitDate(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetBenefitDate()
	gbuo.mutation.SetBenefitDate(u)
	return gbuo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableBenefitDate(u *uint32) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetBenefitDate(*u)
	}
	return gbuo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (gbuo *GoodBenefitUpdateOne) AddBenefitDate(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddBenefitDate(u)
	return gbuo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (gbuo *GoodBenefitUpdateOne) ClearBenefitDate() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearBenefitDate()
	return gbuo
}

// SetTxID sets the "tx_id" field.
func (gbuo *GoodBenefitUpdateOne) SetTxID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetTxID(u)
	return gbuo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableTxID(u *uuid.UUID) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetTxID(*u)
	}
	return gbuo
}

// ClearTxID clears the value of the "tx_id" field.
func (gbuo *GoodBenefitUpdateOne) ClearTxID() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearTxID()
	return gbuo
}

// SetGenerated sets the "generated" field.
func (gbuo *GoodBenefitUpdateOne) SetGenerated(b bool) *GoodBenefitUpdateOne {
	gbuo.mutation.SetGenerated(b)
	return gbuo
}

// SetNillableGenerated sets the "generated" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableGenerated(b *bool) *GoodBenefitUpdateOne {
	if b != nil {
		gbuo.SetGenerated(*b)
	}
	return gbuo
}

// ClearGenerated clears the value of the "generated" field.
func (gbuo *GoodBenefitUpdateOne) ClearGenerated() *GoodBenefitUpdateOne {
	gbuo.mutation.ClearGenerated()
	return gbuo
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbuo *GoodBenefitUpdateOne) Mutation() *GoodBenefitMutation {
	return gbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gbuo *GoodBenefitUpdateOne) Select(field string, fields ...string) *GoodBenefitUpdateOne {
	gbuo.fields = append([]string{field}, fields...)
	return gbuo
}

// Save executes the query and returns the updated GoodBenefit entity.
func (gbuo *GoodBenefitUpdateOne) Save(ctx context.Context) (*GoodBenefit, error) {
	var (
		err  error
		node *GoodBenefit
	)
	if err := gbuo.defaults(); err != nil {
		return nil, err
	}
	if len(gbuo.hooks) == 0 {
		node, err = gbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gbuo.mutation = mutation
			node, err = gbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gbuo.hooks) - 1; i >= 0; i-- {
			if gbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodBenefit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodBenefitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gbuo *GoodBenefitUpdateOne) SaveX(ctx context.Context) *GoodBenefit {
	node, err := gbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gbuo *GoodBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := gbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbuo *GoodBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := gbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbuo *GoodBenefitUpdateOne) defaults() error {
	if _, ok := gbuo.mutation.UpdatedAt(); !ok {
		if goodbenefit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodbenefit.UpdateDefaultUpdatedAt()
		gbuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gbuo *GoodBenefitUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodBenefitUpdateOne {
	gbuo.modifiers = append(gbuo.modifiers, modifiers...)
	return gbuo
}

func (gbuo *GoodBenefitUpdateOne) sqlSave(ctx context.Context) (_node *GoodBenefit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodbenefit.FieldID,
			},
		},
	}
	id, ok := gbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodbenefit.FieldID)
		for _, f := range fields {
			if !goodbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreatedAt,
		})
	}
	if value, ok := gbuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreatedAt,
		})
	}
	if value, ok := gbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdatedAt,
		})
	}
	if value, ok := gbuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdatedAt,
		})
	}
	if value, ok := gbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeletedAt,
		})
	}
	if value, ok := gbuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeletedAt,
		})
	}
	if value, ok := gbuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldEntID,
		})
	}
	if value, ok := gbuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if gbuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if value, ok := gbuo.mutation.GoodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodType,
		})
	}
	if gbuo.mutation.GoodTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldGoodType,
		})
	}
	if value, ok := gbuo.mutation.GoodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodName,
		})
	}
	if gbuo.mutation.GoodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldGoodName,
		})
	}
	if value, ok := gbuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldCoinTypeID,
		})
	}
	if gbuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldCoinTypeID,
		})
	}
	if value, ok := gbuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldAmount,
		})
	}
	if gbuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldAmount,
		})
	}
	if value, ok := gbuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldState,
		})
	}
	if gbuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldState,
		})
	}
	if value, ok := gbuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldMessage,
		})
	}
	if gbuo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodbenefit.FieldMessage,
		})
	}
	if value, ok := gbuo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if value, ok := gbuo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if gbuo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodbenefit.FieldBenefitDate,
		})
	}
	if value, ok := gbuo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldTxID,
		})
	}
	if gbuo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodbenefit.FieldTxID,
		})
	}
	if value, ok := gbuo.mutation.Generated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodbenefit.FieldGenerated,
		})
	}
	if gbuo.mutation.GeneratedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: goodbenefit.FieldGenerated,
		})
	}
	_spec.Modifiers = gbuo.modifiers
	_node = &GoodBenefit{config: gbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
