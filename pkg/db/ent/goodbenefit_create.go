// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/goodbenefit"
	"github.com/google/uuid"
)

// GoodBenefitCreate is the builder for creating a GoodBenefit entity.
type GoodBenefitCreate struct {
	config
	mutation *GoodBenefitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gbc *GoodBenefitCreate) SetCreatedAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetCreatedAt(u)
	return gbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableCreatedAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetCreatedAt(*u)
	}
	return gbc
}

// SetUpdatedAt sets the "updated_at" field.
func (gbc *GoodBenefitCreate) SetUpdatedAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetUpdatedAt(u)
	return gbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableUpdatedAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetUpdatedAt(*u)
	}
	return gbc
}

// SetDeletedAt sets the "deleted_at" field.
func (gbc *GoodBenefitCreate) SetDeletedAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetDeletedAt(u)
	return gbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableDeletedAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetDeletedAt(*u)
	}
	return gbc
}

// SetEntID sets the "ent_id" field.
func (gbc *GoodBenefitCreate) SetEntID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetEntID(u)
	return gbc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableEntID(u *uuid.UUID) *GoodBenefitCreate {
	if u != nil {
		gbc.SetEntID(*u)
	}
	return gbc
}

// SetGoodID sets the "good_id" field.
func (gbc *GoodBenefitCreate) SetGoodID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetGoodID(u)
	return gbc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableGoodID(u *uuid.UUID) *GoodBenefitCreate {
	if u != nil {
		gbc.SetGoodID(*u)
	}
	return gbc
}

// SetGoodType sets the "good_type" field.
func (gbc *GoodBenefitCreate) SetGoodType(s string) *GoodBenefitCreate {
	gbc.mutation.SetGoodType(s)
	return gbc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableGoodType(s *string) *GoodBenefitCreate {
	if s != nil {
		gbc.SetGoodType(*s)
	}
	return gbc
}

// SetGoodName sets the "good_name" field.
func (gbc *GoodBenefitCreate) SetGoodName(s string) *GoodBenefitCreate {
	gbc.mutation.SetGoodName(s)
	return gbc
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableGoodName(s *string) *GoodBenefitCreate {
	if s != nil {
		gbc.SetGoodName(*s)
	}
	return gbc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gbc *GoodBenefitCreate) SetCoinTypeID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetCoinTypeID(u)
	return gbc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableCoinTypeID(u *uuid.UUID) *GoodBenefitCreate {
	if u != nil {
		gbc.SetCoinTypeID(*u)
	}
	return gbc
}

// SetAmount sets the "amount" field.
func (gbc *GoodBenefitCreate) SetAmount(s string) *GoodBenefitCreate {
	gbc.mutation.SetAmount(s)
	return gbc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableAmount(s *string) *GoodBenefitCreate {
	if s != nil {
		gbc.SetAmount(*s)
	}
	return gbc
}

// SetState sets the "state" field.
func (gbc *GoodBenefitCreate) SetState(s string) *GoodBenefitCreate {
	gbc.mutation.SetState(s)
	return gbc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableState(s *string) *GoodBenefitCreate {
	if s != nil {
		gbc.SetState(*s)
	}
	return gbc
}

// SetMessage sets the "message" field.
func (gbc *GoodBenefitCreate) SetMessage(s string) *GoodBenefitCreate {
	gbc.mutation.SetMessage(s)
	return gbc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableMessage(s *string) *GoodBenefitCreate {
	if s != nil {
		gbc.SetMessage(*s)
	}
	return gbc
}

// SetBenefitDate sets the "benefit_date" field.
func (gbc *GoodBenefitCreate) SetBenefitDate(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetBenefitDate(u)
	return gbc
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableBenefitDate(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetBenefitDate(*u)
	}
	return gbc
}

// SetTxID sets the "tx_id" field.
func (gbc *GoodBenefitCreate) SetTxID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetTxID(u)
	return gbc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableTxID(u *uuid.UUID) *GoodBenefitCreate {
	if u != nil {
		gbc.SetTxID(*u)
	}
	return gbc
}

// SetGenerated sets the "generated" field.
func (gbc *GoodBenefitCreate) SetGenerated(b bool) *GoodBenefitCreate {
	gbc.mutation.SetGenerated(b)
	return gbc
}

// SetNillableGenerated sets the "generated" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableGenerated(b *bool) *GoodBenefitCreate {
	if b != nil {
		gbc.SetGenerated(*b)
	}
	return gbc
}

// SetID sets the "id" field.
func (gbc *GoodBenefitCreate) SetID(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetID(u)
	return gbc
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbc *GoodBenefitCreate) Mutation() *GoodBenefitMutation {
	return gbc.mutation
}

// Save creates the GoodBenefit in the database.
func (gbc *GoodBenefitCreate) Save(ctx context.Context) (*GoodBenefit, error) {
	var (
		err  error
		node *GoodBenefit
	)
	if err := gbc.defaults(); err != nil {
		return nil, err
	}
	if len(gbc.hooks) == 0 {
		if err = gbc.check(); err != nil {
			return nil, err
		}
		node, err = gbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gbc.check(); err != nil {
				return nil, err
			}
			gbc.mutation = mutation
			if node, err = gbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gbc.hooks) - 1; i >= 0; i-- {
			if gbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodBenefit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodBenefitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gbc *GoodBenefitCreate) SaveX(ctx context.Context) *GoodBenefit {
	v, err := gbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbc *GoodBenefitCreate) Exec(ctx context.Context) error {
	_, err := gbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbc *GoodBenefitCreate) ExecX(ctx context.Context) {
	if err := gbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbc *GoodBenefitCreate) defaults() error {
	if _, ok := gbc.mutation.CreatedAt(); !ok {
		if goodbenefit.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultCreatedAt()
		gbc.mutation.SetCreatedAt(v)
	}
	if _, ok := gbc.mutation.UpdatedAt(); !ok {
		if goodbenefit.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultUpdatedAt()
		gbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gbc.mutation.DeletedAt(); !ok {
		if goodbenefit.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultDeletedAt()
		gbc.mutation.SetDeletedAt(v)
	}
	if _, ok := gbc.mutation.EntID(); !ok {
		if goodbenefit.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultEntID()
		gbc.mutation.SetEntID(v)
	}
	if _, ok := gbc.mutation.GoodID(); !ok {
		if goodbenefit.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultGoodID()
		gbc.mutation.SetGoodID(v)
	}
	if _, ok := gbc.mutation.GoodType(); !ok {
		v := goodbenefit.DefaultGoodType
		gbc.mutation.SetGoodType(v)
	}
	if _, ok := gbc.mutation.GoodName(); !ok {
		v := goodbenefit.DefaultGoodName
		gbc.mutation.SetGoodName(v)
	}
	if _, ok := gbc.mutation.CoinTypeID(); !ok {
		if goodbenefit.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultCoinTypeID()
		gbc.mutation.SetCoinTypeID(v)
	}
	if _, ok := gbc.mutation.Amount(); !ok {
		v := goodbenefit.DefaultAmount
		gbc.mutation.SetAmount(v)
	}
	if _, ok := gbc.mutation.State(); !ok {
		v := goodbenefit.DefaultState
		gbc.mutation.SetState(v)
	}
	if _, ok := gbc.mutation.Message(); !ok {
		v := goodbenefit.DefaultMessage
		gbc.mutation.SetMessage(v)
	}
	if _, ok := gbc.mutation.BenefitDate(); !ok {
		v := goodbenefit.DefaultBenefitDate
		gbc.mutation.SetBenefitDate(v)
	}
	if _, ok := gbc.mutation.TxID(); !ok {
		if goodbenefit.DefaultTxID == nil {
			return fmt.Errorf("ent: uninitialized goodbenefit.DefaultTxID (forgotten import ent/runtime?)")
		}
		v := goodbenefit.DefaultTxID()
		gbc.mutation.SetTxID(v)
	}
	if _, ok := gbc.mutation.Generated(); !ok {
		v := goodbenefit.DefaultGenerated
		gbc.mutation.SetGenerated(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gbc *GoodBenefitCreate) check() error {
	if _, ok := gbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodBenefit.created_at"`)}
	}
	if _, ok := gbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodBenefit.updated_at"`)}
	}
	if _, ok := gbc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodBenefit.deleted_at"`)}
	}
	if _, ok := gbc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "GoodBenefit.ent_id"`)}
	}
	return nil
}

func (gbc *GoodBenefitCreate) sqlSave(ctx context.Context) (*GoodBenefit, error) {
	_node, _spec := gbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (gbc *GoodBenefitCreate) createSpec() (*GoodBenefit, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodBenefit{config: gbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodbenefit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodbenefit.FieldID,
			},
		}
	)
	_spec.OnConflict = gbc.conflict
	if id, ok := gbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gbc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gbc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := gbc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gbc.mutation.GoodType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodType,
		})
		_node.GoodType = value
	}
	if value, ok := gbc.mutation.GoodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldGoodName,
		})
		_node.GoodName = value
	}
	if value, ok := gbc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := gbc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := gbc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldState,
		})
		_node.State = value
	}
	if value, ok := gbc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodbenefit.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := gbc.mutation.BenefitDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitDate,
		})
		_node.BenefitDate = value
	}
	if value, ok := gbc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldTxID,
		})
		_node.TxID = value
	}
	if value, ok := gbc.mutation.Generated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodbenefit.FieldGenerated,
		})
		_node.Generated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBenefit.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBenefitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gbc *GoodBenefitCreate) OnConflict(opts ...sql.ConflictOption) *GoodBenefitUpsertOne {
	gbc.conflict = opts
	return &GoodBenefitUpsertOne{
		create: gbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gbc *GoodBenefitCreate) OnConflictColumns(columns ...string) *GoodBenefitUpsertOne {
	gbc.conflict = append(gbc.conflict, sql.ConflictColumns(columns...))
	return &GoodBenefitUpsertOne{
		create: gbc,
	}
}

type (
	// GoodBenefitUpsertOne is the builder for "upsert"-ing
	//  one GoodBenefit node.
	GoodBenefitUpsertOne struct {
		create *GoodBenefitCreate
	}

	// GoodBenefitUpsert is the "OnConflict" setter.
	GoodBenefitUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodBenefitUpsert) SetCreatedAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateCreatedAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBenefitUpsert) AddCreatedAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBenefitUpsert) SetUpdatedAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateUpdatedAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBenefitUpsert) AddUpdatedAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBenefitUpsert) SetDeletedAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateDeletedAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBenefitUpsert) AddDeletedAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodBenefitUpsert) SetEntID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateEntID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsert) SetGoodID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateGoodID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodBenefitUpsert) ClearGoodID() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldGoodID)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *GoodBenefitUpsert) SetGoodType(v string) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateGoodType() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBenefitUpsert) ClearGoodType() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldGoodType)
	return u
}

// SetGoodName sets the "good_name" field.
func (u *GoodBenefitUpsert) SetGoodName(v string) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldGoodName, v)
	return u
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateGoodName() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldGoodName)
	return u
}

// ClearGoodName clears the value of the "good_name" field.
func (u *GoodBenefitUpsert) ClearGoodName() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldGoodName)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodBenefitUpsert) SetCoinTypeID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateCoinTypeID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodBenefitUpsert) ClearCoinTypeID() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *GoodBenefitUpsert) SetAmount(v string) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateAmount() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldAmount)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodBenefitUpsert) ClearAmount() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldAmount)
	return u
}

// SetState sets the "state" field.
func (u *GoodBenefitUpsert) SetState(v string) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateState() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *GoodBenefitUpsert) ClearState() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldState)
	return u
}

// SetMessage sets the "message" field.
func (u *GoodBenefitUpsert) SetMessage(v string) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateMessage() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *GoodBenefitUpsert) ClearMessage() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldMessage)
	return u
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodBenefitUpsert) SetBenefitDate(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldBenefitDate, v)
	return u
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateBenefitDate() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldBenefitDate)
	return u
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodBenefitUpsert) AddBenefitDate(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldBenefitDate, v)
	return u
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodBenefitUpsert) ClearBenefitDate() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldBenefitDate)
	return u
}

// SetTxID sets the "tx_id" field.
func (u *GoodBenefitUpsert) SetTxID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldTxID, v)
	return u
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateTxID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldTxID)
	return u
}

// ClearTxID clears the value of the "tx_id" field.
func (u *GoodBenefitUpsert) ClearTxID() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldTxID)
	return u
}

// SetGenerated sets the "generated" field.
func (u *GoodBenefitUpsert) SetGenerated(v bool) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldGenerated, v)
	return u
}

// UpdateGenerated sets the "generated" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateGenerated() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldGenerated)
	return u
}

// ClearGenerated clears the value of the "generated" field.
func (u *GoodBenefitUpsert) ClearGenerated() *GoodBenefitUpsert {
	u.SetNull(goodbenefit.FieldGenerated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertOne) UpdateNewValues() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodbenefit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodBenefit.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodBenefitUpsertOne) Ignore() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBenefitUpsertOne) DoNothing() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBenefitCreate.OnConflict
// documentation for more info.
func (u *GoodBenefitUpsertOne) Update(set func(*GoodBenefitUpsert)) *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodBenefitUpsertOne) SetCreatedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBenefitUpsertOne) AddCreatedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateCreatedAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBenefitUpsertOne) SetUpdatedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBenefitUpsertOne) AddUpdatedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateUpdatedAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBenefitUpsertOne) SetDeletedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBenefitUpsertOne) AddDeletedAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateDeletedAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodBenefitUpsertOne) SetEntID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateEntID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsertOne) SetGoodID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateGoodID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodBenefitUpsertOne) ClearGoodID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodBenefitUpsertOne) SetGoodType(v string) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateGoodType() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBenefitUpsertOne) ClearGoodType() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodType()
	})
}

// SetGoodName sets the "good_name" field.
func (u *GoodBenefitUpsertOne) SetGoodName(v string) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodName(v)
	})
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateGoodName() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodName()
	})
}

// ClearGoodName clears the value of the "good_name" field.
func (u *GoodBenefitUpsertOne) ClearGoodName() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodName()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodBenefitUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateCoinTypeID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodBenefitUpsertOne) ClearCoinTypeID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodBenefitUpsertOne) SetAmount(v string) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateAmount() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodBenefitUpsertOne) ClearAmount() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearAmount()
	})
}

// SetState sets the "state" field.
func (u *GoodBenefitUpsertOne) SetState(v string) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateState() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *GoodBenefitUpsertOne) ClearState() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearState()
	})
}

// SetMessage sets the "message" field.
func (u *GoodBenefitUpsertOne) SetMessage(v string) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateMessage() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *GoodBenefitUpsertOne) ClearMessage() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearMessage()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodBenefitUpsertOne) SetBenefitDate(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodBenefitUpsertOne) AddBenefitDate(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateBenefitDate() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodBenefitUpsertOne) ClearBenefitDate() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearBenefitDate()
	})
}

// SetTxID sets the "tx_id" field.
func (u *GoodBenefitUpsertOne) SetTxID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateTxID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *GoodBenefitUpsertOne) ClearTxID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearTxID()
	})
}

// SetGenerated sets the "generated" field.
func (u *GoodBenefitUpsertOne) SetGenerated(v bool) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGenerated(v)
	})
}

// UpdateGenerated sets the "generated" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateGenerated() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGenerated()
	})
}

// ClearGenerated clears the value of the "generated" field.
func (u *GoodBenefitUpsertOne) ClearGenerated() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGenerated()
	})
}

// Exec executes the query.
func (u *GoodBenefitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodBenefitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBenefitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodBenefitUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodBenefitUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodBenefitCreateBulk is the builder for creating many GoodBenefit entities in bulk.
type GoodBenefitCreateBulk struct {
	config
	builders []*GoodBenefitCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodBenefit entities in the database.
func (gbcb *GoodBenefitCreateBulk) Save(ctx context.Context) ([]*GoodBenefit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gbcb.builders))
	nodes := make([]*GoodBenefit, len(gbcb.builders))
	mutators := make([]Mutator, len(gbcb.builders))
	for i := range gbcb.builders {
		func(i int, root context.Context) {
			builder := gbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodBenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gbcb *GoodBenefitCreateBulk) SaveX(ctx context.Context) []*GoodBenefit {
	v, err := gbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbcb *GoodBenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := gbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbcb *GoodBenefitCreateBulk) ExecX(ctx context.Context) {
	if err := gbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBenefit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBenefitUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gbcb *GoodBenefitCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodBenefitUpsertBulk {
	gbcb.conflict = opts
	return &GoodBenefitUpsertBulk{
		create: gbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gbcb *GoodBenefitCreateBulk) OnConflictColumns(columns ...string) *GoodBenefitUpsertBulk {
	gbcb.conflict = append(gbcb.conflict, sql.ConflictColumns(columns...))
	return &GoodBenefitUpsertBulk{
		create: gbcb,
	}
}

// GoodBenefitUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodBenefit nodes.
type GoodBenefitUpsertBulk struct {
	create *GoodBenefitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertBulk) UpdateNewValues() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodbenefit.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertBulk) Ignore() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBenefitUpsertBulk) DoNothing() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBenefitCreateBulk.OnConflict
// documentation for more info.
func (u *GoodBenefitUpsertBulk) Update(set func(*GoodBenefitUpsert)) *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodBenefitUpsertBulk) SetCreatedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodBenefitUpsertBulk) AddCreatedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateCreatedAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodBenefitUpsertBulk) SetUpdatedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodBenefitUpsertBulk) AddUpdatedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateUpdatedAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodBenefitUpsertBulk) SetDeletedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodBenefitUpsertBulk) AddDeletedAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateDeletedAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodBenefitUpsertBulk) SetEntID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateEntID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsertBulk) SetGoodID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateGoodID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodBenefitUpsertBulk) ClearGoodID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodID()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodBenefitUpsertBulk) SetGoodType(v string) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateGoodType() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodBenefitUpsertBulk) ClearGoodType() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodType()
	})
}

// SetGoodName sets the "good_name" field.
func (u *GoodBenefitUpsertBulk) SetGoodName(v string) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodName(v)
	})
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateGoodName() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodName()
	})
}

// ClearGoodName clears the value of the "good_name" field.
func (u *GoodBenefitUpsertBulk) ClearGoodName() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGoodName()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodBenefitUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateCoinTypeID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GoodBenefitUpsertBulk) ClearCoinTypeID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *GoodBenefitUpsertBulk) SetAmount(v string) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateAmount() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *GoodBenefitUpsertBulk) ClearAmount() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearAmount()
	})
}

// SetState sets the "state" field.
func (u *GoodBenefitUpsertBulk) SetState(v string) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateState() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *GoodBenefitUpsertBulk) ClearState() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearState()
	})
}

// SetMessage sets the "message" field.
func (u *GoodBenefitUpsertBulk) SetMessage(v string) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateMessage() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *GoodBenefitUpsertBulk) ClearMessage() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearMessage()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *GoodBenefitUpsertBulk) SetBenefitDate(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *GoodBenefitUpsertBulk) AddBenefitDate(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateBenefitDate() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *GoodBenefitUpsertBulk) ClearBenefitDate() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearBenefitDate()
	})
}

// SetTxID sets the "tx_id" field.
func (u *GoodBenefitUpsertBulk) SetTxID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateTxID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *GoodBenefitUpsertBulk) ClearTxID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearTxID()
	})
}

// SetGenerated sets the "generated" field.
func (u *GoodBenefitUpsertBulk) SetGenerated(v bool) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGenerated(v)
	})
}

// UpdateGenerated sets the "generated" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateGenerated() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGenerated()
	})
}

// ClearGenerated clears the value of the "generated" field.
func (u *GoodBenefitUpsertBulk) ClearGenerated() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.ClearGenerated()
	})
}

// Exec executes the query.
func (u *GoodBenefitUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodBenefitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodBenefitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBenefitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
