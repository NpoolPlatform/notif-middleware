// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/userannouncement"
	"github.com/google/uuid"
)

// UserAnnouncementUpdate is the builder for updating UserAnnouncement entities.
type UserAnnouncementUpdate struct {
	config
	hooks     []Hook
	mutation  *UserAnnouncementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserAnnouncementUpdate builder.
func (uau *UserAnnouncementUpdate) Where(ps ...predicate.UserAnnouncement) *UserAnnouncementUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetCreatedAt sets the "created_at" field.
func (uau *UserAnnouncementUpdate) SetCreatedAt(u uint32) *UserAnnouncementUpdate {
	uau.mutation.ResetCreatedAt()
	uau.mutation.SetCreatedAt(u)
	return uau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableCreatedAt(u *uint32) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetCreatedAt(*u)
	}
	return uau
}

// AddCreatedAt adds u to the "created_at" field.
func (uau *UserAnnouncementUpdate) AddCreatedAt(u int32) *UserAnnouncementUpdate {
	uau.mutation.AddCreatedAt(u)
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserAnnouncementUpdate) SetUpdatedAt(u uint32) *UserAnnouncementUpdate {
	uau.mutation.ResetUpdatedAt()
	uau.mutation.SetUpdatedAt(u)
	return uau
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uau *UserAnnouncementUpdate) AddUpdatedAt(u int32) *UserAnnouncementUpdate {
	uau.mutation.AddUpdatedAt(u)
	return uau
}

// SetDeletedAt sets the "deleted_at" field.
func (uau *UserAnnouncementUpdate) SetDeletedAt(u uint32) *UserAnnouncementUpdate {
	uau.mutation.ResetDeletedAt()
	uau.mutation.SetDeletedAt(u)
	return uau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableDeletedAt(u *uint32) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetDeletedAt(*u)
	}
	return uau
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uau *UserAnnouncementUpdate) AddDeletedAt(u int32) *UserAnnouncementUpdate {
	uau.mutation.AddDeletedAt(u)
	return uau
}

// SetEntID sets the "ent_id" field.
func (uau *UserAnnouncementUpdate) SetEntID(u uuid.UUID) *UserAnnouncementUpdate {
	uau.mutation.SetEntID(u)
	return uau
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableEntID(u *uuid.UUID) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetEntID(*u)
	}
	return uau
}

// SetAppID sets the "app_id" field.
func (uau *UserAnnouncementUpdate) SetAppID(u uuid.UUID) *UserAnnouncementUpdate {
	uau.mutation.SetAppID(u)
	return uau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableAppID(u *uuid.UUID) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetAppID(*u)
	}
	return uau
}

// ClearAppID clears the value of the "app_id" field.
func (uau *UserAnnouncementUpdate) ClearAppID() *UserAnnouncementUpdate {
	uau.mutation.ClearAppID()
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAnnouncementUpdate) SetUserID(u uuid.UUID) *UserAnnouncementUpdate {
	uau.mutation.SetUserID(u)
	return uau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableUserID(u *uuid.UUID) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetUserID(*u)
	}
	return uau
}

// ClearUserID clears the value of the "user_id" field.
func (uau *UserAnnouncementUpdate) ClearUserID() *UserAnnouncementUpdate {
	uau.mutation.ClearUserID()
	return uau
}

// SetAnnouncementID sets the "announcement_id" field.
func (uau *UserAnnouncementUpdate) SetAnnouncementID(u uuid.UUID) *UserAnnouncementUpdate {
	uau.mutation.SetAnnouncementID(u)
	return uau
}

// SetNillableAnnouncementID sets the "announcement_id" field if the given value is not nil.
func (uau *UserAnnouncementUpdate) SetNillableAnnouncementID(u *uuid.UUID) *UserAnnouncementUpdate {
	if u != nil {
		uau.SetAnnouncementID(*u)
	}
	return uau
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (uau *UserAnnouncementUpdate) ClearAnnouncementID() *UserAnnouncementUpdate {
	uau.mutation.ClearAnnouncementID()
	return uau
}

// Mutation returns the UserAnnouncementMutation object of the builder.
func (uau *UserAnnouncementUpdate) Mutation() *UserAnnouncementMutation {
	return uau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAnnouncementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uau.defaults(); err != nil {
		return 0, err
	}
	if len(uau.hooks) == 0 {
		affected, err = uau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uau.mutation = mutation
			affected, err = uau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uau.hooks) - 1; i >= 0; i-- {
			if uau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAnnouncementUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAnnouncementUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAnnouncementUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserAnnouncementUpdate) defaults() error {
	if _, ok := uau.mutation.UpdatedAt(); !ok {
		if userannouncement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userannouncement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userannouncement.UpdateDefaultUpdatedAt()
		uau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uau *UserAnnouncementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserAnnouncementUpdate {
	uau.modifiers = append(uau.modifiers, modifiers...)
	return uau
}

func (uau *UserAnnouncementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userannouncement.Table,
			Columns: userannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: userannouncement.FieldID,
			},
		},
	}
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldCreatedAt,
		})
	}
	if value, ok := uau.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldCreatedAt,
		})
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := uau.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := uau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldDeletedAt,
		})
	}
	if value, ok := uau.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldDeletedAt,
		})
	}
	if value, ok := uau.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldEntID,
		})
	}
	if value, ok := uau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldAppID,
		})
	}
	if uau.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldAppID,
		})
	}
	if value, ok := uau.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldUserID,
		})
	}
	if uau.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldUserID,
		})
	}
	if value, ok := uau.mutation.AnnouncementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldAnnouncementID,
		})
	}
	if uau.mutation.AnnouncementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldAnnouncementID,
		})
	}
	_spec.Modifiers = uau.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userannouncement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserAnnouncementUpdateOne is the builder for updating a single UserAnnouncement entity.
type UserAnnouncementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserAnnouncementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (uauo *UserAnnouncementUpdateOne) SetCreatedAt(u uint32) *UserAnnouncementUpdateOne {
	uauo.mutation.ResetCreatedAt()
	uauo.mutation.SetCreatedAt(u)
	return uauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableCreatedAt(u *uint32) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetCreatedAt(*u)
	}
	return uauo
}

// AddCreatedAt adds u to the "created_at" field.
func (uauo *UserAnnouncementUpdateOne) AddCreatedAt(u int32) *UserAnnouncementUpdateOne {
	uauo.mutation.AddCreatedAt(u)
	return uauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserAnnouncementUpdateOne) SetUpdatedAt(u uint32) *UserAnnouncementUpdateOne {
	uauo.mutation.ResetUpdatedAt()
	uauo.mutation.SetUpdatedAt(u)
	return uauo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uauo *UserAnnouncementUpdateOne) AddUpdatedAt(u int32) *UserAnnouncementUpdateOne {
	uauo.mutation.AddUpdatedAt(u)
	return uauo
}

// SetDeletedAt sets the "deleted_at" field.
func (uauo *UserAnnouncementUpdateOne) SetDeletedAt(u uint32) *UserAnnouncementUpdateOne {
	uauo.mutation.ResetDeletedAt()
	uauo.mutation.SetDeletedAt(u)
	return uauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableDeletedAt(u *uint32) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetDeletedAt(*u)
	}
	return uauo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uauo *UserAnnouncementUpdateOne) AddDeletedAt(u int32) *UserAnnouncementUpdateOne {
	uauo.mutation.AddDeletedAt(u)
	return uauo
}

// SetEntID sets the "ent_id" field.
func (uauo *UserAnnouncementUpdateOne) SetEntID(u uuid.UUID) *UserAnnouncementUpdateOne {
	uauo.mutation.SetEntID(u)
	return uauo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableEntID(u *uuid.UUID) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetEntID(*u)
	}
	return uauo
}

// SetAppID sets the "app_id" field.
func (uauo *UserAnnouncementUpdateOne) SetAppID(u uuid.UUID) *UserAnnouncementUpdateOne {
	uauo.mutation.SetAppID(u)
	return uauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableAppID(u *uuid.UUID) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetAppID(*u)
	}
	return uauo
}

// ClearAppID clears the value of the "app_id" field.
func (uauo *UserAnnouncementUpdateOne) ClearAppID() *UserAnnouncementUpdateOne {
	uauo.mutation.ClearAppID()
	return uauo
}

// SetUserID sets the "user_id" field.
func (uauo *UserAnnouncementUpdateOne) SetUserID(u uuid.UUID) *UserAnnouncementUpdateOne {
	uauo.mutation.SetUserID(u)
	return uauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableUserID(u *uuid.UUID) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetUserID(*u)
	}
	return uauo
}

// ClearUserID clears the value of the "user_id" field.
func (uauo *UserAnnouncementUpdateOne) ClearUserID() *UserAnnouncementUpdateOne {
	uauo.mutation.ClearUserID()
	return uauo
}

// SetAnnouncementID sets the "announcement_id" field.
func (uauo *UserAnnouncementUpdateOne) SetAnnouncementID(u uuid.UUID) *UserAnnouncementUpdateOne {
	uauo.mutation.SetAnnouncementID(u)
	return uauo
}

// SetNillableAnnouncementID sets the "announcement_id" field if the given value is not nil.
func (uauo *UserAnnouncementUpdateOne) SetNillableAnnouncementID(u *uuid.UUID) *UserAnnouncementUpdateOne {
	if u != nil {
		uauo.SetAnnouncementID(*u)
	}
	return uauo
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (uauo *UserAnnouncementUpdateOne) ClearAnnouncementID() *UserAnnouncementUpdateOne {
	uauo.mutation.ClearAnnouncementID()
	return uauo
}

// Mutation returns the UserAnnouncementMutation object of the builder.
func (uauo *UserAnnouncementUpdateOne) Mutation() *UserAnnouncementMutation {
	return uauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAnnouncementUpdateOne) Select(field string, fields ...string) *UserAnnouncementUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAnnouncement entity.
func (uauo *UserAnnouncementUpdateOne) Save(ctx context.Context) (*UserAnnouncement, error) {
	var (
		err  error
		node *UserAnnouncement
	)
	if err := uauo.defaults(); err != nil {
		return nil, err
	}
	if len(uauo.hooks) == 0 {
		node, err = uauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uauo.mutation = mutation
			node, err = uauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uauo.hooks) - 1; i >= 0; i-- {
			if uauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserAnnouncement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserAnnouncementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAnnouncementUpdateOne) SaveX(ctx context.Context) *UserAnnouncement {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAnnouncementUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAnnouncementUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserAnnouncementUpdateOne) defaults() error {
	if _, ok := uauo.mutation.UpdatedAt(); !ok {
		if userannouncement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userannouncement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userannouncement.UpdateDefaultUpdatedAt()
		uauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uauo *UserAnnouncementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserAnnouncementUpdateOne {
	uauo.modifiers = append(uauo.modifiers, modifiers...)
	return uauo
}

func (uauo *UserAnnouncementUpdateOne) sqlSave(ctx context.Context) (_node *UserAnnouncement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userannouncement.Table,
			Columns: userannouncement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: userannouncement.FieldID,
			},
		},
	}
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAnnouncement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userannouncement.FieldID)
		for _, f := range fields {
			if !userannouncement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userannouncement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldCreatedAt,
		})
	}
	if value, ok := uauo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldCreatedAt,
		})
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := uauo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldUpdatedAt,
		})
	}
	if value, ok := uauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldDeletedAt,
		})
	}
	if value, ok := uauo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userannouncement.FieldDeletedAt,
		})
	}
	if value, ok := uauo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldEntID,
		})
	}
	if value, ok := uauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldAppID,
		})
	}
	if uauo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldAppID,
		})
	}
	if value, ok := uauo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldUserID,
		})
	}
	if uauo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldUserID,
		})
	}
	if value, ok := uauo.mutation.AnnouncementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userannouncement.FieldAnnouncementID,
		})
	}
	if uauo.mutation.AnnouncementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: userannouncement.FieldAnnouncementID,
		})
	}
	_spec.Modifiers = uauo.modifiers
	_node = &UserAnnouncement{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userannouncement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
