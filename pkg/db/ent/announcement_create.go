// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/announcement"
	"github.com/google/uuid"
)

// AnnouncementCreate is the builder for creating a Announcement entity.
type AnnouncementCreate struct {
	config
	mutation *AnnouncementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AnnouncementCreate) SetCreatedAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableCreatedAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AnnouncementCreate) SetUpdatedAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableUpdatedAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AnnouncementCreate) SetDeletedAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableDeletedAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AnnouncementCreate) SetAppID(u uuid.UUID) *AnnouncementCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableAppID(u *uuid.UUID) *AnnouncementCreate {
	if u != nil {
		ac.SetAppID(*u)
	}
	return ac
}

// SetLangID sets the "lang_id" field.
func (ac *AnnouncementCreate) SetLangID(u uuid.UUID) *AnnouncementCreate {
	ac.mutation.SetLangID(u)
	return ac
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableLangID(u *uuid.UUID) *AnnouncementCreate {
	if u != nil {
		ac.SetLangID(*u)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AnnouncementCreate) SetTitle(s string) *AnnouncementCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableTitle(s *string) *AnnouncementCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetContent sets the "content" field.
func (ac *AnnouncementCreate) SetContent(s string) *AnnouncementCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableContent(s *string) *AnnouncementCreate {
	if s != nil {
		ac.SetContent(*s)
	}
	return ac
}

// SetChannel sets the "channel" field.
func (ac *AnnouncementCreate) SetChannel(s string) *AnnouncementCreate {
	ac.mutation.SetChannel(s)
	return ac
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableChannel(s *string) *AnnouncementCreate {
	if s != nil {
		ac.SetChannel(*s)
	}
	return ac
}

// SetStartAt sets the "start_at" field.
func (ac *AnnouncementCreate) SetStartAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetStartAt(u)
	return ac
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableStartAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetStartAt(*u)
	}
	return ac
}

// SetEndAt sets the "end_at" field.
func (ac *AnnouncementCreate) SetEndAt(u uint32) *AnnouncementCreate {
	ac.mutation.SetEndAt(u)
	return ac
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableEndAt(u *uint32) *AnnouncementCreate {
	if u != nil {
		ac.SetEndAt(*u)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AnnouncementCreate) SetType(s string) *AnnouncementCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableType(s *string) *AnnouncementCreate {
	if s != nil {
		ac.SetType(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AnnouncementCreate) SetID(u uuid.UUID) *AnnouncementCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableID(u *uuid.UUID) *AnnouncementCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AnnouncementMutation object of the builder.
func (ac *AnnouncementCreate) Mutation() *AnnouncementMutation {
	return ac.mutation
}

// Save creates the Announcement in the database.
func (ac *AnnouncementCreate) Save(ctx context.Context) (*Announcement, error) {
	var (
		err  error
		node *Announcement
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Announcement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AnnouncementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnouncementCreate) SaveX(ctx context.Context) *Announcement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnnouncementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnnouncementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AnnouncementCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if announcement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if announcement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		if announcement.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.AppID(); !ok {
		if announcement.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultAppID()
		ac.mutation.SetAppID(v)
	}
	if _, ok := ac.mutation.LangID(); !ok {
		if announcement.DefaultLangID == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultLangID (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultLangID()
		ac.mutation.SetLangID(v)
	}
	if _, ok := ac.mutation.Title(); !ok {
		v := announcement.DefaultTitle
		ac.mutation.SetTitle(v)
	}
	if _, ok := ac.mutation.Content(); !ok {
		v := announcement.DefaultContent
		ac.mutation.SetContent(v)
	}
	if _, ok := ac.mutation.Channel(); !ok {
		v := announcement.DefaultChannel
		ac.mutation.SetChannel(v)
	}
	if _, ok := ac.mutation.StartAt(); !ok {
		v := announcement.DefaultStartAt
		ac.mutation.SetStartAt(v)
	}
	if _, ok := ac.mutation.EndAt(); !ok {
		v := announcement.DefaultEndAt
		ac.mutation.SetEndAt(v)
	}
	if _, ok := ac.mutation.GetType(); !ok {
		v := announcement.DefaultType
		ac.mutation.SetType(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if announcement.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized announcement.DefaultID (forgotten import ent/runtime?)")
		}
		v := announcement.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnnouncementCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Announcement.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Announcement.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Announcement.deleted_at"`)}
	}
	return nil
}

func (ac *AnnouncementCreate) sqlSave(ctx context.Context) (*Announcement, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AnnouncementCreate) createSpec() (*Announcement, *sqlgraph.CreateSpec) {
	var (
		_node = &Announcement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: announcement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: announcement.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: announcement.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: announcement.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ac.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldChannel,
		})
		_node.Channel = value
	}
	if value, ok := ac.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := ac.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: announcement.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldType,
		})
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AnnouncementCreate) OnConflict(opts ...sql.ConflictOption) *AnnouncementUpsertOne {
	ac.conflict = opts
	return &AnnouncementUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AnnouncementCreate) OnConflictColumns(columns ...string) *AnnouncementUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementUpsertOne{
		create: ac,
	}
}

type (
	// AnnouncementUpsertOne is the builder for "upsert"-ing
	//  one Announcement node.
	AnnouncementUpsertOne struct {
		create *AnnouncementCreate
	}

	// AnnouncementUpsert is the "OnConflict" setter.
	AnnouncementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AnnouncementUpsert) SetCreatedAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateCreatedAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AnnouncementUpsert) AddCreatedAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementUpsert) SetUpdatedAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateUpdatedAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AnnouncementUpsert) AddUpdatedAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementUpsert) SetDeletedAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateDeletedAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AnnouncementUpsert) AddDeletedAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsert) SetAppID(v uuid.UUID) *AnnouncementUpsert {
	u.Set(announcement.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateAppID() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AnnouncementUpsert) ClearAppID() *AnnouncementUpsert {
	u.SetNull(announcement.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *AnnouncementUpsert) SetLangID(v uuid.UUID) *AnnouncementUpsert {
	u.Set(announcement.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateLangID() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldLangID)
	return u
}

// ClearLangID clears the value of the "lang_id" field.
func (u *AnnouncementUpsert) ClearLangID() *AnnouncementUpsert {
	u.SetNull(announcement.FieldLangID)
	return u
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsert) SetTitle(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateTitle() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *AnnouncementUpsert) ClearTitle() *AnnouncementUpsert {
	u.SetNull(announcement.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsert) SetContent(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateContent() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *AnnouncementUpsert) ClearContent() *AnnouncementUpsert {
	u.SetNull(announcement.FieldContent)
	return u
}

// SetChannel sets the "channel" field.
func (u *AnnouncementUpsert) SetChannel(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateChannel() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldChannel)
	return u
}

// ClearChannel clears the value of the "channel" field.
func (u *AnnouncementUpsert) ClearChannel() *AnnouncementUpsert {
	u.SetNull(announcement.FieldChannel)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *AnnouncementUpsert) SetStartAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateStartAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *AnnouncementUpsert) AddStartAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AnnouncementUpsert) ClearStartAt() *AnnouncementUpsert {
	u.SetNull(announcement.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *AnnouncementUpsert) SetEndAt(v uint32) *AnnouncementUpsert {
	u.Set(announcement.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateEndAt() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *AnnouncementUpsert) AddEndAt(v uint32) *AnnouncementUpsert {
	u.Add(announcement.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AnnouncementUpsert) ClearEndAt() *AnnouncementUpsert {
	u.SetNull(announcement.FieldEndAt)
	return u
}

// SetType sets the "type" field.
func (u *AnnouncementUpsert) SetType(v string) *AnnouncementUpsert {
	u.Set(announcement.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AnnouncementUpsert) UpdateType() *AnnouncementUpsert {
	u.SetExcluded(announcement.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *AnnouncementUpsert) ClearType() *AnnouncementUpsert {
	u.SetNull(announcement.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AnnouncementUpsertOne) UpdateNewValues() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(announcement.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Announcement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AnnouncementUpsertOne) Ignore() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementUpsertOne) DoNothing() *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementCreate.OnConflict
// documentation for more info.
func (u *AnnouncementUpsertOne) Update(set func(*AnnouncementUpsert)) *AnnouncementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AnnouncementUpsertOne) SetCreatedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AnnouncementUpsertOne) AddCreatedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateCreatedAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementUpsertOne) SetUpdatedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AnnouncementUpsertOne) AddUpdatedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateUpdatedAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementUpsertOne) SetDeletedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AnnouncementUpsertOne) AddDeletedAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateDeletedAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsertOne) SetAppID(v uuid.UUID) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateAppID() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AnnouncementUpsertOne) ClearAppID() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AnnouncementUpsertOne) SetLangID(v uuid.UUID) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateLangID() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *AnnouncementUpsertOne) ClearLangID() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearLangID()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsertOne) SetTitle(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateTitle() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *AnnouncementUpsertOne) ClearTitle() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsertOne) SetContent(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateContent() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *AnnouncementUpsertOne) ClearContent() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearContent()
	})
}

// SetChannel sets the "channel" field.
func (u *AnnouncementUpsertOne) SetChannel(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateChannel() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *AnnouncementUpsertOne) ClearChannel() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearChannel()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AnnouncementUpsertOne) SetStartAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AnnouncementUpsertOne) AddStartAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateStartAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AnnouncementUpsertOne) ClearStartAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AnnouncementUpsertOne) SetEndAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AnnouncementUpsertOne) AddEndAt(v uint32) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateEndAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AnnouncementUpsertOne) ClearEndAt() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearEndAt()
	})
}

// SetType sets the "type" field.
func (u *AnnouncementUpsertOne) SetType(v string) *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AnnouncementUpsertOne) UpdateType() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *AnnouncementUpsertOne) ClearType() *AnnouncementUpsertOne {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *AnnouncementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnnouncementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnnouncementUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AnnouncementUpsertOne.ID is not supported by MySQL driver. Use AnnouncementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnnouncementUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnnouncementCreateBulk is the builder for creating many Announcement entities in bulk.
type AnnouncementCreateBulk struct {
	config
	builders []*AnnouncementCreate
	conflict []sql.ConflictOption
}

// Save creates the Announcement entities in the database.
func (acb *AnnouncementCreateBulk) Save(ctx context.Context) ([]*Announcement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Announcement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnnouncementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) SaveX(ctx context.Context) []*Announcement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnnouncementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AnnouncementCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnnouncementUpsertBulk {
	acb.conflict = opts
	return &AnnouncementUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AnnouncementCreateBulk) OnConflictColumns(columns ...string) *AnnouncementUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementUpsertBulk{
		create: acb,
	}
}

// AnnouncementUpsertBulk is the builder for "upsert"-ing
// a bulk of Announcement nodes.
type AnnouncementUpsertBulk struct {
	create *AnnouncementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcement.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AnnouncementUpsertBulk) UpdateNewValues() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(announcement.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Announcement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AnnouncementUpsertBulk) Ignore() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementUpsertBulk) DoNothing() *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementCreateBulk.OnConflict
// documentation for more info.
func (u *AnnouncementUpsertBulk) Update(set func(*AnnouncementUpsert)) *AnnouncementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AnnouncementUpsertBulk) SetCreatedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AnnouncementUpsertBulk) AddCreatedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateCreatedAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementUpsertBulk) SetUpdatedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AnnouncementUpsertBulk) AddUpdatedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateUpdatedAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementUpsertBulk) SetDeletedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AnnouncementUpsertBulk) AddDeletedAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateDeletedAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AnnouncementUpsertBulk) SetAppID(v uuid.UUID) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateAppID() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AnnouncementUpsertBulk) ClearAppID() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AnnouncementUpsertBulk) SetLangID(v uuid.UUID) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateLangID() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *AnnouncementUpsertBulk) ClearLangID() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearLangID()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementUpsertBulk) SetTitle(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateTitle() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *AnnouncementUpsertBulk) ClearTitle() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementUpsertBulk) SetContent(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateContent() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *AnnouncementUpsertBulk) ClearContent() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearContent()
	})
}

// SetChannel sets the "channel" field.
func (u *AnnouncementUpsertBulk) SetChannel(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateChannel() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *AnnouncementUpsertBulk) ClearChannel() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearChannel()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AnnouncementUpsertBulk) SetStartAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *AnnouncementUpsertBulk) AddStartAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateStartAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AnnouncementUpsertBulk) ClearStartAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AnnouncementUpsertBulk) SetEndAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *AnnouncementUpsertBulk) AddEndAt(v uint32) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateEndAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AnnouncementUpsertBulk) ClearEndAt() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearEndAt()
	})
}

// SetType sets the "type" field.
func (u *AnnouncementUpsertBulk) SetType(v string) *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AnnouncementUpsertBulk) UpdateType() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *AnnouncementUpsertBulk) ClearType() *AnnouncementUpsertBulk {
	return u.Update(func(s *AnnouncementUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *AnnouncementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AnnouncementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnnouncementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
