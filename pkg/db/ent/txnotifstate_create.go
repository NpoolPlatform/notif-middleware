// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/txnotifstate"
	"github.com/google/uuid"
)

// TxNotifStateCreate is the builder for creating a TxNotifState entity.
type TxNotifStateCreate struct {
	config
	mutation *TxNotifStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tnsc *TxNotifStateCreate) SetCreatedAt(u uint32) *TxNotifStateCreate {
	tnsc.mutation.SetCreatedAt(u)
	return tnsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableCreatedAt(u *uint32) *TxNotifStateCreate {
	if u != nil {
		tnsc.SetCreatedAt(*u)
	}
	return tnsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tnsc *TxNotifStateCreate) SetUpdatedAt(u uint32) *TxNotifStateCreate {
	tnsc.mutation.SetUpdatedAt(u)
	return tnsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableUpdatedAt(u *uint32) *TxNotifStateCreate {
	if u != nil {
		tnsc.SetUpdatedAt(*u)
	}
	return tnsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tnsc *TxNotifStateCreate) SetDeletedAt(u uint32) *TxNotifStateCreate {
	tnsc.mutation.SetDeletedAt(u)
	return tnsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableDeletedAt(u *uint32) *TxNotifStateCreate {
	if u != nil {
		tnsc.SetDeletedAt(*u)
	}
	return tnsc
}

// SetTxID sets the "tx_id" field.
func (tnsc *TxNotifStateCreate) SetTxID(u uuid.UUID) *TxNotifStateCreate {
	tnsc.mutation.SetTxID(u)
	return tnsc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableTxID(u *uuid.UUID) *TxNotifStateCreate {
	if u != nil {
		tnsc.SetTxID(*u)
	}
	return tnsc
}

// SetNotifState sets the "notif_state" field.
func (tnsc *TxNotifStateCreate) SetNotifState(s string) *TxNotifStateCreate {
	tnsc.mutation.SetNotifState(s)
	return tnsc
}

// SetNillableNotifState sets the "notif_state" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableNotifState(s *string) *TxNotifStateCreate {
	if s != nil {
		tnsc.SetNotifState(*s)
	}
	return tnsc
}

// SetTxType sets the "tx_type" field.
func (tnsc *TxNotifStateCreate) SetTxType(s string) *TxNotifStateCreate {
	tnsc.mutation.SetTxType(s)
	return tnsc
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableTxType(s *string) *TxNotifStateCreate {
	if s != nil {
		tnsc.SetTxType(*s)
	}
	return tnsc
}

// SetID sets the "id" field.
func (tnsc *TxNotifStateCreate) SetID(u uuid.UUID) *TxNotifStateCreate {
	tnsc.mutation.SetID(u)
	return tnsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tnsc *TxNotifStateCreate) SetNillableID(u *uuid.UUID) *TxNotifStateCreate {
	if u != nil {
		tnsc.SetID(*u)
	}
	return tnsc
}

// Mutation returns the TxNotifStateMutation object of the builder.
func (tnsc *TxNotifStateCreate) Mutation() *TxNotifStateMutation {
	return tnsc.mutation
}

// Save creates the TxNotifState in the database.
func (tnsc *TxNotifStateCreate) Save(ctx context.Context) (*TxNotifState, error) {
	var (
		err  error
		node *TxNotifState
	)
	if err := tnsc.defaults(); err != nil {
		return nil, err
	}
	if len(tnsc.hooks) == 0 {
		if err = tnsc.check(); err != nil {
			return nil, err
		}
		node, err = tnsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNotifStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tnsc.check(); err != nil {
				return nil, err
			}
			tnsc.mutation = mutation
			if node, err = tnsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tnsc.hooks) - 1; i >= 0; i-- {
			if tnsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tnsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TxNotifState)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TxNotifStateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tnsc *TxNotifStateCreate) SaveX(ctx context.Context) *TxNotifState {
	v, err := tnsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnsc *TxNotifStateCreate) Exec(ctx context.Context) error {
	_, err := tnsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnsc *TxNotifStateCreate) ExecX(ctx context.Context) {
	if err := tnsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnsc *TxNotifStateCreate) defaults() error {
	if _, ok := tnsc.mutation.CreatedAt(); !ok {
		if txnotifstate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := txnotifstate.DefaultCreatedAt()
		tnsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tnsc.mutation.UpdatedAt(); !ok {
		if txnotifstate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnotifstate.DefaultUpdatedAt()
		tnsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tnsc.mutation.DeletedAt(); !ok {
		if txnotifstate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := txnotifstate.DefaultDeletedAt()
		tnsc.mutation.SetDeletedAt(v)
	}
	if _, ok := tnsc.mutation.TxID(); !ok {
		if txnotifstate.DefaultTxID == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.DefaultTxID (forgotten import ent/runtime?)")
		}
		v := txnotifstate.DefaultTxID()
		tnsc.mutation.SetTxID(v)
	}
	if _, ok := tnsc.mutation.NotifState(); !ok {
		v := txnotifstate.DefaultNotifState
		tnsc.mutation.SetNotifState(v)
	}
	if _, ok := tnsc.mutation.TxType(); !ok {
		v := txnotifstate.DefaultTxType
		tnsc.mutation.SetTxType(v)
	}
	if _, ok := tnsc.mutation.ID(); !ok {
		if txnotifstate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized txnotifstate.DefaultID (forgotten import ent/runtime?)")
		}
		v := txnotifstate.DefaultID()
		tnsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tnsc *TxNotifStateCreate) check() error {
	if _, ok := tnsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TxNotifState.created_at"`)}
	}
	if _, ok := tnsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TxNotifState.updated_at"`)}
	}
	if _, ok := tnsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TxNotifState.deleted_at"`)}
	}
	return nil
}

func (tnsc *TxNotifStateCreate) sqlSave(ctx context.Context) (*TxNotifState, error) {
	_node, _spec := tnsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tnsc *TxNotifStateCreate) createSpec() (*TxNotifState, *sqlgraph.CreateSpec) {
	var (
		_node = &TxNotifState{config: tnsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: txnotifstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: txnotifstate.FieldID,
			},
		}
	)
	_spec.OnConflict = tnsc.conflict
	if id, ok := tnsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tnsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tnsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tnsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnotifstate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tnsc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: txnotifstate.FieldTxID,
		})
		_node.TxID = value
	}
	if value, ok := tnsc.mutation.NotifState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldNotifState,
		})
		_node.NotifState = value
	}
	if value, ok := tnsc.mutation.TxType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: txnotifstate.FieldTxType,
		})
		_node.TxType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TxNotifState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TxNotifStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tnsc *TxNotifStateCreate) OnConflict(opts ...sql.ConflictOption) *TxNotifStateUpsertOne {
	tnsc.conflict = opts
	return &TxNotifStateUpsertOne{
		create: tnsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TxNotifState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tnsc *TxNotifStateCreate) OnConflictColumns(columns ...string) *TxNotifStateUpsertOne {
	tnsc.conflict = append(tnsc.conflict, sql.ConflictColumns(columns...))
	return &TxNotifStateUpsertOne{
		create: tnsc,
	}
}

type (
	// TxNotifStateUpsertOne is the builder for "upsert"-ing
	//  one TxNotifState node.
	TxNotifStateUpsertOne struct {
		create *TxNotifStateCreate
	}

	// TxNotifStateUpsert is the "OnConflict" setter.
	TxNotifStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TxNotifStateUpsert) SetCreatedAt(v uint32) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateCreatedAt() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNotifStateUpsert) AddCreatedAt(v uint32) *TxNotifStateUpsert {
	u.Add(txnotifstate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNotifStateUpsert) SetUpdatedAt(v uint32) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateUpdatedAt() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNotifStateUpsert) AddUpdatedAt(v uint32) *TxNotifStateUpsert {
	u.Add(txnotifstate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNotifStateUpsert) SetDeletedAt(v uint32) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateDeletedAt() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNotifStateUpsert) AddDeletedAt(v uint32) *TxNotifStateUpsert {
	u.Add(txnotifstate.FieldDeletedAt, v)
	return u
}

// SetTxID sets the "tx_id" field.
func (u *TxNotifStateUpsert) SetTxID(v uuid.UUID) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldTxID, v)
	return u
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateTxID() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldTxID)
	return u
}

// ClearTxID clears the value of the "tx_id" field.
func (u *TxNotifStateUpsert) ClearTxID() *TxNotifStateUpsert {
	u.SetNull(txnotifstate.FieldTxID)
	return u
}

// SetNotifState sets the "notif_state" field.
func (u *TxNotifStateUpsert) SetNotifState(v string) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldNotifState, v)
	return u
}

// UpdateNotifState sets the "notif_state" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateNotifState() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldNotifState)
	return u
}

// ClearNotifState clears the value of the "notif_state" field.
func (u *TxNotifStateUpsert) ClearNotifState() *TxNotifStateUpsert {
	u.SetNull(txnotifstate.FieldNotifState)
	return u
}

// SetTxType sets the "tx_type" field.
func (u *TxNotifStateUpsert) SetTxType(v string) *TxNotifStateUpsert {
	u.Set(txnotifstate.FieldTxType, v)
	return u
}

// UpdateTxType sets the "tx_type" field to the value that was provided on create.
func (u *TxNotifStateUpsert) UpdateTxType() *TxNotifStateUpsert {
	u.SetExcluded(txnotifstate.FieldTxType)
	return u
}

// ClearTxType clears the value of the "tx_type" field.
func (u *TxNotifStateUpsert) ClearTxType() *TxNotifStateUpsert {
	u.SetNull(txnotifstate.FieldTxType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TxNotifState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(txnotifstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TxNotifStateUpsertOne) UpdateNewValues() *TxNotifStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(txnotifstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TxNotifState.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TxNotifStateUpsertOne) Ignore() *TxNotifStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TxNotifStateUpsertOne) DoNothing() *TxNotifStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TxNotifStateCreate.OnConflict
// documentation for more info.
func (u *TxNotifStateUpsertOne) Update(set func(*TxNotifStateUpsert)) *TxNotifStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TxNotifStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TxNotifStateUpsertOne) SetCreatedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNotifStateUpsertOne) AddCreatedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateCreatedAt() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNotifStateUpsertOne) SetUpdatedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNotifStateUpsertOne) AddUpdatedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateUpdatedAt() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNotifStateUpsertOne) SetDeletedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNotifStateUpsertOne) AddDeletedAt(v uint32) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateDeletedAt() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTxID sets the "tx_id" field.
func (u *TxNotifStateUpsertOne) SetTxID(v uuid.UUID) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateTxID() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *TxNotifStateUpsertOne) ClearTxID() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearTxID()
	})
}

// SetNotifState sets the "notif_state" field.
func (u *TxNotifStateUpsertOne) SetNotifState(v string) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetNotifState(v)
	})
}

// UpdateNotifState sets the "notif_state" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateNotifState() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateNotifState()
	})
}

// ClearNotifState clears the value of the "notif_state" field.
func (u *TxNotifStateUpsertOne) ClearNotifState() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearNotifState()
	})
}

// SetTxType sets the "tx_type" field.
func (u *TxNotifStateUpsertOne) SetTxType(v string) *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetTxType(v)
	})
}

// UpdateTxType sets the "tx_type" field to the value that was provided on create.
func (u *TxNotifStateUpsertOne) UpdateTxType() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateTxType()
	})
}

// ClearTxType clears the value of the "tx_type" field.
func (u *TxNotifStateUpsertOne) ClearTxType() *TxNotifStateUpsertOne {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearTxType()
	})
}

// Exec executes the query.
func (u *TxNotifStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TxNotifStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TxNotifStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TxNotifStateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TxNotifStateUpsertOne.ID is not supported by MySQL driver. Use TxNotifStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TxNotifStateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TxNotifStateCreateBulk is the builder for creating many TxNotifState entities in bulk.
type TxNotifStateCreateBulk struct {
	config
	builders []*TxNotifStateCreate
	conflict []sql.ConflictOption
}

// Save creates the TxNotifState entities in the database.
func (tnscb *TxNotifStateCreateBulk) Save(ctx context.Context) ([]*TxNotifState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tnscb.builders))
	nodes := make([]*TxNotifState, len(tnscb.builders))
	mutators := make([]Mutator, len(tnscb.builders))
	for i := range tnscb.builders {
		func(i int, root context.Context) {
			builder := tnscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TxNotifStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tnscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tnscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tnscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tnscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tnscb *TxNotifStateCreateBulk) SaveX(ctx context.Context) []*TxNotifState {
	v, err := tnscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnscb *TxNotifStateCreateBulk) Exec(ctx context.Context) error {
	_, err := tnscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnscb *TxNotifStateCreateBulk) ExecX(ctx context.Context) {
	if err := tnscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TxNotifState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TxNotifStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tnscb *TxNotifStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *TxNotifStateUpsertBulk {
	tnscb.conflict = opts
	return &TxNotifStateUpsertBulk{
		create: tnscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TxNotifState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tnscb *TxNotifStateCreateBulk) OnConflictColumns(columns ...string) *TxNotifStateUpsertBulk {
	tnscb.conflict = append(tnscb.conflict, sql.ConflictColumns(columns...))
	return &TxNotifStateUpsertBulk{
		create: tnscb,
	}
}

// TxNotifStateUpsertBulk is the builder for "upsert"-ing
// a bulk of TxNotifState nodes.
type TxNotifStateUpsertBulk struct {
	create *TxNotifStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TxNotifState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(txnotifstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TxNotifStateUpsertBulk) UpdateNewValues() *TxNotifStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(txnotifstate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TxNotifState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TxNotifStateUpsertBulk) Ignore() *TxNotifStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TxNotifStateUpsertBulk) DoNothing() *TxNotifStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TxNotifStateCreateBulk.OnConflict
// documentation for more info.
func (u *TxNotifStateUpsertBulk) Update(set func(*TxNotifStateUpsert)) *TxNotifStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TxNotifStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TxNotifStateUpsertBulk) SetCreatedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNotifStateUpsertBulk) AddCreatedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateCreatedAt() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNotifStateUpsertBulk) SetUpdatedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNotifStateUpsertBulk) AddUpdatedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateUpdatedAt() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNotifStateUpsertBulk) SetDeletedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNotifStateUpsertBulk) AddDeletedAt(v uint32) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateDeletedAt() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTxID sets the "tx_id" field.
func (u *TxNotifStateUpsertBulk) SetTxID(v uuid.UUID) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateTxID() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *TxNotifStateUpsertBulk) ClearTxID() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearTxID()
	})
}

// SetNotifState sets the "notif_state" field.
func (u *TxNotifStateUpsertBulk) SetNotifState(v string) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetNotifState(v)
	})
}

// UpdateNotifState sets the "notif_state" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateNotifState() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateNotifState()
	})
}

// ClearNotifState clears the value of the "notif_state" field.
func (u *TxNotifStateUpsertBulk) ClearNotifState() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearNotifState()
	})
}

// SetTxType sets the "tx_type" field.
func (u *TxNotifStateUpsertBulk) SetTxType(v string) *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.SetTxType(v)
	})
}

// UpdateTxType sets the "tx_type" field to the value that was provided on create.
func (u *TxNotifStateUpsertBulk) UpdateTxType() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.UpdateTxType()
	})
}

// ClearTxType clears the value of the "tx_type" field.
func (u *TxNotifStateUpsertBulk) ClearTxType() *TxNotifStateUpsertBulk {
	return u.Update(func(s *TxNotifStateUpsert) {
		s.ClearTxType()
	})
}

// Exec executes the query.
func (u *TxNotifStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TxNotifStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TxNotifStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TxNotifStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
