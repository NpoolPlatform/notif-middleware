// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/txnotifstate"
	"github.com/google/uuid"
)

// TxNotifState is the model entity for the TxNotifState schema.
type TxNotifState struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// TxID holds the value of the "tx_id" field.
	TxID uuid.UUID `json:"tx_id,omitempty"`
	// NotifState holds the value of the "notif_state" field.
	NotifState string `json:"notif_state,omitempty"`
	// TxType holds the value of the "tx_type" field.
	TxType string `json:"tx_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TxNotifState) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case txnotifstate.FieldCreatedAt, txnotifstate.FieldUpdatedAt, txnotifstate.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case txnotifstate.FieldNotifState, txnotifstate.FieldTxType:
			values[i] = new(sql.NullString)
		case txnotifstate.FieldID, txnotifstate.FieldTxID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TxNotifState", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TxNotifState fields.
func (tns *TxNotifState) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case txnotifstate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tns.ID = *value
			}
		case txnotifstate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tns.CreatedAt = uint32(value.Int64)
			}
		case txnotifstate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tns.UpdatedAt = uint32(value.Int64)
			}
		case txnotifstate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tns.DeletedAt = uint32(value.Int64)
			}
		case txnotifstate.FieldTxID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value != nil {
				tns.TxID = *value
			}
		case txnotifstate.FieldNotifState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_state", values[i])
			} else if value.Valid {
				tns.NotifState = value.String
			}
		case txnotifstate.FieldTxType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_type", values[i])
			} else if value.Valid {
				tns.TxType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TxNotifState.
// Note that you need to call TxNotifState.Unwrap() before calling this method if this TxNotifState
// was returned from a transaction, and the transaction was committed or rolled back.
func (tns *TxNotifState) Update() *TxNotifStateUpdateOne {
	return (&TxNotifStateClient{config: tns.config}).UpdateOne(tns)
}

// Unwrap unwraps the TxNotifState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tns *TxNotifState) Unwrap() *TxNotifState {
	_tx, ok := tns.config.driver.(*txDriver)
	if !ok {
		panic("ent: TxNotifState is not a transactional entity")
	}
	tns.config.driver = _tx.drv
	return tns
}

// String implements the fmt.Stringer.
func (tns *TxNotifState) String() string {
	var builder strings.Builder
	builder.WriteString("TxNotifState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tns.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tns.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tns.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tns.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("tx_id=")
	builder.WriteString(fmt.Sprintf("%v", tns.TxID))
	builder.WriteString(", ")
	builder.WriteString("notif_state=")
	builder.WriteString(tns.NotifState)
	builder.WriteString(", ")
	builder.WriteString("tx_type=")
	builder.WriteString(tns.TxType)
	builder.WriteByte(')')
	return builder.String()
}

// TxNotifStates is a parsable slice of TxNotifState.
type TxNotifStates []*TxNotifState

func (tns TxNotifStates) config(cfg config) {
	for _i := range tns {
		tns[_i].config = cfg
	}
}
