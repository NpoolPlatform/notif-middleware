// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/readnotif"
	"github.com/google/uuid"
)

// ReadNotifUpdate is the builder for updating ReadNotif entities.
type ReadNotifUpdate struct {
	config
	hooks     []Hook
	mutation  *ReadNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReadNotifUpdate builder.
func (rnu *ReadNotifUpdate) Where(ps ...predicate.ReadNotif) *ReadNotifUpdate {
	rnu.mutation.Where(ps...)
	return rnu
}

// SetCreatedAt sets the "created_at" field.
func (rnu *ReadNotifUpdate) SetCreatedAt(u uint32) *ReadNotifUpdate {
	rnu.mutation.ResetCreatedAt()
	rnu.mutation.SetCreatedAt(u)
	return rnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rnu *ReadNotifUpdate) SetNillableCreatedAt(u *uint32) *ReadNotifUpdate {
	if u != nil {
		rnu.SetCreatedAt(*u)
	}
	return rnu
}

// AddCreatedAt adds u to the "created_at" field.
func (rnu *ReadNotifUpdate) AddCreatedAt(u int32) *ReadNotifUpdate {
	rnu.mutation.AddCreatedAt(u)
	return rnu
}

// SetUpdatedAt sets the "updated_at" field.
func (rnu *ReadNotifUpdate) SetUpdatedAt(u uint32) *ReadNotifUpdate {
	rnu.mutation.ResetUpdatedAt()
	rnu.mutation.SetUpdatedAt(u)
	return rnu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rnu *ReadNotifUpdate) AddUpdatedAt(u int32) *ReadNotifUpdate {
	rnu.mutation.AddUpdatedAt(u)
	return rnu
}

// SetDeletedAt sets the "deleted_at" field.
func (rnu *ReadNotifUpdate) SetDeletedAt(u uint32) *ReadNotifUpdate {
	rnu.mutation.ResetDeletedAt()
	rnu.mutation.SetDeletedAt(u)
	return rnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rnu *ReadNotifUpdate) SetNillableDeletedAt(u *uint32) *ReadNotifUpdate {
	if u != nil {
		rnu.SetDeletedAt(*u)
	}
	return rnu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rnu *ReadNotifUpdate) AddDeletedAt(u int32) *ReadNotifUpdate {
	rnu.mutation.AddDeletedAt(u)
	return rnu
}

// SetAppID sets the "app_id" field.
func (rnu *ReadNotifUpdate) SetAppID(u uuid.UUID) *ReadNotifUpdate {
	rnu.mutation.SetAppID(u)
	return rnu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rnu *ReadNotifUpdate) SetNillableAppID(u *uuid.UUID) *ReadNotifUpdate {
	if u != nil {
		rnu.SetAppID(*u)
	}
	return rnu
}

// ClearAppID clears the value of the "app_id" field.
func (rnu *ReadNotifUpdate) ClearAppID() *ReadNotifUpdate {
	rnu.mutation.ClearAppID()
	return rnu
}

// SetUserID sets the "user_id" field.
func (rnu *ReadNotifUpdate) SetUserID(u uuid.UUID) *ReadNotifUpdate {
	rnu.mutation.SetUserID(u)
	return rnu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rnu *ReadNotifUpdate) SetNillableUserID(u *uuid.UUID) *ReadNotifUpdate {
	if u != nil {
		rnu.SetUserID(*u)
	}
	return rnu
}

// ClearUserID clears the value of the "user_id" field.
func (rnu *ReadNotifUpdate) ClearUserID() *ReadNotifUpdate {
	rnu.mutation.ClearUserID()
	return rnu
}

// SetNotifID sets the "notif_id" field.
func (rnu *ReadNotifUpdate) SetNotifID(u uuid.UUID) *ReadNotifUpdate {
	rnu.mutation.SetNotifID(u)
	return rnu
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (rnu *ReadNotifUpdate) SetNillableNotifID(u *uuid.UUID) *ReadNotifUpdate {
	if u != nil {
		rnu.SetNotifID(*u)
	}
	return rnu
}

// ClearNotifID clears the value of the "notif_id" field.
func (rnu *ReadNotifUpdate) ClearNotifID() *ReadNotifUpdate {
	rnu.mutation.ClearNotifID()
	return rnu
}

// Mutation returns the ReadNotifMutation object of the builder.
func (rnu *ReadNotifUpdate) Mutation() *ReadNotifMutation {
	return rnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rnu *ReadNotifUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := rnu.defaults(); err != nil {
		return 0, err
	}
	if len(rnu.hooks) == 0 {
		affected, err = rnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rnu.mutation = mutation
			affected, err = rnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rnu.hooks) - 1; i >= 0; i-- {
			if rnu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rnu *ReadNotifUpdate) SaveX(ctx context.Context) int {
	affected, err := rnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rnu *ReadNotifUpdate) Exec(ctx context.Context) error {
	_, err := rnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rnu *ReadNotifUpdate) ExecX(ctx context.Context) {
	if err := rnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rnu *ReadNotifUpdate) defaults() error {
	if _, ok := rnu.mutation.UpdatedAt(); !ok {
		if readnotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized readnotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := readnotif.UpdateDefaultUpdatedAt()
		rnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rnu *ReadNotifUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReadNotifUpdate {
	rnu.modifiers = append(rnu.modifiers, modifiers...)
	return rnu
}

func (rnu *ReadNotifUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readnotif.Table,
			Columns: readnotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readnotif.FieldID,
			},
		},
	}
	if ps := rnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rnu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldCreatedAt,
		})
	}
	if value, ok := rnu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldCreatedAt,
		})
	}
	if value, ok := rnu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldUpdatedAt,
		})
	}
	if value, ok := rnu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldUpdatedAt,
		})
	}
	if value, ok := rnu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldDeletedAt,
		})
	}
	if value, ok := rnu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldDeletedAt,
		})
	}
	if value, ok := rnu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldAppID,
		})
	}
	if rnu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldAppID,
		})
	}
	if value, ok := rnu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldUserID,
		})
	}
	if rnu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldUserID,
		})
	}
	if value, ok := rnu.mutation.NotifID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldNotifID,
		})
	}
	if rnu.mutation.NotifIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldNotifID,
		})
	}
	_spec.Modifiers = rnu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, rnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readnotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReadNotifUpdateOne is the builder for updating a single ReadNotif entity.
type ReadNotifUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReadNotifMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (rnuo *ReadNotifUpdateOne) SetCreatedAt(u uint32) *ReadNotifUpdateOne {
	rnuo.mutation.ResetCreatedAt()
	rnuo.mutation.SetCreatedAt(u)
	return rnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rnuo *ReadNotifUpdateOne) SetNillableCreatedAt(u *uint32) *ReadNotifUpdateOne {
	if u != nil {
		rnuo.SetCreatedAt(*u)
	}
	return rnuo
}

// AddCreatedAt adds u to the "created_at" field.
func (rnuo *ReadNotifUpdateOne) AddCreatedAt(u int32) *ReadNotifUpdateOne {
	rnuo.mutation.AddCreatedAt(u)
	return rnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rnuo *ReadNotifUpdateOne) SetUpdatedAt(u uint32) *ReadNotifUpdateOne {
	rnuo.mutation.ResetUpdatedAt()
	rnuo.mutation.SetUpdatedAt(u)
	return rnuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rnuo *ReadNotifUpdateOne) AddUpdatedAt(u int32) *ReadNotifUpdateOne {
	rnuo.mutation.AddUpdatedAt(u)
	return rnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rnuo *ReadNotifUpdateOne) SetDeletedAt(u uint32) *ReadNotifUpdateOne {
	rnuo.mutation.ResetDeletedAt()
	rnuo.mutation.SetDeletedAt(u)
	return rnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rnuo *ReadNotifUpdateOne) SetNillableDeletedAt(u *uint32) *ReadNotifUpdateOne {
	if u != nil {
		rnuo.SetDeletedAt(*u)
	}
	return rnuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rnuo *ReadNotifUpdateOne) AddDeletedAt(u int32) *ReadNotifUpdateOne {
	rnuo.mutation.AddDeletedAt(u)
	return rnuo
}

// SetAppID sets the "app_id" field.
func (rnuo *ReadNotifUpdateOne) SetAppID(u uuid.UUID) *ReadNotifUpdateOne {
	rnuo.mutation.SetAppID(u)
	return rnuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rnuo *ReadNotifUpdateOne) SetNillableAppID(u *uuid.UUID) *ReadNotifUpdateOne {
	if u != nil {
		rnuo.SetAppID(*u)
	}
	return rnuo
}

// ClearAppID clears the value of the "app_id" field.
func (rnuo *ReadNotifUpdateOne) ClearAppID() *ReadNotifUpdateOne {
	rnuo.mutation.ClearAppID()
	return rnuo
}

// SetUserID sets the "user_id" field.
func (rnuo *ReadNotifUpdateOne) SetUserID(u uuid.UUID) *ReadNotifUpdateOne {
	rnuo.mutation.SetUserID(u)
	return rnuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rnuo *ReadNotifUpdateOne) SetNillableUserID(u *uuid.UUID) *ReadNotifUpdateOne {
	if u != nil {
		rnuo.SetUserID(*u)
	}
	return rnuo
}

// ClearUserID clears the value of the "user_id" field.
func (rnuo *ReadNotifUpdateOne) ClearUserID() *ReadNotifUpdateOne {
	rnuo.mutation.ClearUserID()
	return rnuo
}

// SetNotifID sets the "notif_id" field.
func (rnuo *ReadNotifUpdateOne) SetNotifID(u uuid.UUID) *ReadNotifUpdateOne {
	rnuo.mutation.SetNotifID(u)
	return rnuo
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (rnuo *ReadNotifUpdateOne) SetNillableNotifID(u *uuid.UUID) *ReadNotifUpdateOne {
	if u != nil {
		rnuo.SetNotifID(*u)
	}
	return rnuo
}

// ClearNotifID clears the value of the "notif_id" field.
func (rnuo *ReadNotifUpdateOne) ClearNotifID() *ReadNotifUpdateOne {
	rnuo.mutation.ClearNotifID()
	return rnuo
}

// Mutation returns the ReadNotifMutation object of the builder.
func (rnuo *ReadNotifUpdateOne) Mutation() *ReadNotifMutation {
	return rnuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rnuo *ReadNotifUpdateOne) Select(field string, fields ...string) *ReadNotifUpdateOne {
	rnuo.fields = append([]string{field}, fields...)
	return rnuo
}

// Save executes the query and returns the updated ReadNotif entity.
func (rnuo *ReadNotifUpdateOne) Save(ctx context.Context) (*ReadNotif, error) {
	var (
		err  error
		node *ReadNotif
	)
	if err := rnuo.defaults(); err != nil {
		return nil, err
	}
	if len(rnuo.hooks) == 0 {
		node, err = rnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rnuo.mutation = mutation
			node, err = rnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rnuo.hooks) - 1; i >= 0; i-- {
			if rnuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReadNotif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReadNotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rnuo *ReadNotifUpdateOne) SaveX(ctx context.Context) *ReadNotif {
	node, err := rnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rnuo *ReadNotifUpdateOne) Exec(ctx context.Context) error {
	_, err := rnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rnuo *ReadNotifUpdateOne) ExecX(ctx context.Context) {
	if err := rnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rnuo *ReadNotifUpdateOne) defaults() error {
	if _, ok := rnuo.mutation.UpdatedAt(); !ok {
		if readnotif.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized readnotif.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := readnotif.UpdateDefaultUpdatedAt()
		rnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rnuo *ReadNotifUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReadNotifUpdateOne {
	rnuo.modifiers = append(rnuo.modifiers, modifiers...)
	return rnuo
}

func (rnuo *ReadNotifUpdateOne) sqlSave(ctx context.Context) (_node *ReadNotif, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readnotif.Table,
			Columns: readnotif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readnotif.FieldID,
			},
		},
	}
	id, ok := rnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReadNotif.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, readnotif.FieldID)
		for _, f := range fields {
			if !readnotif.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != readnotif.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rnuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldCreatedAt,
		})
	}
	if value, ok := rnuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldCreatedAt,
		})
	}
	if value, ok := rnuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldUpdatedAt,
		})
	}
	if value, ok := rnuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldUpdatedAt,
		})
	}
	if value, ok := rnuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldDeletedAt,
		})
	}
	if value, ok := rnuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldDeletedAt,
		})
	}
	if value, ok := rnuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldAppID,
		})
	}
	if rnuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldAppID,
		})
	}
	if value, ok := rnuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldUserID,
		})
	}
	if rnuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldUserID,
		})
	}
	if value, ok := rnuo.mutation.NotifID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldNotifID,
		})
	}
	if rnuo.mutation.NotifIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: readnotif.FieldNotifID,
		})
	}
	_spec.Modifiers = rnuo.modifiers
	_node = &ReadNotif{config: rnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readnotif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
