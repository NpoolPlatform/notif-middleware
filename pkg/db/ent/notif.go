// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notif"
	"github.com/google/uuid"
)

// Notif is the model entity for the Notif schema.
type Notif struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Notified holds the value of the "notified" field.
	Notified bool `json:"notified,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// UseTemplate holds the value of the "use_template" field.
	UseTemplate bool `json:"use_template,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra string `json:"extra,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notif) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notif.FieldNotified, notif.FieldUseTemplate:
			values[i] = new(sql.NullBool)
		case notif.FieldCreatedAt, notif.FieldUpdatedAt, notif.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case notif.FieldEventType, notif.FieldTitle, notif.FieldContent, notif.FieldChannel, notif.FieldExtra, notif.FieldType:
			values[i] = new(sql.NullString)
		case notif.FieldID, notif.FieldAppID, notif.FieldUserID, notif.FieldLangID, notif.FieldEventID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notif", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notif fields.
func (n *Notif) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notif.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case notif.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = uint32(value.Int64)
			}
		case notif.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = uint32(value.Int64)
			}
		case notif.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = uint32(value.Int64)
			}
		case notif.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				n.AppID = *value
			}
		case notif.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				n.UserID = *value
			}
		case notif.FieldNotified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notified", values[i])
			} else if value.Valid {
				n.Notified = value.Bool
			}
		case notif.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				n.LangID = *value
			}
		case notif.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				n.EventID = *value
			}
		case notif.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				n.EventType = value.String
			}
		case notif.FieldUseTemplate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_template", values[i])
			} else if value.Valid {
				n.UseTemplate = value.Bool
			}
		case notif.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case notif.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = value.String
			}
		case notif.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				n.Channel = value.String
			}
		case notif.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				n.Extra = value.String
			}
		case notif.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				n.Type = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Notif.
// Note that you need to call Notif.Unwrap() before calling this method if this Notif
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notif) Update() *NotifUpdateOne {
	return (&NotifClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notif entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notif) Unwrap() *Notif {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notif is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notif) String() string {
	var builder strings.Builder
	builder.WriteString("Notif(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", n.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", n.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", n.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", n.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", n.UserID))
	builder.WriteString(", ")
	builder.WriteString("notified=")
	builder.WriteString(fmt.Sprintf("%v", n.Notified))
	builder.WriteString(", ")
	builder.WriteString("lang_id=")
	builder.WriteString(fmt.Sprintf("%v", n.LangID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", n.EventID))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(n.EventType)
	builder.WriteString(", ")
	builder.WriteString("use_template=")
	builder.WriteString(fmt.Sprintf("%v", n.UseTemplate))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(n.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(n.Content)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(n.Channel)
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(n.Extra)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(n.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Notifs is a parsable slice of Notif.
type Notifs []*Notif

func (n Notifs) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
