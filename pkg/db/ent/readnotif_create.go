// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/readnotif"
	"github.com/google/uuid"
)

// ReadNotifCreate is the builder for creating a ReadNotif entity.
type ReadNotifCreate struct {
	config
	mutation *ReadNotifMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rnc *ReadNotifCreate) SetCreatedAt(u uint32) *ReadNotifCreate {
	rnc.mutation.SetCreatedAt(u)
	return rnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableCreatedAt(u *uint32) *ReadNotifCreate {
	if u != nil {
		rnc.SetCreatedAt(*u)
	}
	return rnc
}

// SetUpdatedAt sets the "updated_at" field.
func (rnc *ReadNotifCreate) SetUpdatedAt(u uint32) *ReadNotifCreate {
	rnc.mutation.SetUpdatedAt(u)
	return rnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableUpdatedAt(u *uint32) *ReadNotifCreate {
	if u != nil {
		rnc.SetUpdatedAt(*u)
	}
	return rnc
}

// SetDeletedAt sets the "deleted_at" field.
func (rnc *ReadNotifCreate) SetDeletedAt(u uint32) *ReadNotifCreate {
	rnc.mutation.SetDeletedAt(u)
	return rnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableDeletedAt(u *uint32) *ReadNotifCreate {
	if u != nil {
		rnc.SetDeletedAt(*u)
	}
	return rnc
}

// SetAppID sets the "app_id" field.
func (rnc *ReadNotifCreate) SetAppID(u uuid.UUID) *ReadNotifCreate {
	rnc.mutation.SetAppID(u)
	return rnc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableAppID(u *uuid.UUID) *ReadNotifCreate {
	if u != nil {
		rnc.SetAppID(*u)
	}
	return rnc
}

// SetUserID sets the "user_id" field.
func (rnc *ReadNotifCreate) SetUserID(u uuid.UUID) *ReadNotifCreate {
	rnc.mutation.SetUserID(u)
	return rnc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableUserID(u *uuid.UUID) *ReadNotifCreate {
	if u != nil {
		rnc.SetUserID(*u)
	}
	return rnc
}

// SetNotifID sets the "notif_id" field.
func (rnc *ReadNotifCreate) SetNotifID(u uuid.UUID) *ReadNotifCreate {
	rnc.mutation.SetNotifID(u)
	return rnc
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableNotifID(u *uuid.UUID) *ReadNotifCreate {
	if u != nil {
		rnc.SetNotifID(*u)
	}
	return rnc
}

// SetID sets the "id" field.
func (rnc *ReadNotifCreate) SetID(u uuid.UUID) *ReadNotifCreate {
	rnc.mutation.SetID(u)
	return rnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rnc *ReadNotifCreate) SetNillableID(u *uuid.UUID) *ReadNotifCreate {
	if u != nil {
		rnc.SetID(*u)
	}
	return rnc
}

// Mutation returns the ReadNotifMutation object of the builder.
func (rnc *ReadNotifCreate) Mutation() *ReadNotifMutation {
	return rnc.mutation
}

// Save creates the ReadNotif in the database.
func (rnc *ReadNotifCreate) Save(ctx context.Context) (*ReadNotif, error) {
	var (
		err  error
		node *ReadNotif
	)
	if err := rnc.defaults(); err != nil {
		return nil, err
	}
	if len(rnc.hooks) == 0 {
		if err = rnc.check(); err != nil {
			return nil, err
		}
		node, err = rnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rnc.check(); err != nil {
				return nil, err
			}
			rnc.mutation = mutation
			if node, err = rnc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rnc.hooks) - 1; i >= 0; i-- {
			if rnc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rnc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rnc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReadNotif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReadNotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rnc *ReadNotifCreate) SaveX(ctx context.Context) *ReadNotif {
	v, err := rnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rnc *ReadNotifCreate) Exec(ctx context.Context) error {
	_, err := rnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rnc *ReadNotifCreate) ExecX(ctx context.Context) {
	if err := rnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rnc *ReadNotifCreate) defaults() error {
	if _, ok := rnc.mutation.CreatedAt(); !ok {
		if readnotif.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultCreatedAt()
		rnc.mutation.SetCreatedAt(v)
	}
	if _, ok := rnc.mutation.UpdatedAt(); !ok {
		if readnotif.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultUpdatedAt()
		rnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rnc.mutation.DeletedAt(); !ok {
		if readnotif.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultDeletedAt()
		rnc.mutation.SetDeletedAt(v)
	}
	if _, ok := rnc.mutation.AppID(); !ok {
		if readnotif.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultAppID()
		rnc.mutation.SetAppID(v)
	}
	if _, ok := rnc.mutation.UserID(); !ok {
		if readnotif.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultUserID()
		rnc.mutation.SetUserID(v)
	}
	if _, ok := rnc.mutation.NotifID(); !ok {
		if readnotif.DefaultNotifID == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultNotifID (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultNotifID()
		rnc.mutation.SetNotifID(v)
	}
	if _, ok := rnc.mutation.ID(); !ok {
		if readnotif.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized readnotif.DefaultID (forgotten import ent/runtime?)")
		}
		v := readnotif.DefaultID()
		rnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rnc *ReadNotifCreate) check() error {
	if _, ok := rnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReadNotif.created_at"`)}
	}
	if _, ok := rnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ReadNotif.updated_at"`)}
	}
	if _, ok := rnc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ReadNotif.deleted_at"`)}
	}
	return nil
}

func (rnc *ReadNotifCreate) sqlSave(ctx context.Context) (*ReadNotif, error) {
	_node, _spec := rnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rnc *ReadNotifCreate) createSpec() (*ReadNotif, *sqlgraph.CreateSpec) {
	var (
		_node = &ReadNotif{config: rnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: readnotif.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readnotif.FieldID,
			},
		}
	)
	_spec.OnConflict = rnc.conflict
	if id, ok := rnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rnc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rnc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rnc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readnotif.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := rnc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := rnc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := rnc.mutation.NotifID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readnotif.FieldNotifID,
		})
		_node.NotifID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReadNotif.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReadNotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rnc *ReadNotifCreate) OnConflict(opts ...sql.ConflictOption) *ReadNotifUpsertOne {
	rnc.conflict = opts
	return &ReadNotifUpsertOne{
		create: rnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReadNotif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rnc *ReadNotifCreate) OnConflictColumns(columns ...string) *ReadNotifUpsertOne {
	rnc.conflict = append(rnc.conflict, sql.ConflictColumns(columns...))
	return &ReadNotifUpsertOne{
		create: rnc,
	}
}

type (
	// ReadNotifUpsertOne is the builder for "upsert"-ing
	//  one ReadNotif node.
	ReadNotifUpsertOne struct {
		create *ReadNotifCreate
	}

	// ReadNotifUpsert is the "OnConflict" setter.
	ReadNotifUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ReadNotifUpsert) SetCreatedAt(v uint32) *ReadNotifUpsert {
	u.Set(readnotif.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateCreatedAt() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReadNotifUpsert) AddCreatedAt(v uint32) *ReadNotifUpsert {
	u.Add(readnotif.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReadNotifUpsert) SetUpdatedAt(v uint32) *ReadNotifUpsert {
	u.Set(readnotif.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateUpdatedAt() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReadNotifUpsert) AddUpdatedAt(v uint32) *ReadNotifUpsert {
	u.Add(readnotif.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReadNotifUpsert) SetDeletedAt(v uint32) *ReadNotifUpsert {
	u.Set(readnotif.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateDeletedAt() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReadNotifUpsert) AddDeletedAt(v uint32) *ReadNotifUpsert {
	u.Add(readnotif.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ReadNotifUpsert) SetAppID(v uuid.UUID) *ReadNotifUpsert {
	u.Set(readnotif.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateAppID() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReadNotifUpsert) ClearAppID() *ReadNotifUpsert {
	u.SetNull(readnotif.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ReadNotifUpsert) SetUserID(v uuid.UUID) *ReadNotifUpsert {
	u.Set(readnotif.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateUserID() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ReadNotifUpsert) ClearUserID() *ReadNotifUpsert {
	u.SetNull(readnotif.FieldUserID)
	return u
}

// SetNotifID sets the "notif_id" field.
func (u *ReadNotifUpsert) SetNotifID(v uuid.UUID) *ReadNotifUpsert {
	u.Set(readnotif.FieldNotifID, v)
	return u
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *ReadNotifUpsert) UpdateNotifID() *ReadNotifUpsert {
	u.SetExcluded(readnotif.FieldNotifID)
	return u
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *ReadNotifUpsert) ClearNotifID() *ReadNotifUpsert {
	u.SetNull(readnotif.FieldNotifID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReadNotif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(readnotif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReadNotifUpsertOne) UpdateNewValues() *ReadNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(readnotif.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ReadNotif.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ReadNotifUpsertOne) Ignore() *ReadNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReadNotifUpsertOne) DoNothing() *ReadNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReadNotifCreate.OnConflict
// documentation for more info.
func (u *ReadNotifUpsertOne) Update(set func(*ReadNotifUpsert)) *ReadNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReadNotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ReadNotifUpsertOne) SetCreatedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReadNotifUpsertOne) AddCreatedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateCreatedAt() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReadNotifUpsertOne) SetUpdatedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReadNotifUpsertOne) AddUpdatedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateUpdatedAt() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReadNotifUpsertOne) SetDeletedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReadNotifUpsertOne) AddDeletedAt(v uint32) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateDeletedAt() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ReadNotifUpsertOne) SetAppID(v uuid.UUID) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateAppID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReadNotifUpsertOne) ClearAppID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReadNotifUpsertOne) SetUserID(v uuid.UUID) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateUserID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ReadNotifUpsertOne) ClearUserID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotifID sets the "notif_id" field.
func (u *ReadNotifUpsertOne) SetNotifID(v uuid.UUID) *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetNotifID(v)
	})
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *ReadNotifUpsertOne) UpdateNotifID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateNotifID()
	})
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *ReadNotifUpsertOne) ClearNotifID() *ReadNotifUpsertOne {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearNotifID()
	})
}

// Exec executes the query.
func (u *ReadNotifUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReadNotifCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReadNotifUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReadNotifUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReadNotifUpsertOne.ID is not supported by MySQL driver. Use ReadNotifUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReadNotifUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReadNotifCreateBulk is the builder for creating many ReadNotif entities in bulk.
type ReadNotifCreateBulk struct {
	config
	builders []*ReadNotifCreate
	conflict []sql.ConflictOption
}

// Save creates the ReadNotif entities in the database.
func (rncb *ReadNotifCreateBulk) Save(ctx context.Context) ([]*ReadNotif, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rncb.builders))
	nodes := make([]*ReadNotif, len(rncb.builders))
	mutators := make([]Mutator, len(rncb.builders))
	for i := range rncb.builders {
		func(i int, root context.Context) {
			builder := rncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReadNotifMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rncb *ReadNotifCreateBulk) SaveX(ctx context.Context) []*ReadNotif {
	v, err := rncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rncb *ReadNotifCreateBulk) Exec(ctx context.Context) error {
	_, err := rncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rncb *ReadNotifCreateBulk) ExecX(ctx context.Context) {
	if err := rncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReadNotif.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReadNotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rncb *ReadNotifCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReadNotifUpsertBulk {
	rncb.conflict = opts
	return &ReadNotifUpsertBulk{
		create: rncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReadNotif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rncb *ReadNotifCreateBulk) OnConflictColumns(columns ...string) *ReadNotifUpsertBulk {
	rncb.conflict = append(rncb.conflict, sql.ConflictColumns(columns...))
	return &ReadNotifUpsertBulk{
		create: rncb,
	}
}

// ReadNotifUpsertBulk is the builder for "upsert"-ing
// a bulk of ReadNotif nodes.
type ReadNotifUpsertBulk struct {
	create *ReadNotifCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReadNotif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(readnotif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReadNotifUpsertBulk) UpdateNewValues() *ReadNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(readnotif.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReadNotif.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ReadNotifUpsertBulk) Ignore() *ReadNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReadNotifUpsertBulk) DoNothing() *ReadNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReadNotifCreateBulk.OnConflict
// documentation for more info.
func (u *ReadNotifUpsertBulk) Update(set func(*ReadNotifUpsert)) *ReadNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReadNotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ReadNotifUpsertBulk) SetCreatedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReadNotifUpsertBulk) AddCreatedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateCreatedAt() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReadNotifUpsertBulk) SetUpdatedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReadNotifUpsertBulk) AddUpdatedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateUpdatedAt() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReadNotifUpsertBulk) SetDeletedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReadNotifUpsertBulk) AddDeletedAt(v uint32) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateDeletedAt() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ReadNotifUpsertBulk) SetAppID(v uuid.UUID) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateAppID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReadNotifUpsertBulk) ClearAppID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReadNotifUpsertBulk) SetUserID(v uuid.UUID) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateUserID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ReadNotifUpsertBulk) ClearUserID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotifID sets the "notif_id" field.
func (u *ReadNotifUpsertBulk) SetNotifID(v uuid.UUID) *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.SetNotifID(v)
	})
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *ReadNotifUpsertBulk) UpdateNotifID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.UpdateNotifID()
	})
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *ReadNotifUpsertBulk) ClearNotifID() *ReadNotifUpsertBulk {
	return u.Update(func(s *ReadNotifUpsert) {
		s.ClearNotifID()
	})
}

// Exec executes the query.
func (u *ReadNotifUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReadNotifCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReadNotifCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReadNotifUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
