// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendnotif"
	"github.com/google/uuid"
)

// SendNotifCreate is the builder for creating a SendNotif entity.
type SendNotifCreate struct {
	config
	mutation *SendNotifMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (snc *SendNotifCreate) SetCreatedAt(u uint32) *SendNotifCreate {
	snc.mutation.SetCreatedAt(u)
	return snc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableCreatedAt(u *uint32) *SendNotifCreate {
	if u != nil {
		snc.SetCreatedAt(*u)
	}
	return snc
}

// SetUpdatedAt sets the "updated_at" field.
func (snc *SendNotifCreate) SetUpdatedAt(u uint32) *SendNotifCreate {
	snc.mutation.SetUpdatedAt(u)
	return snc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableUpdatedAt(u *uint32) *SendNotifCreate {
	if u != nil {
		snc.SetUpdatedAt(*u)
	}
	return snc
}

// SetDeletedAt sets the "deleted_at" field.
func (snc *SendNotifCreate) SetDeletedAt(u uint32) *SendNotifCreate {
	snc.mutation.SetDeletedAt(u)
	return snc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableDeletedAt(u *uint32) *SendNotifCreate {
	if u != nil {
		snc.SetDeletedAt(*u)
	}
	return snc
}

// SetAppID sets the "app_id" field.
func (snc *SendNotifCreate) SetAppID(u uuid.UUID) *SendNotifCreate {
	snc.mutation.SetAppID(u)
	return snc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableAppID(u *uuid.UUID) *SendNotifCreate {
	if u != nil {
		snc.SetAppID(*u)
	}
	return snc
}

// SetUserID sets the "user_id" field.
func (snc *SendNotifCreate) SetUserID(u uuid.UUID) *SendNotifCreate {
	snc.mutation.SetUserID(u)
	return snc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableUserID(u *uuid.UUID) *SendNotifCreate {
	if u != nil {
		snc.SetUserID(*u)
	}
	return snc
}

// SetNotifID sets the "notif_id" field.
func (snc *SendNotifCreate) SetNotifID(u uuid.UUID) *SendNotifCreate {
	snc.mutation.SetNotifID(u)
	return snc
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableNotifID(u *uuid.UUID) *SendNotifCreate {
	if u != nil {
		snc.SetNotifID(*u)
	}
	return snc
}

// SetChannel sets the "channel" field.
func (snc *SendNotifCreate) SetChannel(s string) *SendNotifCreate {
	snc.mutation.SetChannel(s)
	return snc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableChannel(s *string) *SendNotifCreate {
	if s != nil {
		snc.SetChannel(*s)
	}
	return snc
}

// SetID sets the "id" field.
func (snc *SendNotifCreate) SetID(u uuid.UUID) *SendNotifCreate {
	snc.mutation.SetID(u)
	return snc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (snc *SendNotifCreate) SetNillableID(u *uuid.UUID) *SendNotifCreate {
	if u != nil {
		snc.SetID(*u)
	}
	return snc
}

// Mutation returns the SendNotifMutation object of the builder.
func (snc *SendNotifCreate) Mutation() *SendNotifMutation {
	return snc.mutation
}

// Save creates the SendNotif in the database.
func (snc *SendNotifCreate) Save(ctx context.Context) (*SendNotif, error) {
	var (
		err  error
		node *SendNotif
	)
	if err := snc.defaults(); err != nil {
		return nil, err
	}
	if len(snc.hooks) == 0 {
		if err = snc.check(); err != nil {
			return nil, err
		}
		node, err = snc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SendNotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = snc.check(); err != nil {
				return nil, err
			}
			snc.mutation = mutation
			if node, err = snc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(snc.hooks) - 1; i >= 0; i-- {
			if snc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = snc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, snc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SendNotif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SendNotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (snc *SendNotifCreate) SaveX(ctx context.Context) *SendNotif {
	v, err := snc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snc *SendNotifCreate) Exec(ctx context.Context) error {
	_, err := snc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snc *SendNotifCreate) ExecX(ctx context.Context) {
	if err := snc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snc *SendNotifCreate) defaults() error {
	if _, ok := snc.mutation.CreatedAt(); !ok {
		if sendnotif.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultCreatedAt()
		snc.mutation.SetCreatedAt(v)
	}
	if _, ok := snc.mutation.UpdatedAt(); !ok {
		if sendnotif.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultUpdatedAt()
		snc.mutation.SetUpdatedAt(v)
	}
	if _, ok := snc.mutation.DeletedAt(); !ok {
		if sendnotif.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultDeletedAt()
		snc.mutation.SetDeletedAt(v)
	}
	if _, ok := snc.mutation.AppID(); !ok {
		if sendnotif.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultAppID()
		snc.mutation.SetAppID(v)
	}
	if _, ok := snc.mutation.UserID(); !ok {
		if sendnotif.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultUserID()
		snc.mutation.SetUserID(v)
	}
	if _, ok := snc.mutation.NotifID(); !ok {
		if sendnotif.DefaultNotifID == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultNotifID (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultNotifID()
		snc.mutation.SetNotifID(v)
	}
	if _, ok := snc.mutation.Channel(); !ok {
		v := sendnotif.DefaultChannel
		snc.mutation.SetChannel(v)
	}
	if _, ok := snc.mutation.ID(); !ok {
		if sendnotif.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized sendnotif.DefaultID (forgotten import ent/runtime?)")
		}
		v := sendnotif.DefaultID()
		snc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (snc *SendNotifCreate) check() error {
	if _, ok := snc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SendNotif.created_at"`)}
	}
	if _, ok := snc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SendNotif.updated_at"`)}
	}
	if _, ok := snc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SendNotif.deleted_at"`)}
	}
	return nil
}

func (snc *SendNotifCreate) sqlSave(ctx context.Context) (*SendNotif, error) {
	_node, _spec := snc.createSpec()
	if err := sqlgraph.CreateNode(ctx, snc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (snc *SendNotifCreate) createSpec() (*SendNotif, *sqlgraph.CreateSpec) {
	var (
		_node = &SendNotif{config: snc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sendnotif.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: sendnotif.FieldID,
			},
		}
	)
	_spec.OnConflict = snc.conflict
	if id, ok := snc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := snc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := snc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := snc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sendnotif.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := snc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := snc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := snc.mutation.NotifID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sendnotif.FieldNotifID,
		})
		_node.NotifID = value
	}
	if value, ok := snc.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sendnotif.FieldChannel,
		})
		_node.Channel = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SendNotif.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SendNotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (snc *SendNotifCreate) OnConflict(opts ...sql.ConflictOption) *SendNotifUpsertOne {
	snc.conflict = opts
	return &SendNotifUpsertOne{
		create: snc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SendNotif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (snc *SendNotifCreate) OnConflictColumns(columns ...string) *SendNotifUpsertOne {
	snc.conflict = append(snc.conflict, sql.ConflictColumns(columns...))
	return &SendNotifUpsertOne{
		create: snc,
	}
}

type (
	// SendNotifUpsertOne is the builder for "upsert"-ing
	//  one SendNotif node.
	SendNotifUpsertOne struct {
		create *SendNotifCreate
	}

	// SendNotifUpsert is the "OnConflict" setter.
	SendNotifUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SendNotifUpsert) SetCreatedAt(v uint32) *SendNotifUpsert {
	u.Set(sendnotif.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateCreatedAt() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SendNotifUpsert) AddCreatedAt(v uint32) *SendNotifUpsert {
	u.Add(sendnotif.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SendNotifUpsert) SetUpdatedAt(v uint32) *SendNotifUpsert {
	u.Set(sendnotif.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateUpdatedAt() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SendNotifUpsert) AddUpdatedAt(v uint32) *SendNotifUpsert {
	u.Add(sendnotif.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SendNotifUpsert) SetDeletedAt(v uint32) *SendNotifUpsert {
	u.Set(sendnotif.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateDeletedAt() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SendNotifUpsert) AddDeletedAt(v uint32) *SendNotifUpsert {
	u.Add(sendnotif.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SendNotifUpsert) SetAppID(v uuid.UUID) *SendNotifUpsert {
	u.Set(sendnotif.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateAppID() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *SendNotifUpsert) ClearAppID() *SendNotifUpsert {
	u.SetNull(sendnotif.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SendNotifUpsert) SetUserID(v uuid.UUID) *SendNotifUpsert {
	u.Set(sendnotif.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateUserID() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SendNotifUpsert) ClearUserID() *SendNotifUpsert {
	u.SetNull(sendnotif.FieldUserID)
	return u
}

// SetNotifID sets the "notif_id" field.
func (u *SendNotifUpsert) SetNotifID(v uuid.UUID) *SendNotifUpsert {
	u.Set(sendnotif.FieldNotifID, v)
	return u
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateNotifID() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldNotifID)
	return u
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *SendNotifUpsert) ClearNotifID() *SendNotifUpsert {
	u.SetNull(sendnotif.FieldNotifID)
	return u
}

// SetChannel sets the "channel" field.
func (u *SendNotifUpsert) SetChannel(v string) *SendNotifUpsert {
	u.Set(sendnotif.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *SendNotifUpsert) UpdateChannel() *SendNotifUpsert {
	u.SetExcluded(sendnotif.FieldChannel)
	return u
}

// ClearChannel clears the value of the "channel" field.
func (u *SendNotifUpsert) ClearChannel() *SendNotifUpsert {
	u.SetNull(sendnotif.FieldChannel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SendNotif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sendnotif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SendNotifUpsertOne) UpdateNewValues() *SendNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sendnotif.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SendNotif.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SendNotifUpsertOne) Ignore() *SendNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SendNotifUpsertOne) DoNothing() *SendNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SendNotifCreate.OnConflict
// documentation for more info.
func (u *SendNotifUpsertOne) Update(set func(*SendNotifUpsert)) *SendNotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SendNotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SendNotifUpsertOne) SetCreatedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SendNotifUpsertOne) AddCreatedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateCreatedAt() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SendNotifUpsertOne) SetUpdatedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SendNotifUpsertOne) AddUpdatedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateUpdatedAt() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SendNotifUpsertOne) SetDeletedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SendNotifUpsertOne) AddDeletedAt(v uint32) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateDeletedAt() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SendNotifUpsertOne) SetAppID(v uuid.UUID) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateAppID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SendNotifUpsertOne) ClearAppID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SendNotifUpsertOne) SetUserID(v uuid.UUID) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateUserID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SendNotifUpsertOne) ClearUserID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotifID sets the "notif_id" field.
func (u *SendNotifUpsertOne) SetNotifID(v uuid.UUID) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetNotifID(v)
	})
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateNotifID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateNotifID()
	})
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *SendNotifUpsertOne) ClearNotifID() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearNotifID()
	})
}

// SetChannel sets the "channel" field.
func (u *SendNotifUpsertOne) SetChannel(v string) *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *SendNotifUpsertOne) UpdateChannel() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *SendNotifUpsertOne) ClearChannel() *SendNotifUpsertOne {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearChannel()
	})
}

// Exec executes the query.
func (u *SendNotifUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SendNotifCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SendNotifUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SendNotifUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SendNotifUpsertOne.ID is not supported by MySQL driver. Use SendNotifUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SendNotifUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SendNotifCreateBulk is the builder for creating many SendNotif entities in bulk.
type SendNotifCreateBulk struct {
	config
	builders []*SendNotifCreate
	conflict []sql.ConflictOption
}

// Save creates the SendNotif entities in the database.
func (sncb *SendNotifCreateBulk) Save(ctx context.Context) ([]*SendNotif, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sncb.builders))
	nodes := make([]*SendNotif, len(sncb.builders))
	mutators := make([]Mutator, len(sncb.builders))
	for i := range sncb.builders {
		func(i int, root context.Context) {
			builder := sncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SendNotifMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sncb *SendNotifCreateBulk) SaveX(ctx context.Context) []*SendNotif {
	v, err := sncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sncb *SendNotifCreateBulk) Exec(ctx context.Context) error {
	_, err := sncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sncb *SendNotifCreateBulk) ExecX(ctx context.Context) {
	if err := sncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SendNotif.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SendNotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sncb *SendNotifCreateBulk) OnConflict(opts ...sql.ConflictOption) *SendNotifUpsertBulk {
	sncb.conflict = opts
	return &SendNotifUpsertBulk{
		create: sncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SendNotif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sncb *SendNotifCreateBulk) OnConflictColumns(columns ...string) *SendNotifUpsertBulk {
	sncb.conflict = append(sncb.conflict, sql.ConflictColumns(columns...))
	return &SendNotifUpsertBulk{
		create: sncb,
	}
}

// SendNotifUpsertBulk is the builder for "upsert"-ing
// a bulk of SendNotif nodes.
type SendNotifUpsertBulk struct {
	create *SendNotifCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SendNotif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sendnotif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SendNotifUpsertBulk) UpdateNewValues() *SendNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sendnotif.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SendNotif.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SendNotifUpsertBulk) Ignore() *SendNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SendNotifUpsertBulk) DoNothing() *SendNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SendNotifCreateBulk.OnConflict
// documentation for more info.
func (u *SendNotifUpsertBulk) Update(set func(*SendNotifUpsert)) *SendNotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SendNotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SendNotifUpsertBulk) SetCreatedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SendNotifUpsertBulk) AddCreatedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateCreatedAt() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SendNotifUpsertBulk) SetUpdatedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SendNotifUpsertBulk) AddUpdatedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateUpdatedAt() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SendNotifUpsertBulk) SetDeletedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SendNotifUpsertBulk) AddDeletedAt(v uint32) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateDeletedAt() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SendNotifUpsertBulk) SetAppID(v uuid.UUID) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateAppID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *SendNotifUpsertBulk) ClearAppID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SendNotifUpsertBulk) SetUserID(v uuid.UUID) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateUserID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SendNotifUpsertBulk) ClearUserID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotifID sets the "notif_id" field.
func (u *SendNotifUpsertBulk) SetNotifID(v uuid.UUID) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetNotifID(v)
	})
}

// UpdateNotifID sets the "notif_id" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateNotifID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateNotifID()
	})
}

// ClearNotifID clears the value of the "notif_id" field.
func (u *SendNotifUpsertBulk) ClearNotifID() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearNotifID()
	})
}

// SetChannel sets the "channel" field.
func (u *SendNotifUpsertBulk) SetChannel(v string) *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *SendNotifUpsertBulk) UpdateChannel() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *SendNotifUpsertBulk) ClearChannel() *SendNotifUpsertBulk {
	return u.Update(func(s *SendNotifUpsert) {
		s.ClearChannel()
	})
}

// Exec executes the query.
func (u *SendNotifUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SendNotifCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SendNotifCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SendNotifUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
