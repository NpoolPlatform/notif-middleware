// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/notif"
	"github.com/google/uuid"
)

// NotifCreate is the builder for creating a Notif entity.
type NotifCreate struct {
	config
	mutation *NotifMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (nc *NotifCreate) SetCreatedAt(u uint32) *NotifCreate {
	nc.mutation.SetCreatedAt(u)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NotifCreate) SetNillableCreatedAt(u *uint32) *NotifCreate {
	if u != nil {
		nc.SetCreatedAt(*u)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NotifCreate) SetUpdatedAt(u uint32) *NotifCreate {
	nc.mutation.SetUpdatedAt(u)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NotifCreate) SetNillableUpdatedAt(u *uint32) *NotifCreate {
	if u != nil {
		nc.SetUpdatedAt(*u)
	}
	return nc
}

// SetDeletedAt sets the "deleted_at" field.
func (nc *NotifCreate) SetDeletedAt(u uint32) *NotifCreate {
	nc.mutation.SetDeletedAt(u)
	return nc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nc *NotifCreate) SetNillableDeletedAt(u *uint32) *NotifCreate {
	if u != nil {
		nc.SetDeletedAt(*u)
	}
	return nc
}

// SetEntID sets the "ent_id" field.
func (nc *NotifCreate) SetEntID(u uuid.UUID) *NotifCreate {
	nc.mutation.SetEntID(u)
	return nc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (nc *NotifCreate) SetNillableEntID(u *uuid.UUID) *NotifCreate {
	if u != nil {
		nc.SetEntID(*u)
	}
	return nc
}

// SetAppID sets the "app_id" field.
func (nc *NotifCreate) SetAppID(u uuid.UUID) *NotifCreate {
	nc.mutation.SetAppID(u)
	return nc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (nc *NotifCreate) SetNillableAppID(u *uuid.UUID) *NotifCreate {
	if u != nil {
		nc.SetAppID(*u)
	}
	return nc
}

// SetUserID sets the "user_id" field.
func (nc *NotifCreate) SetUserID(u uuid.UUID) *NotifCreate {
	nc.mutation.SetUserID(u)
	return nc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nc *NotifCreate) SetNillableUserID(u *uuid.UUID) *NotifCreate {
	if u != nil {
		nc.SetUserID(*u)
	}
	return nc
}

// SetNotified sets the "notified" field.
func (nc *NotifCreate) SetNotified(b bool) *NotifCreate {
	nc.mutation.SetNotified(b)
	return nc
}

// SetNillableNotified sets the "notified" field if the given value is not nil.
func (nc *NotifCreate) SetNillableNotified(b *bool) *NotifCreate {
	if b != nil {
		nc.SetNotified(*b)
	}
	return nc
}

// SetLangID sets the "lang_id" field.
func (nc *NotifCreate) SetLangID(u uuid.UUID) *NotifCreate {
	nc.mutation.SetLangID(u)
	return nc
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (nc *NotifCreate) SetNillableLangID(u *uuid.UUID) *NotifCreate {
	if u != nil {
		nc.SetLangID(*u)
	}
	return nc
}

// SetEventID sets the "event_id" field.
func (nc *NotifCreate) SetEventID(u uuid.UUID) *NotifCreate {
	nc.mutation.SetEventID(u)
	return nc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (nc *NotifCreate) SetNillableEventID(u *uuid.UUID) *NotifCreate {
	if u != nil {
		nc.SetEventID(*u)
	}
	return nc
}

// SetEventType sets the "event_type" field.
func (nc *NotifCreate) SetEventType(s string) *NotifCreate {
	nc.mutation.SetEventType(s)
	return nc
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (nc *NotifCreate) SetNillableEventType(s *string) *NotifCreate {
	if s != nil {
		nc.SetEventType(*s)
	}
	return nc
}

// SetUseTemplate sets the "use_template" field.
func (nc *NotifCreate) SetUseTemplate(b bool) *NotifCreate {
	nc.mutation.SetUseTemplate(b)
	return nc
}

// SetNillableUseTemplate sets the "use_template" field if the given value is not nil.
func (nc *NotifCreate) SetNillableUseTemplate(b *bool) *NotifCreate {
	if b != nil {
		nc.SetUseTemplate(*b)
	}
	return nc
}

// SetTitle sets the "title" field.
func (nc *NotifCreate) SetTitle(s string) *NotifCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nc *NotifCreate) SetNillableTitle(s *string) *NotifCreate {
	if s != nil {
		nc.SetTitle(*s)
	}
	return nc
}

// SetContent sets the "content" field.
func (nc *NotifCreate) SetContent(s string) *NotifCreate {
	nc.mutation.SetContent(s)
	return nc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nc *NotifCreate) SetNillableContent(s *string) *NotifCreate {
	if s != nil {
		nc.SetContent(*s)
	}
	return nc
}

// SetChannel sets the "channel" field.
func (nc *NotifCreate) SetChannel(s string) *NotifCreate {
	nc.mutation.SetChannel(s)
	return nc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (nc *NotifCreate) SetNillableChannel(s *string) *NotifCreate {
	if s != nil {
		nc.SetChannel(*s)
	}
	return nc
}

// SetExtra sets the "extra" field.
func (nc *NotifCreate) SetExtra(s string) *NotifCreate {
	nc.mutation.SetExtra(s)
	return nc
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (nc *NotifCreate) SetNillableExtra(s *string) *NotifCreate {
	if s != nil {
		nc.SetExtra(*s)
	}
	return nc
}

// SetType sets the "type" field.
func (nc *NotifCreate) SetType(s string) *NotifCreate {
	nc.mutation.SetType(s)
	return nc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nc *NotifCreate) SetNillableType(s *string) *NotifCreate {
	if s != nil {
		nc.SetType(*s)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NotifCreate) SetID(u uint32) *NotifCreate {
	nc.mutation.SetID(u)
	return nc
}

// Mutation returns the NotifMutation object of the builder.
func (nc *NotifCreate) Mutation() *NotifMutation {
	return nc.mutation
}

// Save creates the Notif in the database.
func (nc *NotifCreate) Save(ctx context.Context) (*Notif, error) {
	var (
		err  error
		node *Notif
	)
	if err := nc.defaults(); err != nil {
		return nil, err
	}
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Notif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotifCreate) SaveX(ctx context.Context) *Notif {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotifCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotifCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NotifCreate) defaults() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		if notif.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notif.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		if notif.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notif.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.DeletedAt(); !ok {
		if notif.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := notif.DefaultDeletedAt()
		nc.mutation.SetDeletedAt(v)
	}
	if _, ok := nc.mutation.EntID(); !ok {
		if notif.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := notif.DefaultEntID()
		nc.mutation.SetEntID(v)
	}
	if _, ok := nc.mutation.AppID(); !ok {
		if notif.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := notif.DefaultAppID()
		nc.mutation.SetAppID(v)
	}
	if _, ok := nc.mutation.UserID(); !ok {
		if notif.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := notif.DefaultUserID()
		nc.mutation.SetUserID(v)
	}
	if _, ok := nc.mutation.Notified(); !ok {
		v := notif.DefaultNotified
		nc.mutation.SetNotified(v)
	}
	if _, ok := nc.mutation.LangID(); !ok {
		if notif.DefaultLangID == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultLangID (forgotten import ent/runtime?)")
		}
		v := notif.DefaultLangID()
		nc.mutation.SetLangID(v)
	}
	if _, ok := nc.mutation.EventID(); !ok {
		if notif.DefaultEventID == nil {
			return fmt.Errorf("ent: uninitialized notif.DefaultEventID (forgotten import ent/runtime?)")
		}
		v := notif.DefaultEventID()
		nc.mutation.SetEventID(v)
	}
	if _, ok := nc.mutation.EventType(); !ok {
		v := notif.DefaultEventType
		nc.mutation.SetEventType(v)
	}
	if _, ok := nc.mutation.UseTemplate(); !ok {
		v := notif.DefaultUseTemplate
		nc.mutation.SetUseTemplate(v)
	}
	if _, ok := nc.mutation.Title(); !ok {
		v := notif.DefaultTitle
		nc.mutation.SetTitle(v)
	}
	if _, ok := nc.mutation.Content(); !ok {
		v := notif.DefaultContent
		nc.mutation.SetContent(v)
	}
	if _, ok := nc.mutation.Channel(); !ok {
		v := notif.DefaultChannel
		nc.mutation.SetChannel(v)
	}
	if _, ok := nc.mutation.Extra(); !ok {
		v := notif.DefaultExtra
		nc.mutation.SetExtra(v)
	}
	if _, ok := nc.mutation.GetType(); !ok {
		v := notif.DefaultType
		nc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotifCreate) check() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Notif.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Notif.updated_at"`)}
	}
	if _, ok := nc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Notif.deleted_at"`)}
	}
	if _, ok := nc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Notif.ent_id"`)}
	}
	return nil
}

func (nc *NotifCreate) sqlSave(ctx context.Context) (*Notif, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (nc *NotifCreate) createSpec() (*Notif, *sqlgraph.CreateSpec) {
	var (
		_node = &Notif{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notif.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: notif.FieldID,
			},
		}
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notif.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notif.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: notif.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := nc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notif.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := nc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notif.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := nc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notif.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := nc.mutation.Notified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: notif.FieldNotified,
		})
		_node.Notified = value
	}
	if value, ok := nc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notif.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := nc.mutation.EventID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: notif.FieldEventID,
		})
		_node.EventID = value
	}
	if value, ok := nc.mutation.EventType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldEventType,
		})
		_node.EventType = value
	}
	if value, ok := nc.mutation.UseTemplate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: notif.FieldUseTemplate,
		})
		_node.UseTemplate = value
	}
	if value, ok := nc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := nc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := nc.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldChannel,
		})
		_node.Channel = value
	}
	if value, ok := nc.mutation.Extra(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldExtra,
		})
		_node.Extra = value
	}
	if value, ok := nc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notif.FieldType,
		})
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notif.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (nc *NotifCreate) OnConflict(opts ...sql.ConflictOption) *NotifUpsertOne {
	nc.conflict = opts
	return &NotifUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (nc *NotifCreate) OnConflictColumns(columns ...string) *NotifUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NotifUpsertOne{
		create: nc,
	}
}

type (
	// NotifUpsertOne is the builder for "upsert"-ing
	//  one Notif node.
	NotifUpsertOne struct {
		create *NotifCreate
	}

	// NotifUpsert is the "OnConflict" setter.
	NotifUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *NotifUpsert) SetCreatedAt(v uint32) *NotifUpsert {
	u.Set(notif.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUpsert) UpdateCreatedAt() *NotifUpsert {
	u.SetExcluded(notif.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUpsert) AddCreatedAt(v uint32) *NotifUpsert {
	u.Add(notif.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUpsert) SetUpdatedAt(v uint32) *NotifUpsert {
	u.Set(notif.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUpsert) UpdateUpdatedAt() *NotifUpsert {
	u.SetExcluded(notif.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUpsert) AddUpdatedAt(v uint32) *NotifUpsert {
	u.Add(notif.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUpsert) SetDeletedAt(v uint32) *NotifUpsert {
	u.Set(notif.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUpsert) UpdateDeletedAt() *NotifUpsert {
	u.SetExcluded(notif.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUpsert) AddDeletedAt(v uint32) *NotifUpsert {
	u.Add(notif.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *NotifUpsert) SetEntID(v uuid.UUID) *NotifUpsert {
	u.Set(notif.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUpsert) UpdateEntID() *NotifUpsert {
	u.SetExcluded(notif.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *NotifUpsert) SetAppID(v uuid.UUID) *NotifUpsert {
	u.Set(notif.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUpsert) UpdateAppID() *NotifUpsert {
	u.SetExcluded(notif.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUpsert) ClearAppID() *NotifUpsert {
	u.SetNull(notif.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *NotifUpsert) SetUserID(v uuid.UUID) *NotifUpsert {
	u.Set(notif.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUpsert) UpdateUserID() *NotifUpsert {
	u.SetExcluded(notif.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUpsert) ClearUserID() *NotifUpsert {
	u.SetNull(notif.FieldUserID)
	return u
}

// SetNotified sets the "notified" field.
func (u *NotifUpsert) SetNotified(v bool) *NotifUpsert {
	u.Set(notif.FieldNotified, v)
	return u
}

// UpdateNotified sets the "notified" field to the value that was provided on create.
func (u *NotifUpsert) UpdateNotified() *NotifUpsert {
	u.SetExcluded(notif.FieldNotified)
	return u
}

// ClearNotified clears the value of the "notified" field.
func (u *NotifUpsert) ClearNotified() *NotifUpsert {
	u.SetNull(notif.FieldNotified)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *NotifUpsert) SetLangID(v uuid.UUID) *NotifUpsert {
	u.Set(notif.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *NotifUpsert) UpdateLangID() *NotifUpsert {
	u.SetExcluded(notif.FieldLangID)
	return u
}

// ClearLangID clears the value of the "lang_id" field.
func (u *NotifUpsert) ClearLangID() *NotifUpsert {
	u.SetNull(notif.FieldLangID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *NotifUpsert) SetEventID(v uuid.UUID) *NotifUpsert {
	u.Set(notif.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *NotifUpsert) UpdateEventID() *NotifUpsert {
	u.SetExcluded(notif.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *NotifUpsert) ClearEventID() *NotifUpsert {
	u.SetNull(notif.FieldEventID)
	return u
}

// SetEventType sets the "event_type" field.
func (u *NotifUpsert) SetEventType(v string) *NotifUpsert {
	u.Set(notif.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUpsert) UpdateEventType() *NotifUpsert {
	u.SetExcluded(notif.FieldEventType)
	return u
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUpsert) ClearEventType() *NotifUpsert {
	u.SetNull(notif.FieldEventType)
	return u
}

// SetUseTemplate sets the "use_template" field.
func (u *NotifUpsert) SetUseTemplate(v bool) *NotifUpsert {
	u.Set(notif.FieldUseTemplate, v)
	return u
}

// UpdateUseTemplate sets the "use_template" field to the value that was provided on create.
func (u *NotifUpsert) UpdateUseTemplate() *NotifUpsert {
	u.SetExcluded(notif.FieldUseTemplate)
	return u
}

// ClearUseTemplate clears the value of the "use_template" field.
func (u *NotifUpsert) ClearUseTemplate() *NotifUpsert {
	u.SetNull(notif.FieldUseTemplate)
	return u
}

// SetTitle sets the "title" field.
func (u *NotifUpsert) SetTitle(v string) *NotifUpsert {
	u.Set(notif.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotifUpsert) UpdateTitle() *NotifUpsert {
	u.SetExcluded(notif.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *NotifUpsert) ClearTitle() *NotifUpsert {
	u.SetNull(notif.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *NotifUpsert) SetContent(v string) *NotifUpsert {
	u.Set(notif.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NotifUpsert) UpdateContent() *NotifUpsert {
	u.SetExcluded(notif.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *NotifUpsert) ClearContent() *NotifUpsert {
	u.SetNull(notif.FieldContent)
	return u
}

// SetChannel sets the "channel" field.
func (u *NotifUpsert) SetChannel(v string) *NotifUpsert {
	u.Set(notif.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifUpsert) UpdateChannel() *NotifUpsert {
	u.SetExcluded(notif.FieldChannel)
	return u
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifUpsert) ClearChannel() *NotifUpsert {
	u.SetNull(notif.FieldChannel)
	return u
}

// SetExtra sets the "extra" field.
func (u *NotifUpsert) SetExtra(v string) *NotifUpsert {
	u.Set(notif.FieldExtra, v)
	return u
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *NotifUpsert) UpdateExtra() *NotifUpsert {
	u.SetExcluded(notif.FieldExtra)
	return u
}

// ClearExtra clears the value of the "extra" field.
func (u *NotifUpsert) ClearExtra() *NotifUpsert {
	u.SetNull(notif.FieldExtra)
	return u
}

// SetType sets the "type" field.
func (u *NotifUpsert) SetType(v string) *NotifUpsert {
	u.Set(notif.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotifUpsert) UpdateType() *NotifUpsert {
	u.SetExcluded(notif.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *NotifUpsert) ClearType() *NotifUpsert {
	u.SetNull(notif.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Notif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifUpsertOne) UpdateNewValues() *NotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notif.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Notif.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *NotifUpsertOne) Ignore() *NotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifUpsertOne) DoNothing() *NotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifCreate.OnConflict
// documentation for more info.
func (u *NotifUpsertOne) Update(set func(*NotifUpsert)) *NotifUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifUpsertOne) SetCreatedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUpsertOne) AddCreatedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateCreatedAt() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUpsertOne) SetUpdatedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUpsertOne) AddUpdatedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateUpdatedAt() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUpsertOne) SetDeletedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUpsertOne) AddDeletedAt(v uint32) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateDeletedAt() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifUpsertOne) SetEntID(v uuid.UUID) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateEntID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifUpsertOne) SetAppID(v uuid.UUID) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateAppID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUpsertOne) ClearAppID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotifUpsertOne) SetUserID(v uuid.UUID) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateUserID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUpsertOne) ClearUserID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotified sets the "notified" field.
func (u *NotifUpsertOne) SetNotified(v bool) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetNotified(v)
	})
}

// UpdateNotified sets the "notified" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateNotified() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateNotified()
	})
}

// ClearNotified clears the value of the "notified" field.
func (u *NotifUpsertOne) ClearNotified() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearNotified()
	})
}

// SetLangID sets the "lang_id" field.
func (u *NotifUpsertOne) SetLangID(v uuid.UUID) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateLangID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *NotifUpsertOne) ClearLangID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearLangID()
	})
}

// SetEventID sets the "event_id" field.
func (u *NotifUpsertOne) SetEventID(v uuid.UUID) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateEventID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *NotifUpsertOne) ClearEventID() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearEventID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifUpsertOne) SetEventType(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateEventType() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUpsertOne) ClearEventType() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearEventType()
	})
}

// SetUseTemplate sets the "use_template" field.
func (u *NotifUpsertOne) SetUseTemplate(v bool) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetUseTemplate(v)
	})
}

// UpdateUseTemplate sets the "use_template" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateUseTemplate() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUseTemplate()
	})
}

// ClearUseTemplate clears the value of the "use_template" field.
func (u *NotifUpsertOne) ClearUseTemplate() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearUseTemplate()
	})
}

// SetTitle sets the "title" field.
func (u *NotifUpsertOne) SetTitle(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateTitle() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *NotifUpsertOne) ClearTitle() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *NotifUpsertOne) SetContent(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateContent() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *NotifUpsertOne) ClearContent() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearContent()
	})
}

// SetChannel sets the "channel" field.
func (u *NotifUpsertOne) SetChannel(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateChannel() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifUpsertOne) ClearChannel() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearChannel()
	})
}

// SetExtra sets the "extra" field.
func (u *NotifUpsertOne) SetExtra(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateExtra() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *NotifUpsertOne) ClearExtra() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearExtra()
	})
}

// SetType sets the "type" field.
func (u *NotifUpsertOne) SetType(v string) *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotifUpsertOne) UpdateType() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *NotifUpsertOne) ClearType() *NotifUpsertOne {
	return u.Update(func(s *NotifUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *NotifUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotifUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotifUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotifCreateBulk is the builder for creating many Notif entities in bulk.
type NotifCreateBulk struct {
	config
	builders []*NotifCreate
	conflict []sql.ConflictOption
}

// Save creates the Notif entities in the database.
func (ncb *NotifCreateBulk) Save(ctx context.Context) ([]*Notif, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notif, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotifCreateBulk) SaveX(ctx context.Context) []*Notif {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotifCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotifCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notif.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotifUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ncb *NotifCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotifUpsertBulk {
	ncb.conflict = opts
	return &NotifUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notif.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ncb *NotifCreateBulk) OnConflictColumns(columns ...string) *NotifUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NotifUpsertBulk{
		create: ncb,
	}
}

// NotifUpsertBulk is the builder for "upsert"-ing
// a bulk of Notif nodes.
type NotifUpsertBulk struct {
	create *NotifCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Notif.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notif.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *NotifUpsertBulk) UpdateNewValues() *NotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notif.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notif.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *NotifUpsertBulk) Ignore() *NotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotifUpsertBulk) DoNothing() *NotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotifCreateBulk.OnConflict
// documentation for more info.
func (u *NotifUpsertBulk) Update(set func(*NotifUpsert)) *NotifUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotifUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *NotifUpsertBulk) SetCreatedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *NotifUpsertBulk) AddCreatedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateCreatedAt() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotifUpsertBulk) SetUpdatedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *NotifUpsertBulk) AddUpdatedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateUpdatedAt() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotifUpsertBulk) SetDeletedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *NotifUpsertBulk) AddDeletedAt(v uint32) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateDeletedAt() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *NotifUpsertBulk) SetEntID(v uuid.UUID) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateEntID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *NotifUpsertBulk) SetAppID(v uuid.UUID) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateAppID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *NotifUpsertBulk) ClearAppID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotifUpsertBulk) SetUserID(v uuid.UUID) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateUserID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotifUpsertBulk) ClearUserID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearUserID()
	})
}

// SetNotified sets the "notified" field.
func (u *NotifUpsertBulk) SetNotified(v bool) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetNotified(v)
	})
}

// UpdateNotified sets the "notified" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateNotified() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateNotified()
	})
}

// ClearNotified clears the value of the "notified" field.
func (u *NotifUpsertBulk) ClearNotified() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearNotified()
	})
}

// SetLangID sets the "lang_id" field.
func (u *NotifUpsertBulk) SetLangID(v uuid.UUID) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateLangID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *NotifUpsertBulk) ClearLangID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearLangID()
	})
}

// SetEventID sets the "event_id" field.
func (u *NotifUpsertBulk) SetEventID(v uuid.UUID) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateEventID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *NotifUpsertBulk) ClearEventID() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearEventID()
	})
}

// SetEventType sets the "event_type" field.
func (u *NotifUpsertBulk) SetEventType(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateEventType() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateEventType()
	})
}

// ClearEventType clears the value of the "event_type" field.
func (u *NotifUpsertBulk) ClearEventType() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearEventType()
	})
}

// SetUseTemplate sets the "use_template" field.
func (u *NotifUpsertBulk) SetUseTemplate(v bool) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetUseTemplate(v)
	})
}

// UpdateUseTemplate sets the "use_template" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateUseTemplate() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateUseTemplate()
	})
}

// ClearUseTemplate clears the value of the "use_template" field.
func (u *NotifUpsertBulk) ClearUseTemplate() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearUseTemplate()
	})
}

// SetTitle sets the "title" field.
func (u *NotifUpsertBulk) SetTitle(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateTitle() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *NotifUpsertBulk) ClearTitle() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *NotifUpsertBulk) SetContent(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateContent() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *NotifUpsertBulk) ClearContent() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearContent()
	})
}

// SetChannel sets the "channel" field.
func (u *NotifUpsertBulk) SetChannel(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateChannel() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateChannel()
	})
}

// ClearChannel clears the value of the "channel" field.
func (u *NotifUpsertBulk) ClearChannel() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearChannel()
	})
}

// SetExtra sets the "extra" field.
func (u *NotifUpsertBulk) SetExtra(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateExtra() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *NotifUpsertBulk) ClearExtra() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearExtra()
	})
}

// SetType sets the "type" field.
func (u *NotifUpsertBulk) SetType(v string) *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotifUpsertBulk) UpdateType() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *NotifUpsertBulk) ClearType() *NotifUpsertBulk {
	return u.Update(func(s *NotifUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *NotifUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotifCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotifCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotifUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
