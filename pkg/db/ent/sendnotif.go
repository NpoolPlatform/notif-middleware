// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-middleware/pkg/db/ent/sendnotif"
	"github.com/google/uuid"
)

// SendNotif is the model entity for the SendNotif schema.
type SendNotif struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// NotifID holds the value of the "notif_id" field.
	NotifID uuid.UUID `json:"notif_id,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SendNotif) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sendnotif.FieldCreatedAt, sendnotif.FieldUpdatedAt, sendnotif.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case sendnotif.FieldChannel:
			values[i] = new(sql.NullString)
		case sendnotif.FieldID, sendnotif.FieldAppID, sendnotif.FieldUserID, sendnotif.FieldNotifID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SendNotif", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SendNotif fields.
func (sn *SendNotif) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sendnotif.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sn.ID = *value
			}
		case sendnotif.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sn.CreatedAt = uint32(value.Int64)
			}
		case sendnotif.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sn.UpdatedAt = uint32(value.Int64)
			}
		case sendnotif.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sn.DeletedAt = uint32(value.Int64)
			}
		case sendnotif.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				sn.AppID = *value
			}
		case sendnotif.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sn.UserID = *value
			}
		case sendnotif.FieldNotifID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field notif_id", values[i])
			} else if value != nil {
				sn.NotifID = *value
			}
		case sendnotif.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				sn.Channel = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SendNotif.
// Note that you need to call SendNotif.Unwrap() before calling this method if this SendNotif
// was returned from a transaction, and the transaction was committed or rolled back.
func (sn *SendNotif) Update() *SendNotifUpdateOne {
	return (&SendNotifClient{config: sn.config}).UpdateOne(sn)
}

// Unwrap unwraps the SendNotif entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sn *SendNotif) Unwrap() *SendNotif {
	_tx, ok := sn.config.driver.(*txDriver)
	if !ok {
		panic("ent: SendNotif is not a transactional entity")
	}
	sn.config.driver = _tx.drv
	return sn
}

// String implements the fmt.Stringer.
func (sn *SendNotif) String() string {
	var builder strings.Builder
	builder.WriteString("SendNotif(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sn.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sn.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sn.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", sn.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sn.UserID))
	builder.WriteString(", ")
	builder.WriteString("notif_id=")
	builder.WriteString(fmt.Sprintf("%v", sn.NotifID))
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(sn.Channel)
	builder.WriteByte(')')
	return builder.String()
}

// SendNotifs is a parsable slice of SendNotif.
type SendNotifs []*SendNotif

func (sn SendNotifs) config(cfg config) {
	for _i := range sn {
		sn[_i].config = cfg
	}
}
