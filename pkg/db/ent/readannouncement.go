// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/readannouncement"
	"github.com/google/uuid"
)

// ReadAnnouncement is the model entity for the ReadAnnouncement schema.
type ReadAnnouncement struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AnnouncementID holds the value of the "announcement_id" field.
	AnnouncementID uuid.UUID `json:"announcement_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReadAnnouncement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case readannouncement.FieldCreatedAt, readannouncement.FieldUpdatedAt, readannouncement.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case readannouncement.FieldID, readannouncement.FieldAppID, readannouncement.FieldUserID, readannouncement.FieldAnnouncementID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReadAnnouncement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReadAnnouncement fields.
func (ra *ReadAnnouncement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case readannouncement.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ra.ID = *value
			}
		case readannouncement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ra.CreatedAt = uint32(value.Int64)
			}
		case readannouncement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ra.UpdatedAt = uint32(value.Int64)
			}
		case readannouncement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ra.DeletedAt = uint32(value.Int64)
			}
		case readannouncement.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ra.AppID = *value
			}
		case readannouncement.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ra.UserID = *value
			}
		case readannouncement.FieldAnnouncementID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field announcement_id", values[i])
			} else if value != nil {
				ra.AnnouncementID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ReadAnnouncement.
// Note that you need to call ReadAnnouncement.Unwrap() before calling this method if this ReadAnnouncement
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *ReadAnnouncement) Update() *ReadAnnouncementUpdateOne {
	return (&ReadAnnouncementClient{config: ra.config}).UpdateOne(ra)
}

// Unwrap unwraps the ReadAnnouncement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *ReadAnnouncement) Unwrap() *ReadAnnouncement {
	_tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReadAnnouncement is not a transactional entity")
	}
	ra.config.driver = _tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *ReadAnnouncement) String() string {
	var builder strings.Builder
	builder.WriteString("ReadAnnouncement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ra.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ra.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ra.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ra.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.UserID))
	builder.WriteString(", ")
	builder.WriteString("announcement_id=")
	builder.WriteString(fmt.Sprintf("%v", ra.AnnouncementID))
	builder.WriteByte(')')
	return builder.String()
}

// ReadAnnouncements is a parsable slice of ReadAnnouncement.
type ReadAnnouncements []*ReadAnnouncement

func (ra ReadAnnouncements) config(cfg config) {
	for _i := range ra {
		ra[_i].config = cfg
	}
}
